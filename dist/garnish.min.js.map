{"version":3,"sources":["../lib/Base.js","../src/Garnish.js","../src/BaseDrag.js","../src/CheckboxSelect.js","../src/ContextMenu.js","../src/Drag.js","../src/DragDrop.js","../src/DragMove.js","../src/DragSort.js","../src/EscManager.js","../src/HUD.js","../src/Menu.js","../src/MenuBtn.js","../src/MixedInput.js","../src/Modal.js","../src/NiceText.js","../src/Pill.js","../src/Select.js","../src/SelectMenu.js","garnish.js"],"names":["$","getErd","undefined","erd","elementResizeDetectorMaker","triggerResizeEvent","elem","trigger","Base","extend","_instance","_static","prototype","_prototyping","proto","this","call","base","constructor","klass","_constructing","apply","arguments","ancestor","forEach","implement","toString","valueOf","type","init","source","value","length","test","method","previous","returnValue","toSource","hidden","i","key","desc","Object","getOwnPropertyDescriptor","defineProperty","version","object","block","context","String","Garnish","$win","window","$doc","document","$bod","body","rtl","hasClass","ltr","$scrollContainer","DELETE_KEY","SHIFT_KEY","CTRL_KEY","ALT_KEY","RETURN_KEY","ESC_KEY","SPACE_KEY","LEFT_KEY","UP_KEY","RIGHT_KEY","DOWN_KEY","A_KEY","S_KEY","CMD_KEY","PRIMARY_CLICK","SECONDARY_CLICK","X_AXIS","Y_AXIS","FX_DURATION","TEXT_NODE","log","msg","console","_isMobileBrowser","_isMobileOrTabletBrowser","isMobileBrowser","detectTablets","a","navigator","userAgent","vendor","opera","RegExp","substr","isArray","val","Array","isJquery","jQuery","isString","hasAttr","attr","isTextNode","nodeType","getOffset","_offset","offset","top","scrollTop","left","scrollLeft","getDist","x1","y1","x2","y2","Math","sqrt","pow","hitTest","x","y","_$elem","_x1","_y1","_x2","outerWidth","_y2","outerHeight","isCursorOver","ev","pageX","pageY","copyTextStyles","target","$source","$target","css","fontFamily","fontSize","fontWeight","letterSpacing","lineHeight","textAlign","textIndent","whiteSpace","wordSpacing","wordWrap","getBodyScrollTop","_scrollTop","_maxScrollTop","height","requestAnimationFrame","raf","mozRequestAnimationFrame","webkitRequestAnimationFrame","fn","setTimeout","cancelAnimationFrame","cancel","mozCancelAnimationFrame","webkitCancelAnimationFrame","clearTimeout","id","scrollContainerToElement","container","$elem","$container","scrollParent","prop","elemOffset","elemScrollOffset","targetScrollTop","elemHeight","containerHeight","innerHeight","clientHeight","velocity","mobileHA","SHAKE_STEPS","SHAKE_STEP_DURATION","shake","startingPoint","parseInt","isNaN","_properties","getElement","makeArray","getInputBasename","name","replace","getInputPostVal","$input","findInputs","find","getPostData","postData","arrayInputCounters","$inputs","eq","inputName","inputVal","isArrayInput","croppedName","substring","j","copyInputValues","$sourceInputs","$targetInputs","isCtrlKeyPressed","platform","match","metaKey","ctrlKey","altKey","settings","_eventHandlers","_namespace","_$listeners","_disabled","floor","random","_listeners","noop","setSettings","defaults","baseSettings","on","events","data","handler","_normalizeEvents","push","namespace","off","eventHandler","splice","params","_ev","split","_splitEvents","trim","_formatEvents","slice","join","addListener","func","proxy","inArray","removeListener","removeAllListeners","disable","enable","destroy","event","special","activate","setup","namespaces","eventHandle","mousedown.garnish-activate","e","preventDefault","click.garnish-activate","keydown.garnish-activate","keyCode","addClass","removeClass","removeAttr","teardown","textchange","handle","el","args","delay","handleObj","targetData","delayTimeout","resize","listenTo","each","BaseDrag","$items","dragging","mousedownX","mousedownY","realMouseX","realMouseY","mouseX","mouseY","mouseDistX","mouseDistY","mouseOffsetX","mouseOffsetY","$targetItem","scrollProperty","scrollAxis","scrollDist","scrollProxy","scrollFrame","_","items","isPlainObject","addItems","allowDragging","startDragging","onDragStart","drag","didMouseMove","_scrollProperty","axis","_winScrollTop","_minMouseScrollY","windowScrollTargetSize","_scrollAxis","_scrollDist","round","_maxMouseScrollY","_winScrollLeft","_minMouseScrollX","_maxMouseScrollX","width","_cancelWindowScroll","onDrag","stopDragging","onDragStop","item","removeItems","add","index","_deinitItem","removeAllItems","_handleMouseDown","which","$handle","_getItemHandle","currentTarget","is","closest","ignoreHandleSelector","_handleMouseMove","_mouseDist","minMouseDist","_handleMouseUp","_scrollWindow","scrollPos","removeData","CheckboxSelect","$all","$options","$checkboxes","filter","not","onAllChange","isAllChecked","checked","disabled","ContextMenu","options","$menu","showingMenu","counter","buildMenu","menuClass","$ul","appendTo","option","$li","$a","label","onClick","mousedown","hideMenu","showMenu","showing","show","hide","Drag","targetItemWidth","targetItemHeight","targetItemPositionInDraggee","$draggee","otherItems","totalOtherItems","helpers","helperTargets","helperPositions","helperLagIncrement","updateHelperPosProxy","updateHelperPosFrame","lastMouseX","lastMouseY","_returningHelpersToDraggees","draggeeDisplay","setDraggee","findDraggee","helperLagIncrementDividend","concat","toArray","singleHelper","_createHelper","removeDraggee","collapseDraggees","appendDraggee","$newDraggee","oldLength","newLength","draggeeVirtualMidpointX","draggeeVirtualMidpointY","getHelperTargetX","getHelperTargetY","returnHelpersToDraggees","$helper","display","visibility","draggeeOffset","callback","onReturnHelpersToDraggees","$draggeeHelper","clone","copyDraggeeInputValuesToHelper","margin","helper","append","helperPos","_getHelperTarget","position","zIndex","helperBaseZindex","opacity","helperOpacity","_updateHelperPos","_i","_j","_lag","helperLagBase","helperSpacingX","helperSpacingY","_showDraggee","remove","DragDrop","$dropTargets","$activeDropTarget","updateDropTargets","dropTargets","_activeDropTarget","_elem","activeDropTargetClass","onDropTargetChange","fadeOutHelpers","duration","complete","DragMove","DragSort","$heightedContainer","$insertion","insertionVisible","oldDraggeeIndexes","newDraggeeIndexes","closestItem","_midpointVersion","_$prevItem","createInsertion","insertion","magnetStrength","_draggeeOffsetX","_draggeeOffsetY","canInsertBefore","$item","canInsertAfter","_getDraggeeIndexes","moveTargetItemToFront","_getItemIndex","first","insertBefore","_placeInsertionWithDraggee","_clearMidpoints","parent","_removeInsertion","_getClosestItem","_updateInsertion","insertAfter","onSortChange","onInsertionPointChange","indexes","_closestItem","_testForClosestItem","_midpoint","_getItemMidpoint","_startXDist","_lastXDist","abs","_startYDist","_lastYDist","_$otherItem","prev","_xDist","_yDist","last","next","_repositionDraggee","get","_moveDraggeeToItem","_$item","prependTo","_mouseDistX","_mouseDistY","_closestItemMouseDistY","_closestItemMouseDistX","EscManager","handlers","escapeLatest","register","obj","unregister","pop","escManager","HUD","$trigger","$fixedTriggerParent","$hud","$tip","$body","$header","$footer","$mainContainer","$main","$shade","orientation","bodyContents","onShow","onHide","onSubmit","activeHUDs","class","shadeClass","hudClass","tipClass","bodyClass","mainContainerClass","mainClass","updateBody","$parent","offsetParent","closeBtn","html","headerClass","footerClass","stopPropagation","closeOtherHUDs","hudID","updateSizeAndPosition","windowWidth","windowHeight","triggerWidth","triggerHeight","triggerOffset","windowScrollLeft","windowScrollTop","scrollContainerTriggerOffset","scrollContainerScrollLeft","scrollContainerScrollTop","hudBodyWidth","hudBodyHeight","right","bottom","overflow-x","overflow-y","clearances","orientations","relevantSize","windowSpacing","triggerSpacing","tipClasses","maxHudBodyWidth","maxHudBodyHeight","minBodyWidth","minBodyHeight","mainHeight","maxLeft","minLeft","triggerCenter","tipLeft","tipWidth","maxTop","minTop","tipTop","toggle","submit","_handleSubmit","Menu","$anchor","menuId","_windowWidth","_windowHeight","_windowScrollLeft","_windowScrollTop","_anchorOffset","_anchorWidth","_anchorHeight","_anchorOffsetRight","_anchorOffsetBottom","_menuWidth","_menuHeight","addOptions","$menuList","role","aria-hidden","attachToElement","anchor","optionKey","tabindex","setPositionRelativeToAnchor","topClearance","bottomClearance","align","_alignCenter","rightClearance","leftClearance","_alignRight","_alignLeft","detach","selectOption","onOptionSelect","selectedOption","MenuBtn","$btn","menu","btn","menuAnchor","aria-owns","aria-haspopup","aria-expanded","onBlur","onKeyDown","$currentOption","click","$option","focusOption","onMouseDown","onMenuHide","MixedInput","elements","focussedElement","blurTimeout","getElementIndex","isText","onFocus","setFocus","setCarotPos","addTextElement","text","TextElement","addElement","focussedElementIndex","selectionStart","selectionEnd","preVal","postVal","newText","removeElement","$prevElem","$nextElem","prevElemVal","newVal","blurFocussedElement","focus","focusPreviousElement","$from","focusNextElement","pos","parentInput","$stage","focussed","interval","padding","setWidth","getIndex","buildStage","getTextWidth","stageWidth","setInterval","NiceText","checkInput","clearInterval","getVal","setVal","changed","onChange","Modal","visible","dragger","desiredWidth","desiredHeight","resizeDragger","resizeStartWidth","resizeStartHeight","setContainer","autoShow","instances","draggable","dragHandleSelector","resizable","$resizeDragHandle","closeOtherModals","visibleModal","hideOnShadeClick","hideOnEsc","quickShow","quickHide","max","min-width","min-height","_width","min","getWidth","minGutter","_height","getHeight","onFadeIn","onFadeOut","_handleResizeStart","_handleResize","relativeElemPadding","$hint","$charsLeft","autoHeight","maxLength","showCharsLeft","showingHint","inputBoxSizing","minHeight","initialized","input","isVisible","initialize","getHeightForValue","updateHeight","hint","$hintContainer","charsLeftClass","updateCharsLeft","initializeIfVisible","showHint","hintFadeDuration","hideHint","onTextChange","border-top","border-right","border-bottom","border-left","padding-top","padding-right","padding-bottom","padding-left","-webkit-box-sizing","-moz-box-sizing","box-sizing","spaces","onHeightChange","updateHeightIfWidthChanged","_charsLeft","negativeCharsLeftClass","Pill","$outerContainer","$innerContainer","$btns","$selectedBtn","outerContainer","preventOutlineOnMouseFocus","select","selectNext","nextIndex","_getSelectedBtnIndex","selectPrev","prevIndex","Select","$selectedItems","mousedownTarget","mouseUpTimeout","callbackFrame","$focusable","$first","$last","allowEmpty","checkboxMode","ignoreClick","deselectAll","getItemIndex","isSelected","selectItem","preventScroll","multi","setFocusableItem","focusItem","_selectItems","selectAll","selectRange","sliceFrom","sliceTo","deselectItem","_deselectItems","clearFirst","deselectOthers","toggleItem","_canDeselect","clearMouseUpTimeout","getFirstItem","getLastItem","isPreviousItem","isNextItem","getPreviousItem","getNextItem","getItemToTheLeft","horizontal","vertical","getClosestItem","getItemToTheRight","getItemAbove","getItemBelow","dir","axisProps","closestItemAxisProps","dirProps","closestItemDirectionProps","$thisItem","thisOffset","thisMidpoint","midpointOffset","midpointSizeFunc","otherRowPos","smallestMidpointDiff","$closestItem","step","$otherItem","otherOffset","isNextRow","rowOffset","otherMidpoint","midpointDiff","isWrongDirection","getFurthestItemToTheLeft","getFurthestItem","getFurthestItemToTheRight","getFurthestItemAbove","getFurthestItemBelow","$testItem","totalSelected","getTotalSelected","updateIndexes","itemsChanged","selectionChanged","selectedIndex","selectedClass","onSelectionChange","resetItemOrder","scrollTo","getSelectedItems","shiftKey","_actAsCheckbox","onMouseUp","<","b",">","SelectMenu","selected","build","_addSelectedOptionClass","dom","ul","className","setBtnText","$btnLabel","ulClass"],"mappings":"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","file":"garnish.min.js","sourcesContent":["/*!\r\n\tBase.js, version 1.1a\r\n\tCopyright 2006-2010, Dean Edwards\r\n\tLicense: http://www.opensource.org/licenses/mit-license.php\r\n*/\r\n\r\nvar Base = function() {\r\n\t// dummy\r\n};\r\n\r\nBase.extend = function(_instance, _static) { // subclass\r\n\tvar extend = Base.prototype.extend;\r\n\r\n\t// build the prototype\r\n\tBase._prototyping = true;\r\n\tvar proto = new this;\r\n\textend.call(proto, _instance);\r\n\tproto.base = function() {\r\n\t\t// call this method from any other method to invoke that method's ancestor\r\n\t};\r\n\tdelete Base._prototyping;\r\n\r\n\t// create the wrapper for the constructor function\r\n\t//var constructor = proto.constructor.valueOf(); //-dean\r\n\tvar constructor = proto.constructor;\r\n\tvar klass = proto.constructor = function() {\r\n\t\tif (!Base._prototyping) {\r\n\t\t\tif (this._constructing || this.constructor == klass) { // instantiation\r\n\t\t\t\tthis._constructing = true;\r\n\t\t\t\tconstructor.apply(this, arguments);\r\n\t\t\t\tdelete this._constructing;\r\n\t\t\t} else if (arguments[0] != null) { // casting\r\n\t\t\t\treturn (arguments[0].extend || extend).call(arguments[0], proto);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// build the class interface\r\n\tklass.ancestor = this;\r\n\tklass.extend = this.extend;\r\n\tklass.forEach = this.forEach;\r\n\tklass.implement = this.implement;\r\n\tklass.prototype = proto;\r\n\tklass.toString = this.toString;\r\n\tklass.valueOf = function(type) {\r\n\t\t//return (type == \"object\") ? klass : constructor; //-dean\r\n\t\treturn (type == \"object\") ? klass : constructor.valueOf();\r\n\t};\r\n\textend.call(klass, _static);\r\n\t// class initialisation\r\n\tif (typeof klass.init == \"function\") klass.init();\r\n\treturn klass;\r\n};\r\n\r\nBase.prototype = {\r\n\textend: function(source, value) {\r\n\t\tif (arguments.length > 1) { // extending with a name/value pair\r\n\t\t\tvar ancestor = this[source];\r\n\t\t\tif (ancestor && (typeof value == \"function\") && // overriding a method?\r\n\t\t\t\t// the valueOf() comparison is to avoid circular references\r\n\t\t\t\t(!ancestor.valueOf || ancestor.valueOf() != value.valueOf()) &&\r\n\t\t\t\t/\\bbase\\b/.test(value)) {\r\n\t\t\t\t// get the underlying method\r\n\t\t\t\tvar method = value.valueOf();\r\n\t\t\t\t// override\r\n\t\t\t\tvalue = function() {\r\n\t\t\t\t\tvar previous = this.base || Base.prototype.base;\r\n\t\t\t\t\tthis.base = ancestor;\r\n\t\t\t\t\tvar returnValue = method.apply(this, arguments);\r\n\t\t\t\t\tthis.base = previous;\r\n\t\t\t\t\treturn returnValue;\r\n\t\t\t\t};\r\n\t\t\t\t// point to the underlying method\r\n\t\t\t\tvalue.valueOf = function(type) {\r\n\t\t\t\t\treturn (type == \"object\") ? value : method;\r\n\t\t\t\t};\r\n\t\t\t\tvalue.toString = Base.toString;\r\n\t\t\t}\r\n\t\t\tthis[source] = value;\r\n\t\t} else if (source) { // extending with an object literal\r\n\t\t\tvar extend = Base.prototype.extend;\r\n\t\t\t// if this object has a customised extend method then use it\r\n\t\t\tif (!Base._prototyping && typeof this != \"function\") {\r\n\t\t\t\textend = this.extend || extend;\r\n\t\t\t}\r\n\t\t\tvar proto = {toSource: null};\r\n\t\t\t// do the \"toString\" and other methods manually\r\n\t\t\tvar hidden = [\"constructor\", \"toString\", \"valueOf\"];\r\n\t\t\t// if we are prototyping then include the constructor\r\n\t\t\tvar i = Base._prototyping ? 0 : 1;\r\n\t\t\twhile (key = hidden[i++]) {\r\n\t\t\t\tif (source[key] != proto[key]) {\r\n\t\t\t\t\textend.call(this, key, source[key]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// copy each of the source object's properties to this object\r\n\t\t\tfor (var key in source) {\r\n\t\t\t\tif (!proto[key]) {\r\n\t\t\t\t\tvar desc = Object.getOwnPropertyDescriptor(source, key);\r\n\t\t\t\t\tif (typeof desc.value != typeof undefined) {\r\n\t\t\t\t\t\t// set the value normally in case it's a function that needs to be overwritten\r\n\t\t\t\t\t\textend.call(this, key, desc.value);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// set it while maintaining the original descriptor settings\r\n\t\t\t\t\t\tObject.defineProperty(this, key, desc);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n};\r\n\r\n// initialise\r\nBase = Base.extend({\r\n\tconstructor: function() {\r\n\t\tthis.extend(arguments[0]);\r\n\t}\r\n}, {\r\n\tancestor: Object,\r\n\tversion: \"1.1\",\r\n\r\n\tforEach: function(object, block, context) {\r\n\t\tfor (var key in object) {\r\n\t\t\tif (this.prototype[key] === undefined) {\r\n\t\t\t\tblock.call(context, object[key], key, object);\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\timplement: function() {\r\n\t\tfor (var i = 0; i < arguments.length; i++) {\r\n\t\t\tif (typeof arguments[i] == \"function\") {\r\n\t\t\t\t// if it's a function, call it\r\n\t\t\t\targuments[i](this.prototype);\r\n\t\t\t} else {\r\n\t\t\t\t// add the interface using the extend method\r\n\t\t\t\tthis.prototype.extend(arguments[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t},\r\n\r\n\ttoString: function() {\r\n\t\treturn String(this.valueOf());\r\n\t}\r\n});\r\n","/**\n * @namespace Garnish\n */\n\n// Bail if Garnish is already defined\nif (Garnish !== undefined) {\n    throw 'Garnish is already defined!';\n}\n\nGarnish = {\n\n    // jQuery objects for common elements\n    $win: $(window),\n    $doc: $(document),\n    $bod: $(document.body)\n\n};\n\nGarnish.rtl = Garnish.$bod.hasClass('rtl');\nGarnish.ltr = !Garnish.rtl;\n\nGarnish = $.extend(Garnish, {\n\n    $scrollContainer: Garnish.$win,\n\n    // Key code constants\n    DELETE_KEY: 8,\n    SHIFT_KEY: 16,\n    CTRL_KEY: 17,\n    ALT_KEY: 18,\n    RETURN_KEY: 13,\n    ESC_KEY: 27,\n    SPACE_KEY: 32,\n    LEFT_KEY: 37,\n    UP_KEY: 38,\n    RIGHT_KEY: 39,\n    DOWN_KEY: 40,\n    A_KEY: 65,\n    S_KEY: 83,\n    CMD_KEY: 91,\n\n    // Mouse button constants\n    PRIMARY_CLICK: 1,\n    SECONDARY_CLICK: 3,\n\n    // Axis constants\n    X_AXIS: 'x',\n    Y_AXIS: 'y',\n\n    FX_DURATION: 100,\n\n    // Node types\n    TEXT_NODE: 3,\n\n    /**\n     * Logs a message to the browser's console, if the browser has one.\n     *\n     * @param string msg\n     */\n    log: function(msg) {\n        if (console !== undefined && typeof console.log == 'function') {\n            console.log(msg);\n        }\n    },\n\n    _isMobileBrowser: null,\n    _isMobileOrTabletBrowser: null,\n\n    /**\n     * Returns whether this is a mobile browser.\n     * Detection script courtesy of http://detectmobilebrowsers.com\n     *\n     * Last updated: 2014-11-24\n     *\n     * @param bool detectTablets\n     * @return bool\n     */\n    isMobileBrowser: function(detectTablets) {\n        var key = detectTablets ? '_isMobileOrTabletBrowser' : '_isMobileBrowser';\n\n        if (Garnish[key] === null) {\n            var a = navigator.userAgent || navigator.vendor || window.opera;\n            Garnish[key] = ((new RegExp('(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino' + (detectTablets ? '|android|ipad|playbook|silk' : ''), 'i')).test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0, 4)));\n        }\n\n        return Garnish[key];\n    },\n\n    /**\n     * Returns whether a variable is an array.\n     *\n     * @param mixed val\n     * @return bool\n     */\n    isArray: function(val) {\n        return (val instanceof Array);\n    },\n\n    /**\n     * Returns whether a variable is a jQuery collection.\n     *\n     * @param mixed val\n     * @return bool\n     */\n    isJquery: function(val) {\n        return (val instanceof jQuery);\n    },\n\n    /**\n     * Returns whether a variable is a string.\n     *\n     * @param mixed val\n     * @return bool\n     */\n    isString: function(val) {\n        return (typeof val == 'string');\n    },\n\n    /**\n     * Returns whether an element has an attribute.\n     *\n     * @see http://stackoverflow.com/questions/1318076/jquery-hasattr-checking-to-see-if-there-is-an-attribute-on-an-element/1318091#1318091\n     */\n    hasAttr: function(elem, attr) {\n        var val = $(elem).attr(attr);\n        return (val !== undefined && val !== false);\n    },\n\n    /**\n     * Returns whether something is a text node.\n     *\n     * @param object elem\n     * @return bool\n     */\n    isTextNode: function(elem) {\n        return (elem.nodeType == Garnish.TEXT_NODE);\n    },\n\n    /**\n     * Returns the offset of an element within the scroll container, whether that's the window or something else\n     */\n    getOffset: function(elem) {\n        this.getOffset._offset = $(elem).offset();\n\n        if (Garnish.$scrollContainer[0] != Garnish.$win[0]) {\n            this.getOffset._offset.top += Garnish.$scrollContainer.scrollTop();\n            this.getOffset._offset.left += Garnish.$scrollContainer.scrollLeft();\n        }\n\n        return this.getOffset._offset;\n    },\n\n    /**\n     * Returns the distance between two coordinates.\n     *\n     * @param int x1 The first coordinate's X position.\n     * @param int y1 The first coordinate's Y position.\n     * @param int x2 The second coordinate's X position.\n     * @param int y2 The second coordinate's Y position.\n     * @return float\n     */\n    getDist: function(x1, y1, x2, y2) {\n        return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n    },\n\n    /**\n     * Returns whether an element is touching an x/y coordinate.\n     *\n     * @param int    x    The coordinate's X position.\n     * @param int    y    The coordinate's Y position.\n     * @param object elem Either an actual element or a jQuery collection.\n     * @return bool\n     */\n    hitTest: function(x, y, elem) {\n        Garnish.hitTest._$elem = $(elem);\n        Garnish.hitTest._offset = Garnish.hitTest._$elem.offset();\n        Garnish.hitTest._x1 = Garnish.hitTest._offset.left;\n        Garnish.hitTest._y1 = Garnish.hitTest._offset.top;\n        Garnish.hitTest._x2 = Garnish.hitTest._x1 + Garnish.hitTest._$elem.outerWidth();\n        Garnish.hitTest._y2 = Garnish.hitTest._y1 + Garnish.hitTest._$elem.outerHeight();\n\n        return (x >= Garnish.hitTest._x1 && x < Garnish.hitTest._x2 && y >= Garnish.hitTest._y1 && y < Garnish.hitTest._y2);\n    },\n\n    /**\n     * Returns whether the cursor is touching an element.\n     *\n     * @param object ev   The mouse event object containing pageX and pageY properties.\n     * @param object elem Either an actual element or a jQuery collection.\n     * @return bool\n     */\n    isCursorOver: function(ev, elem) {\n        return Garnish.hitTest(ev.pageX, ev.pageY, elem);\n    },\n\n    /**\n     * Copies text styles from one element to another.\n     *\n     * @param object source The source element. Can be either an actual element or a jQuery collection.\n     * @param object target The target element. Can be either an actual element or a jQuery collection.\n     */\n    copyTextStyles: function(source, target) {\n        var $source = $(source),\n            $target = $(target);\n\n        $target.css({\n            fontFamily: $source.css('fontFamily'),\n            fontSize: $source.css('fontSize'),\n            fontWeight: $source.css('fontWeight'),\n            letterSpacing: $source.css('letterSpacing'),\n            lineHeight: $source.css('lineHeight'),\n            textAlign: $source.css('textAlign'),\n            textIndent: $source.css('textIndent'),\n            whiteSpace: $source.css('whiteSpace'),\n            wordSpacing: $source.css('wordSpacing'),\n            wordWrap: $source.css('wordWrap')\n        });\n    },\n\n    /**\n     * Returns the body's real scrollTop, discarding any window banding in Safari.\n     *\n     * @return int\n     */\n    getBodyScrollTop: function() {\n        Garnish.getBodyScrollTop._scrollTop = document.body.scrollTop;\n\n        if (Garnish.getBodyScrollTop._scrollTop < 0) {\n            Garnish.getBodyScrollTop._scrollTop = 0;\n        }\n        else {\n            Garnish.getBodyScrollTop._maxScrollTop = Garnish.$bod.outerHeight() - Garnish.$win.height();\n\n            if (Garnish.getBodyScrollTop._scrollTop > Garnish.getBodyScrollTop._maxScrollTop) {\n                Garnish.getBodyScrollTop._scrollTop = Garnish.getBodyScrollTop._maxScrollTop;\n            }\n        }\n\n        return Garnish.getBodyScrollTop._scrollTop;\n    },\n\n    requestAnimationFrame: (function() {\n            var raf = (\n                window.requestAnimationFrame ||\n                window.mozRequestAnimationFrame ||\n                window.webkitRequestAnimationFrame ||\n                function(fn) {\n                    return window.setTimeout(fn, 20);\n                }\n            );\n\n            return function(fn) {\n                return raf(fn);\n            };\n        })(),\n\n    cancelAnimationFrame: (function() {\n            var cancel = (\n                window.cancelAnimationFrame ||\n                window.mozCancelAnimationFrame ||\n                window.webkitCancelAnimationFrame ||\n                window.clearTimeout\n            );\n\n            return function(id) {\n                return cancel(id);\n            };\n        })(),\n\n    /**\n     * Scrolls a container element to an element within it.\n     *\n     * @param object container Either an actual element or a jQuery collection.\n     * @param object elem      Either an actual element or a jQuery collection.\n     */\n    scrollContainerToElement: function(container, elem) {\n        if (elem === undefined) {\n            var $elem = $(container);\n            $container = $elem.scrollParent();\n        }\n        else {\n            var $container = $(container),\n                $elem = $(elem);\n        }\n\n        if ($container.prop('nodeName') === 'HTML' || $container[0] == Garnish.$doc[0]) {\n            $container = Garnish.$win;\n        }\n\n        var scrollTop = $container.scrollTop(),\n            elemOffset = $elem.offset().top;\n\n        if ($container[0] == window) {\n            var elemScrollOffset = elemOffset - scrollTop;\n        }\n        else {\n            var elemScrollOffset = elemOffset - $container.offset().top;\n        }\n\n        var targetScrollTop = false;\n\n        // Is the element above the fold?\n        if (elemScrollOffset < 0) {\n            targetScrollTop = scrollTop + elemScrollOffset - 10;\n        }\n        else {\n            var elemHeight = $elem.outerHeight(),\n                containerHeight = ($container[0] == window ? window.innerHeight : $container[0].clientHeight);\n\n            // Is it below the fold?\n            if (elemScrollOffset + elemHeight > containerHeight) {\n                targetScrollTop = scrollTop + (elemScrollOffset - (containerHeight - elemHeight)) + 10;\n            }\n        }\n\n        if (targetScrollTop !== false) {\n            // Velocity only allows you to scroll to an arbitrary position if you're scrolling the main window\n            if ($container[0] == window) {\n                $('html').velocity('scroll', {\n                    offset: targetScrollTop + 'px',\n                    mobileHA: false\n                });\n            }\n            else {\n                $container.scrollTop(targetScrollTop);\n            }\n        }\n    },\n\n    SHAKE_STEPS: 10,\n    SHAKE_STEP_DURATION: 25,\n\n    /**\n     * Shakes an element.\n     *\n     * @param mixed  elem Either an actual element or a jQuery collection.\n     * @param string prop The property that should be adjusted (default is 'margin-left').\n     */\n    shake: function(elem, prop) {\n        var $elem = $(elem);\n\n        if (!prop) {\n            prop = 'margin-left';\n        }\n\n        var startingPoint = parseInt($elem.css(prop));\n        if (isNaN(startingPoint)) {\n            startingPoint = 0;\n        }\n\n        for (var i = 0; i <= Garnish.SHAKE_STEPS; i++) {\n            (function(i) {\n                setTimeout(function() {\n                    Garnish.shake._properties = {};\n                    Garnish.shake._properties[prop] = startingPoint + (i % 2 ? -1 : 1) * (10 - i);\n                    $elem.velocity(Garnish.shake._properties, Garnish.SHAKE_STEP_DURATION);\n                }, (Garnish.SHAKE_STEP_DURATION * i));\n            })(i);\n        }\n    },\n\n    /**\n     * Returns the first element in an array or jQuery collection.\n     *\n     * @param mixed elem\n     * @return mixed\n     */\n    getElement: function(elem) {\n        return $.makeArray(elem)[0];\n    },\n\n    /**\n     * Returns the beginning of an input's name= attribute value with any [bracktes] stripped out.\n     *\n     * @param object elem\n     * @return string|null\n     */\n    getInputBasename: function(elem) {\n        var name = $(elem).attr('name');\n\n        if (name) {\n            return name.replace(/\\[.*/, '');\n        }\n        else {\n            return null;\n        }\n    },\n\n    /**\n     * Returns an input's value as it would be POSTed.\n     * So unchecked checkboxes and radio buttons return null,\n     * and multi-selects whose name don't end in \"[]\" only return the last selection\n     *\n     * @param jQuery $input\n     * @return mixed\n     */\n    getInputPostVal: function($input) {\n        var type = $input.attr('type'),\n            val = $input.val();\n\n        // Is this an unchecked checkbox or radio button?\n        if ((type == 'checkbox' || type == 'radio')) {\n            if ($input.prop('checked')) {\n                return val;\n            }\n            else {\n                return null;\n            }\n        }\n\n        // Flatten any array values whose input name doesn't end in \"[]\"\n        //  - e.g. a multi-select\n        else if (Garnish.isArray(val) && $input.attr('name').substr(-2) != '[]') {\n            if (val.length) {\n                return val[val.length - 1];\n            }\n            else {\n                return null;\n            }\n        }\n\n        // Just return the value\n        else {\n            return val;\n        }\n    },\n\n    /**\n     * Returns the inputs within a container\n     *\n     * @param mixed container The container element. Can be either an actual element or a jQuery collection.\n     * @return jQuery\n     */\n    findInputs: function(container) {\n        return $(container).find('input,text,textarea,select,button');\n    },\n\n    /**\n     * Returns the post data within a container.\n     *\n     * @param mixed container\n     * @return array\n     */\n    getPostData: function(container) {\n        var postData = {},\n            arrayInputCounters = {},\n            $inputs = Garnish.findInputs(container);\n\n        for (var i = 0; i < $inputs.length; i++) {\n            var $input = $inputs.eq(i);\n\n            if ($input.prop('disabled')) {\n                continue;\n            }\n\n            var inputName = $input.attr('name');\n            if (!inputName) {\n                continue;\n            }\n\n            var inputVal = Garnish.getInputPostVal($input);\n            if (inputVal === null) {\n                continue;\n            }\n\n            var isArrayInput = (inputName.substr(-2) == '[]');\n\n            if (isArrayInput) {\n                // Get the cropped input name\n                var croppedName = inputName.substring(0, inputName.length - 2);\n\n                // Prep the input counter\n                if (arrayInputCounters[croppedName] === undefined) {\n                    arrayInputCounters[croppedName] = 0;\n                }\n            }\n\n            if (!Garnish.isArray(inputVal)) {\n                inputVal = [inputVal];\n            }\n\n            for (var j = 0; j < inputVal.length; j++) {\n                if (isArrayInput) {\n                    var inputName = croppedName + '[' + arrayInputCounters[croppedName] + ']';\n                    arrayInputCounters[croppedName]++;\n                }\n\n                postData[inputName] = inputVal[j];\n            }\n        }\n\n        return postData;\n    },\n\n    copyInputValues: function(source, target) {\n        var $sourceInputs = Garnish.findInputs(source),\n            $targetInputs = Garnish.findInputs(target);\n\n        for (var i = 0; i < $sourceInputs.length; i++) {\n            if ($targetInputs[i] === undefined) {\n                break;\n            }\n\n            $targetInputs.eq(i).val(\n                $sourceInputs.eq(i).val()\n            );\n        }\n    },\n\n    /**\n     * Returns whether the \"Ctrl\" key is pressed (or ⌘ if this is a Mac) for a given keyboard event\n     *\n     * @param ev The keyboard event\n     *\n     * @return boolean Whether the \"Ctrl\" key is pressed\n     */\n    isCtrlKeyPressed: function(ev) {\n        if (window.navigator.platform.match(/Mac/)) {\n            // metaKey maps to ⌘ on Macs\n            return ev.metaKey;\n        }\n        else {\n            // Both altKey and ctrlKey == true on some Windows keyboards when the right-hand ALT key is pressed\n            // so just be safe and make sure altKey == false\n            return (ev.ctrlKey && !ev.altKey);\n        }\n    }\n});\n\n\n/**\n * Garnish base class\n */\nGarnish.Base = Base.extend({\n\n    settings: null,\n\n    _eventHandlers: null,\n    _namespace: null,\n    _$listeners: null,\n    _disabled: false,\n\n    constructor: function() {\n        this._eventHandlers = [];\n        this._namespace = '.Garnish' + Math.floor(Math.random() * 1000000000);\n        this._listeners = [];\n        this.init.apply(this, arguments);\n    },\n\n    init: $.noop,\n\n    setSettings: function(settings, defaults) {\n        var baseSettings = (this.settings === undefined ? {} : this.settings);\n        this.settings = $.extend({}, baseSettings, defaults, settings);\n    },\n\n    on: function(events, data, handler) {\n        if (typeof data == 'function') {\n            handler = data;\n            data = {};\n        }\n\n        var events = this._normalizeEvents(events);\n\n        for (var i = 0; i < events.length; i++) {\n            var ev = events[i];\n\n            this._eventHandlers.push({\n                type: ev[0],\n                namespace: ev[1],\n                data: data,\n                handler: handler\n            });\n        }\n    },\n\n    off: function(events, handler) {\n        var events = this._normalizeEvents(events);\n\n        for (var i = 0; i < events.length; i++) {\n            var ev = events[i];\n\n            for (var j = this._eventHandlers.length - 1; j >= 0; j--) {\n                var eventHandler = this._eventHandlers[j];\n\n                if (eventHandler.type == ev[0] && (!ev[1] || eventHandler.namespace == ev[1]) && eventHandler.handler === handler) {\n                    this._eventHandlers.splice(j, 1);\n                }\n            }\n        }\n    },\n\n    trigger: function(type, data) {\n        var ev = {\n            type: type,\n            target: this\n        };\n\n        if (params === undefined) {\n            params = [];\n        }\n\n        for (var i = 0; i < this._eventHandlers.length; i++) {\n            var handler = this._eventHandlers[i];\n\n            if (handler.type == type) {\n                var _ev = $.extend({data: handler.data}, data, ev);\n                handler.handler(_ev)\n            }\n        }\n    },\n\n    _normalizeEvents: function(events) {\n        if (typeof events == 'string') {\n            events = events.split(' ');\n        }\n\n        for (var i = 0; i < events.length; i++) {\n            if (typeof events[i] == 'string') {\n                events[i] = events[i].split('.');\n            }\n        }\n\n        return events;\n    },\n\n    _splitEvents: function(events) {\n        if (typeof events == 'string') {\n            events = events.split(',');\n\n            for (var i = 0; i < events.length; i++) {\n                events[i] = $.trim(events[i]);\n            }\n        }\n\n        return events;\n    },\n\n    _formatEvents: function(events) {\n        var events = this._splitEvents(events).slice(0);\n\n        for (var i = 0; i < events.length; i++) {\n            events[i] += this._namespace;\n        }\n\n        return events.join(' ');\n    },\n\n    addListener: function(elem, events, data, func) {\n        var $elem = $(elem);\n\n        // Ignore if there aren't any elements\n        if (!$elem.length) {\n            return;\n        }\n\n        events = this._splitEvents(events);\n\n        // Param mapping\n        if (func === undefined && typeof data != 'object') {\n            // (elem, events, func)\n            func = data;\n            data = {};\n        }\n\n        if (typeof func == 'function') {\n            func = $.proxy(func, this);\n        }\n        else {\n            func = $.proxy(this, func);\n        }\n\n        $elem.on(this._formatEvents(events), data, $.proxy(function() {\n            if (!this._disabled) {\n                func.apply(this, arguments);\n            }\n        }, this));\n\n        // Remember that we're listening to this element\n        if ($.inArray(elem, this._listeners) == -1) {\n            this._listeners.push(elem);\n        }\n    },\n\n    removeListener: function(elem, events) {\n        $(elem).off(this._formatEvents(events));\n    },\n\n    removeAllListeners: function(elem) {\n        $(elem).off(this._namespace);\n    },\n\n    disable: function() {\n        this._disabled = true;\n    },\n\n    enable: function() {\n        this._disabled = false;\n    },\n\n    destroy: function() {\n        this.trigger('destroy');\n        this.removeAllListeners(this._listeners);\n    }\n});\n\n// Custom events\n// -----------------------------------------------------------------------------\n\nvar erd;\n\nfunction getErd() {\n    if (erd === undefined) {\n        erd = elementResizeDetectorMaker();\n    }\n\n    return erd;\n}\n\nfunction triggerResizeEvent(elem) {\n    $(elem).trigger('resize');\n};\n\n// Work them into jQuery's event system\n$.extend(jQuery.event.special, {\n    activate: {\n        setup: function(data, namespaces, eventHandle) {\n            var activateNamespace = this._namespace + '-activate';\n            var $elem = $(this);\n\n            $elem.on({\n                'mousedown.garnish-activate': function(e) {\n                    // Prevent buttons from getting focus on click\n                    e.preventDefault();\n                },\n                'click.garnish-activate': function(e) {\n                    e.preventDefault();\n\n                    if (!$elem.hasClass('disabled')) {\n                        $elem.trigger('activate');\n                    }\n                },\n                'keydown.garnish-activate': function(e) {\n                    // Ignore if the event was bubbled up, or if it wasn't the space key\n                    if (this != $elem[0] || e.keyCode != Garnish.SPACE_KEY) {\n                        return;\n                    }\n\n                    e.preventDefault();\n\n                    if (!$elem.hasClass('disabled')) {\n                        $elem.addClass('active');\n\n                        Garnish.$doc.on('keyup.garnish-activate', function(e) {\n                            $elem.removeClass('active');\n\n                            if (e.keyCode == Garnish.SPACE_KEY) {\n                                e.preventDefault();\n                                $elem.trigger('activate');\n                            }\n\n                            Garnish.$doc.off('keyup.garnish-activate');\n                        });\n                    }\n                }\n            });\n\n            if (!$elem.hasClass('disabled')) {\n                $elem.attr('tabindex', '0');\n            } else {\n                $elem.removeAttr('tabindex');\n            }\n        },\n        teardown: function() {\n            $(this).off('.garnish-activate');\n        }\n    },\n\n    textchange: {\n        setup: function(data, namespaces, eventHandle) {\n            var $elem = $(this);\n            $elem.data('garnish-textchange-value', $elem.val());\n            $elem.on('keypress.garnish-textchange keyup.garnish-textchange change.garnish-textchange blur.garnish-textchange', function(e) {\n                var val = $elem.val();\n                if (val != $elem.data('garnish-textchange-value')) {\n                    $elem.data('garnish-textchange-value', val);\n                    $elem.trigger('textchange');\n                }\n            });\n        },\n        teardown: function() {\n            $(this).off('.garnish-textchange');\n        },\n        handle: function(ev, data) {\n            var el = this;\n            var args = arguments;\n            var delay = data && data.delay !== undefined ? data.delay : (ev.data && ev.data.delay !== undefined ? ev.data.delay : null);\n            var handleObj = ev.handleObj;\n            var targetData = $.data(ev.target);\n\n            // Was this event configured with a delay?\n            if (delay) {\n                if (targetData.delayTimeout) {\n                    clearTimeout(targetData.delayTimeout);\n                }\n\n                targetData.delayTimeout = setTimeout(function() {\n                    handleObj.handler.apply(el, args);\n                }, delay);\n            } else {\n                return handleObj.handler.apply(el, args);\n            }\n        }\n    },\n\n    resize: {\n        setup: function(data, namespaces, eventHandle) {\n            // window is the only element that natively supports a resize event\n            if (this == window) {\n                return false;\n            }\n\n            $('> :last-child', this).addClass('last');\n            getErd().listenTo(this, triggerResizeEvent)\n        },\n        teardown: function() {\n            if (this == window) {\n                return false;\n            }\n\n            getErd().removeListener(this, triggerResizeEvent);\n        }\n    }\n});\n\n// Give them their own element collection chaining methods\njQuery.each(['activate', 'textchange', 'resize'], function(i, name) {\n    jQuery.fn[name] = function(data, fn) {\n        return arguments.length > 0 ?\n            this.on(name, null, data, fn) :\n            this.trigger(name);\n    };\n});\n","/** global: Garnish */\n/**\n * Base drag class\n *\n * Does all the grunt work for manipulating elements via click-and-drag,\n * while leaving the actual element manipulation up to a subclass.\n */\nGarnish.BaseDrag = Garnish.Base.extend(\n    {\n        $items: null,\n\n        dragging: false,\n\n        mousedownX: null,\n        mousedownY: null,\n        realMouseX: null,\n        realMouseY: null,\n        mouseX: null,\n        mouseY: null,\n        mouseDistX: null,\n        mouseDistY: null,\n        mouseOffsetX: null,\n        mouseOffsetY: null,\n\n        $targetItem: null,\n\n        scrollProperty: null,\n        scrollAxis: null,\n        scrollDist: null,\n        scrollProxy: null,\n        scrollFrame: null,\n\n        _: null,\n\n        /**\n         * Constructor\n         *\n         * @param mixed  items    Elements that should be draggable right away. (Can be skipped.)\n         * @param object settings Any settings that should override the defaults.\n         */\n        init: function(items, settings) {\n            // Param mapping\n            if (settings === undefined && $.isPlainObject(items)) {\n                // (settings)\n                settings = items;\n                items = null;\n            }\n\n            this.settings = $.extend({}, Garnish.BaseDrag.defaults, settings);\n\n            this.$items = $();\n            this._ = {};\n\n            if (items) {\n                this.addItems(items);\n            }\n        },\n\n        /**\n         * Returns whether dragging is allowed right now.\n         */\n        allowDragging: function() {\n            return true;\n        },\n\n        /**\n         * Start Dragging\n         */\n        startDragging: function() {\n            this.dragging = true;\n            this.onDragStart();\n        },\n\n        /**\n         * Drag\n         */\n        drag: function(didMouseMove) {\n            if (didMouseMove) {\n                // Is the mouse up against one of the window edges?\n                this.drag._scrollProperty = null;\n\n                if (this.settings.axis != Garnish.X_AXIS) {\n                    // Scrolling up?\n                    this.drag._winScrollTop = Garnish.$win.scrollTop();\n                    this.drag._minMouseScrollY = this.drag._winScrollTop + Garnish.BaseDrag.windowScrollTargetSize;\n\n                    if (this.mouseY < this.drag._minMouseScrollY) {\n                        this.drag._scrollProperty = 'scrollTop';\n                        this.drag._scrollAxis = 'Y';\n                        this.drag._scrollDist = Math.round((this.mouseY - this.drag._minMouseScrollY) / 2);\n                    }\n                    else {\n                        // Scrolling down?\n                        this.drag._maxMouseScrollY = this.drag._winScrollTop + Garnish.$win.height() - Garnish.BaseDrag.windowScrollTargetSize;\n\n                        if (this.mouseY > this.drag._maxMouseScrollY) {\n                            this.drag._scrollProperty = 'scrollTop';\n                            this.drag._scrollAxis = 'Y';\n                            this.drag._scrollDist = Math.round((this.mouseY - this.drag._maxMouseScrollY) / 2);\n                        }\n                    }\n                }\n\n                if (!this.drag._scrollProperty && this.settings.axis != Garnish.Y_AXIS) {\n                    // Scrolling left?\n                    this.drag._winScrollLeft = Garnish.$win.scrollLeft();\n                    this.drag._minMouseScrollX = this.drag._winScrollLeft + Garnish.BaseDrag.windowScrollTargetSize;\n\n                    if (this.mouseX < this.drag._minMouseScrollX) {\n                        this.drag._scrollProperty = 'scrollLeft';\n                        this.drag._scrollAxis = 'X';\n                        this.drag._scrollDist = Math.round((this.mouseX - this.drag._minMouseScrollX) / 2);\n                    }\n                    else {\n                        // Scrolling right?\n                        this.drag._maxMouseScrollX = this.drag._winScrollLeft + Garnish.$win.width() - Garnish.BaseDrag.windowScrollTargetSize;\n\n                        if (this.mouseX > this.drag._maxMouseScrollX) {\n                            this.drag._scrollProperty = 'scrollLeft';\n                            this.drag._scrollAxis = 'X';\n                            this.drag._scrollDist = Math.round((this.mouseX - this.drag._maxMouseScrollX) / 2);\n                        }\n                    }\n                }\n\n                if (this.drag._scrollProperty) {\n                    // Are we starting to scroll now?\n                    if (!this.scrollProperty) {\n                        if (!this.scrollProxy) {\n                            this.scrollProxy = $.proxy(this, '_scrollWindow');\n                        }\n\n                        if (this.scrollFrame) {\n                            Garnish.cancelAnimationFrame(this.scrollFrame);\n                            this.scrollFrame = null;\n                        }\n\n                        this.scrollFrame = Garnish.requestAnimationFrame(this.scrollProxy);\n                    }\n\n                    this.scrollProperty = this.drag._scrollProperty;\n                    this.scrollAxis = this.drag._scrollAxis;\n                    this.scrollDist = this.drag._scrollDist;\n                }\n                else {\n                    this._cancelWindowScroll();\n                }\n            }\n\n            this.onDrag();\n        },\n\n        /**\n         * Stop Dragging\n         */\n        stopDragging: function() {\n            this.dragging = false;\n            this.onDragStop();\n\n            // Clear the scroll animation\n            this._cancelWindowScroll();\n        },\n\n        /**\n         * Add Items\n         *\n         * @param mixed items Elements that should be draggable.\n         */\n        addItems: function(items) {\n            items = $.makeArray(items);\n\n            for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n\n                // Make sure this element doesn't belong to another dragger\n                if ($.data(item, 'drag')) {\n                    Garnish.log('Element was added to more than one dragger');\n                    $.data(item, 'drag').removeItems(item);\n                }\n\n                // Add the item\n                $.data(item, 'drag', this);\n\n                // Add the listener\n                this.addListener(item, 'mousedown', '_handleMouseDown');\n            }\n\n            this.$items = this.$items.add(items);\n        },\n\n        /**\n         * Remove Items\n         *\n         * @param mixed items Elements that should no longer be draggable.\n         */\n        removeItems: function(items) {\n            items = $.makeArray(items);\n\n            for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n\n                // Make sure we actually know about this item\n                var index = $.inArray(item, this.$items);\n                if (index != -1) {\n                    this._deinitItem(item);\n                    this.$items.splice(index, 1);\n                }\n            }\n        },\n\n        /**\n         * Remove All Items\n         */\n        removeAllItems: function() {\n            for (var i = 0; i < this.$items.length; i++) {\n                this._deinitItem(this.$items[i]);\n            }\n\n            this.$items = $();\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.removeAllItems();\n            this.base();\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.trigger('dragStart');\n                this.settings.onDragStart();\n            }, this));\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.trigger('drag');\n                this.settings.onDrag();\n            }, this));\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.trigger('dragStop');\n                this.settings.onDragStop();\n            }, this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        /**\n         * Handle Mouse Down\n         */\n        _handleMouseDown: function(ev) {\n            // Ignore right clicks\n            if (ev.which != Garnish.PRIMARY_CLICK) {\n                return;\n            }\n\n            // Ignore if we already have a target\n            if (this.$targetItem) {\n                return;\n            }\n\n            // Ignore if they didn't actually click on the handle\n            var $target = $(ev.target),\n                $handle = this._getItemHandle(ev.currentTarget);\n\n            if (!$target.is($handle) && !$target.closest($handle).length) {\n                return;\n            }\n\n            // Make sure the target isn't a button (unless the button is the handle)\n            if (ev.currentTarget != ev.target && this.settings.ignoreHandleSelector) {\n                if (\n                    $target.is(this.settings.ignoreHandleSelector) ||\n                    $target.closest(this.settings.ignoreHandleSelector).length\n                ) {\n                    return;\n                }\n            }\n\n            ev.preventDefault();\n\n            // Make sure that dragging is allowed right now\n            if (!this.allowDragging()) {\n                return;\n            }\n\n            // Capture the target\n            this.$targetItem = $(ev.currentTarget);\n\n            // Capture the current mouse position\n            this.mousedownX = this.mouseX = ev.pageX;\n            this.mousedownY = this.mouseY = ev.pageY;\n\n            // Capture the difference between the mouse position and the target item's offset\n            var offset = this.$targetItem.offset();\n            this.mouseOffsetX = ev.pageX - offset.left;\n            this.mouseOffsetY = ev.pageY - offset.top;\n\n            // Listen for mousemove, mouseup\n            this.addListener(Garnish.$doc, 'mousemove', '_handleMouseMove');\n            this.addListener(Garnish.$doc, 'mouseup', '_handleMouseUp');\n        },\n\n        _getItemHandle: function(item) {\n            if (this.settings.handle) {\n                if (typeof this.settings.handle == 'object') {\n                    return $(this.settings.handle);\n                }\n\n                if (typeof this.settings.handle == 'string') {\n                    return $(this.settings.handle, item);\n                }\n\n                if (typeof this.settings.handle == 'function') {\n                    return $(this.settings.handle(item));\n                }\n            }\n\n            return $(item);\n        },\n\n        /**\n         * Handle Mouse Move\n         */\n        _handleMouseMove: function(ev) {\n            ev.preventDefault();\n\n            this.realMouseX = ev.pageX;\n            this.realMouseY = ev.pageY;\n\n            if (this.settings.axis != Garnish.Y_AXIS) {\n                this.mouseX = ev.pageX;\n            }\n\n            if (this.settings.axis != Garnish.X_AXIS) {\n                this.mouseY = ev.pageY;\n            }\n\n            this.mouseDistX = this.mouseX - this.mousedownX;\n            this.mouseDistY = this.mouseY - this.mousedownY;\n\n            if (!this.dragging) {\n                // Has the mouse moved far enough to initiate dragging yet?\n                this._handleMouseMove._mouseDist = Garnish.getDist(this.mousedownX, this.mousedownY, this.realMouseX, this.realMouseY);\n\n                if (this._handleMouseMove._mouseDist >= Garnish.BaseDrag.minMouseDist) {\n                    this.startDragging();\n                }\n            }\n\n            if (this.dragging) {\n                this.drag(true);\n            }\n        },\n\n        /**\n         * Handle Moues Up\n         */\n        _handleMouseUp: function(ev) {\n            // Unbind the document events\n            this.removeAllListeners(Garnish.$doc);\n\n            if (this.dragging) {\n                this.stopDragging();\n            }\n\n            this.$targetItem = null;\n        },\n\n        /**\n         * Scroll Window\n         */\n        _scrollWindow: function() {\n            this._.scrollPos = Garnish.$scrollContainer[this.scrollProperty]();\n            Garnish.$scrollContainer[this.scrollProperty](this._.scrollPos + this.scrollDist);\n\n            this['mouse' + this.scrollAxis] -= this._.scrollPos - Garnish.$scrollContainer[this.scrollProperty]();\n            this['realMouse' + this.scrollAxis] = this['mouse' + this.scrollAxis];\n\n            this.drag();\n\n            this.scrollFrame = Garnish.requestAnimationFrame(this.scrollProxy);\n        },\n\n        /**\n         * Cancel Window Scroll\n         */\n        _cancelWindowScroll: function() {\n            if (this.scrollFrame) {\n                Garnish.cancelAnimationFrame(this.scrollFrame);\n                this.scrollFrame = null;\n            }\n\n            this.scrollProperty = null;\n            this.scrollAxis = null;\n            this.scrollDist = null;\n        },\n\n        /**\n         * Deinitialize an item.\n         */\n        _deinitItem: function(item) {\n            this.removeAllListeners(item);\n            $.removeData(item, 'drag');\n        }\n    },\n    {\n        minMouseDist: 1,\n        windowScrollTargetSize: 25,\n\n        defaults: {\n            handle: null,\n            axis: null,\n            ignoreHandleSelector: 'input, textarea, button, select, .btn',\n\n            onDragStart: $.noop,\n            onDrag: $.noop,\n            onDragStop: $.noop\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Checkbox select class\n */\nGarnish.CheckboxSelect = Garnish.Base.extend(\n    {\n        $container: null,\n        $all: null,\n        $options: null,\n\n        init: function(container) {\n            this.$container = $(container);\n\n            // Is this already a checkbox select?\n            if (this.$container.data('checkboxSelect')) {\n                Garnish.log('Double-instantiating a checkbox select on an element');\n                this.$container.data('checkbox-select').destroy();\n            }\n\n            this.$container.data('checkboxSelect', this);\n\n            var $checkboxes = this.$container.find('input');\n            this.$all = $checkboxes.filter('.all:first');\n            this.$options = $checkboxes.not(this.$all);\n\n            this.addListener(this.$all, 'change', 'onAllChange');\n        },\n\n        onAllChange: function() {\n            var isAllChecked = this.$all.prop('checked');\n\n            this.$options.prop({\n                checked: isAllChecked,\n                disabled: isAllChecked\n            });\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$container.removeData('checkboxSelect');\n            this.base();\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Context Menu\n */\nGarnish.ContextMenu = Garnish.Base.extend(\n    {\n        $target: null,\n        options: null,\n        $menu: null,\n        showingMenu: false,\n\n        /**\n         * Constructor\n         */\n        init: function(target, options, settings) {\n            this.$target = $(target);\n\n            // Is this already a context menu target?\n            if (this.$target.data('contextmenu')) {\n                Garnish.log('Double-instantiating a context menu on an element');\n                this.$target.data('contextmenu').destroy();\n            }\n\n            this.$target.data('contextmenu', this);\n\n            this.options = options;\n            this.setSettings(settings, Garnish.ContextMenu.defaults);\n\n            Garnish.ContextMenu.counter++;\n\n            this.enable();\n        },\n\n        /**\n         * Build Menu\n         */\n        buildMenu: function() {\n            this.$menu = $('<div class=\"' + this.settings.menuClass + '\" style=\"display: none\" />');\n\n            var $ul = $('<ul/>').appendTo(this.$menu);\n\n            for (var i in this.options) {\n                var option = this.options[i];\n\n                if (option == '-') {\n                    // Create a new <ul>\n                    $('<hr/>').appendTo(this.$menu);\n                    $ul = $('<ul/>').appendTo(this.$menu);\n                }\n                else {\n                    var $li = $('<li></li>').appendTo($ul),\n                        $a = $('<a>' + option.label + '</a>').appendTo($li);\n\n                    if (typeof option.onClick == 'function') {\n                        // maintain the current $a and options.onClick variables\n                        (function($a, onClick) {\n                            setTimeout($.proxy(function() {\n                                $a.mousedown($.proxy(function(ev) {\n                                    this.hideMenu();\n                                    // call the onClick callback, with the scope set to the item,\n                                    // and pass it the event with currentTarget set to the item as well\n                                    onClick.call(this.currentTarget, $.extend(ev, {currentTarget: this.currentTarget}));\n                                }, this));\n                            }, this), 1);\n                        }).call(this, $a, option.onClick);\n                    }\n                }\n            }\n        },\n\n        /**\n         * Show Menu\n         */\n        showMenu: function(ev) {\n            // Ignore left mouse clicks\n            if (ev.type == 'mousedown' && ev.which != Garnish.SECONDARY_CLICK) {\n                return;\n            }\n\n            if (ev.type == 'contextmenu') {\n                // Prevent the real context menu from showing\n                ev.preventDefault();\n            }\n\n            // Ignore if already showing\n            if (this.showing && ev.currentTarget == this.currentTarget) {\n                return;\n            }\n\n            this.currentTarget = ev.currentTarget;\n\n            if (!this.$menu) {\n                this.buildMenu();\n            }\n\n            this.$menu.appendTo(document.body);\n            this.$menu.show();\n            this.$menu.css({left: ev.pageX + 1, top: ev.pageY - 4});\n\n            this.showing = true;\n\n            setTimeout($.proxy(function() {\n                this.addListener(Garnish.$doc, 'mousedown', 'hideMenu');\n            }, this), 0);\n        },\n\n        /**\n         * Hide Menu\n         */\n        hideMenu: function() {\n            this.removeListener(Garnish.$doc, 'mousedown');\n            this.$menu.hide();\n            this.showing = false;\n        },\n\n        /**\n         * Enable\n         */\n        enable: function() {\n            this.addListener(this.$target, 'contextmenu,mousedown', 'showMenu');\n        },\n\n        /**\n         * Disable\n         */\n        disable: function() {\n            this.removeListener(this.$target, 'contextmenu,mousedown');\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$target.removeData('contextmenu');\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            menuClass: 'menu'\n        },\n        counter: 0\n    }\n);\n","/** global: Garnish */\n/**\n * Drag class\n *\n * Builds on the BaseDrag class by \"picking up\" the selceted element(s),\n * without worrying about what to do when an element is being dragged.\n */\nGarnish.Drag = Garnish.BaseDrag.extend(\n    {\n        targetItemWidth: null,\n        targetItemHeight: null,\n        targetItemPositionInDraggee: null,\n\n        $draggee: null,\n\n        otherItems: null,\n        totalOtherItems: null,\n\n        helpers: null,\n        helperTargets: null,\n        helperPositions: null,\n        helperLagIncrement: null,\n        updateHelperPosProxy: null,\n        updateHelperPosFrame: null,\n\n        lastMouseX: null,\n        lastMouseY: null,\n\n        _returningHelpersToDraggees: false,\n\n        /**\n         * Constructor\n         *\n         * @param mixed  items    Elements that should be draggable right away. (Can be skipped.)\n         * @param object settings Any settings that should override the defaults.\n         */\n        init: function(items, settings) {\n            // Param mapping\n            if (settings === undefined && $.isPlainObject(items)) {\n                // (settings)\n                settings = items;\n                items = null;\n            }\n\n            settings = $.extend({}, Garnish.Drag.defaults, settings);\n            this.base(items, settings);\n        },\n\n        /**\n         * Returns whether dragging is allowed right now.\n         */\n        allowDragging: function() {\n            // Don't allow dragging if we're in the middle of animating the helpers back to the draggees\n            return !this._returningHelpersToDraggees;\n        },\n\n        /**\n         * Start Dragging\n         */\n        startDragging: function() {\n            // Reset some things\n            this.helpers = [];\n            this.helperTargets = [];\n            this.helperPositions = [];\n            this.lastMouseX = this.lastMouseY = null;\n\n            // Capture the target item's width/height\n            this.targetItemWidth = this.$targetItem.outerWidth();\n            this.targetItemHeight = this.$targetItem.outerHeight();\n\n            // Save the draggee's display style (block/table-row) so we can re-apply it later\n            this.draggeeDisplay = this.$targetItem.css('display');\n\n            // Set the $draggee\n            this.setDraggee(this.findDraggee());\n\n            // Create an array of all the other items\n            this.otherItems = [];\n\n            for (var i = 0; i < this.$items.length; i++) {\n                var item = this.$items[i];\n\n                if ($.inArray(item, this.$draggee) == -1) {\n                    this.otherItems.push(item);\n                }\n            }\n            ;\n\n            this.totalOtherItems = this.otherItems.length;\n\n            // Keep the helpers following the cursor, with a little lag to smooth it out\n            if (!this.updateHelperPosProxy) {\n                this.updateHelperPosProxy = $.proxy(this, '_updateHelperPos');\n            }\n\n            this.helperLagIncrement = this.helpers.length == 1 ? 0 : this.settings.helperLagIncrementDividend / (this.helpers.length - 1);\n            this.updateHelperPosFrame = Garnish.requestAnimationFrame(this.updateHelperPosProxy);\n\n            this.base();\n        },\n\n        /**\n         * Sets the draggee.\n         */\n        setDraggee: function($draggee) {\n            // Record the target item's position in the draggee\n            this.targetItemPositionInDraggee = $.inArray(this.$targetItem[0], $draggee.add(this.$targetItem[0]));\n\n            // Keep the target item at the front of the list\n            this.$draggee = $([this.$targetItem[0]].concat($draggee.not(this.$targetItem).toArray()));\n\n            // Create the helper(s)\n            if (this.settings.singleHelper) {\n                this._createHelper(0);\n            }\n            else {\n                for (var i = 0; i < this.$draggee.length; i++) {\n                    this._createHelper(i);\n                }\n            }\n\n            if (this.settings.removeDraggee) {\n                this.$draggee.hide();\n            }\n            else if (this.settings.collapseDraggees) {\n                this.$targetItem.css('visibility', 'hidden');\n                this.$draggee.not(this.$targetItem).hide();\n            }\n            else {\n                this.$draggee.css('visibility', 'hidden');\n            }\n        },\n\n        /**\n         * Appends additional items to the draggee.\n         */\n        appendDraggee: function($newDraggee) {\n            if (!$newDraggee.length) {\n                return;\n            }\n\n            if (!this.settings.collapseDraggees) {\n                var oldLength = this.$draggee.length;\n            }\n\n            this.$draggee = $(this.$draggee.toArray().concat($newDraggee.toArray()));\n\n            // Create new helpers?\n            if (!this.settings.collapseDraggees) {\n                var newLength = this.$draggee.length;\n\n                for (var i = oldLength; i < newLength; i++) {\n                    this._createHelper(i);\n                }\n            }\n\n            if (this.settings.removeDraggee || this.settings.collapseDraggees) {\n                $newDraggee.hide();\n            }\n            else {\n                $newDraggee.css('visibility', 'hidden');\n            }\n        },\n\n        /**\n         * Drag\n         */\n        drag: function(didMouseMove) {\n            // Update the draggee's virtual midpoint\n            this.draggeeVirtualMidpointX = this.mouseX - this.mouseOffsetX + (this.targetItemWidth / 2);\n            this.draggeeVirtualMidpointY = this.mouseY - this.mouseOffsetY + (this.targetItemHeight / 2);\n\n            this.base(didMouseMove);\n        },\n\n        /**\n         * Stop Dragging\n         */\n        stopDragging: function() {\n            // Clear the helper animation\n            Garnish.cancelAnimationFrame(this.updateHelperPosFrame);\n\n            this.base();\n        },\n\n        /**\n         * Identifies the item(s) that are being dragged.\n         */\n        findDraggee: function() {\n            switch (typeof this.settings.filter) {\n                case 'function': {\n                    return this.settings.filter();\n                }\n\n                case 'string': {\n                    return this.$items.filter(this.settings.filter);\n                }\n\n                default: {\n                    return this.$targetItem;\n                }\n            }\n        },\n\n        /**\n         * Returns the helper’s target X position\n         */\n        getHelperTargetX: function() {\n            return this.mouseX - this.mouseOffsetX;\n        },\n\n        /**\n         * Returns the helper’s target Y position\n         */\n        getHelperTargetY: function() {\n            return this.mouseY - this.mouseOffsetY;\n        },\n\n        /**\n         * Return Helpers to Draggees\n         */\n        returnHelpersToDraggees: function() {\n            this._returningHelpersToDraggees = true;\n\n            for (var i = 0; i < this.helpers.length; i++) {\n                var $draggee = this.$draggee.eq(i),\n                    $helper = this.helpers[i];\n\n                $draggee.css({\n                    display: this.draggeeDisplay,\n                    visibility: 'hidden'\n                });\n\n                var draggeeOffset = $draggee.offset();\n\n                if (i == 0) {\n                    var callback = $.proxy(this, '_showDraggee');\n                }\n                else {\n                    var callback = null;\n                }\n\n                $helper.velocity({left: draggeeOffset.left, top: draggeeOffset.top}, Garnish.FX_DURATION, callback);\n            }\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        onReturnHelpersToDraggees: function() {\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.trigger('returnHelpersToDraggees');\n                this.settings.onReturnHelpersToDraggees();\n            }, this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        /**\n         * Creates a helper.\n         */\n        _createHelper: function(i) {\n            var $draggee = this.$draggee.eq(i),\n                $draggeeHelper = $draggee.clone().addClass('draghelper');\n\n            if (this.settings.copyDraggeeInputValuesToHelper) {\n                Garnish.copyInputValues($draggee, $draggeeHelper);\n            }\n\n            // Remove any name= attributes so radio buttons don't lose their values\n            $draggeeHelper.find('[name]').attr('name', '');\n\n            $draggeeHelper.css({\n                width: $draggee.width() + 1, // Prevent the brower from wrapping text if the width was actually a fraction of a pixel larger\n                height: $draggee.height(),\n                margin: 0\n            });\n\n            if (this.settings.helper) {\n                if (typeof this.settings.helper == 'function') {\n                    $draggeeHelper = this.settings.helper($draggeeHelper);\n                }\n                else {\n                    $draggeeHelper = $(this.settings.helper).append($draggeeHelper);\n                }\n            }\n\n            $draggeeHelper.appendTo(Garnish.$bod);\n\n            var helperPos = this._getHelperTarget(i);\n\n            $draggeeHelper.css({\n                position: 'absolute',\n                top: helperPos.top,\n                left: helperPos.left,\n                zIndex: this.settings.helperBaseZindex + this.$draggee.length - i,\n                opacity: this.settings.helperOpacity\n            });\n\n            this.helperPositions[i] = {\n                top: helperPos.top,\n                left: helperPos.left\n            };\n\n            this.helpers.push($draggeeHelper);\n        },\n\n        /**\n         * Update Helper Position\n         */\n        _updateHelperPos: function() {\n            // Has the mouse moved?\n            if (this.mouseX !== this.lastMouseX || this.mouseY !== this.lastMouseY) {\n                // Get the new target helper positions\n                for (this._updateHelperPos._i = 0; this._updateHelperPos._i < this.helpers.length; this._updateHelperPos._i++) {\n                    this.helperTargets[this._updateHelperPos._i] = this._getHelperTarget(this._updateHelperPos._i);\n                }\n\n                this.lastMouseX = this.mouseX;\n                this.lastMouseY = this.mouseY;\n            }\n\n            // Gravitate helpers toward their target positions\n            for (this._updateHelperPos._j = 0; this._updateHelperPos._j < this.helpers.length; this._updateHelperPos._j++) {\n                this._updateHelperPos._lag = this.settings.helperLagBase + (this.helperLagIncrement * this._updateHelperPos._j);\n\n                this.helperPositions[this._updateHelperPos._j] = {\n                    left: this.helperPositions[this._updateHelperPos._j].left + ((this.helperTargets[this._updateHelperPos._j].left - this.helperPositions[this._updateHelperPos._j].left) / this._updateHelperPos._lag),\n                    top: this.helperPositions[this._updateHelperPos._j].top + ((this.helperTargets[this._updateHelperPos._j].top - this.helperPositions[this._updateHelperPos._j].top) / this._updateHelperPos._lag)\n                };\n\n                this.helpers[this._updateHelperPos._j].css(this.helperPositions[this._updateHelperPos._j]);\n            }\n\n            // Let's do this again on the next frame!\n            this.updateHelperPosFrame = Garnish.requestAnimationFrame(this.updateHelperPosProxy);\n        },\n\n        /**\n         * Get the helper position for a draggee helper\n         */\n        _getHelperTarget: function(i) {\n            return {\n                left: this.getHelperTargetX() + (this.settings.helperSpacingX * i),\n                top: this.getHelperTargetY() + (this.settings.helperSpacingY * i)\n            };\n        },\n\n        _showDraggee: function() {\n            // Remove the helpers\n            for (var i = 0; i < this.helpers.length; i++) {\n                this.helpers[i].remove();\n            }\n\n            this.helpers = null;\n\n            this.$draggee.show().css('visibility', 'inherit');\n\n            this.onReturnHelpersToDraggees();\n\n            this._returningHelpersToDraggees = false;\n        }\n    },\n    {\n        defaults: {\n            filter: null,\n            singleHelper: false,\n            collapseDraggees: false,\n            removeDraggee: false,\n            copyDraggeeInputValuesToHelper: false,\n            helperOpacity: 1,\n            helper: null,\n            helperBaseZindex: 1000,\n            helperLagBase: 1,\n            helperLagIncrementDividend: 1.5,\n            helperSpacingX: 5,\n            helperSpacingY: 5,\n            onReturnHelpersToDraggees: $.noop\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Drag-and-drop class\n *\n * Builds on the Drag class by allowing you to set up \"drop targets\"\n * which the dragged elemements can be dropped onto.\n */\nGarnish.DragDrop = Garnish.Drag.extend({\n\n        $dropTargets: null,\n        $activeDropTarget: null,\n\n        /**\n         * Constructor\n         */\n        init: function(settings) {\n            settings = $.extend({}, Garnish.DragDrop.defaults, settings);\n            this.base(settings);\n        },\n\n        updateDropTargets: function() {\n            if (this.settings.dropTargets) {\n                if (typeof this.settings.dropTargets == 'function') {\n                    this.$dropTargets = $(this.settings.dropTargets());\n                }\n                else {\n                    this.$dropTargets = $(this.settings.dropTargets);\n                }\n\n                // Discard if it's an empty array\n                if (!this.$dropTargets.length) {\n                    this.$dropTargets = null;\n                }\n            }\n        },\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            this.updateDropTargets();\n            this.$activeDropTarget = null;\n            this.base();\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            if (this.$dropTargets) {\n                this.onDrag._activeDropTarget = null;\n\n                // is the cursor over any of the drop target?\n                for (this.onDrag._i = 0; this.onDrag._i < this.$dropTargets.length; this.onDrag._i++) {\n                    this.onDrag._elem = this.$dropTargets[this.onDrag._i];\n\n                    if (Garnish.hitTest(this.mouseX, this.mouseY, this.onDrag._elem)) {\n                        this.onDrag._activeDropTarget = this.onDrag._elem;\n                        break;\n                    }\n                }\n\n                // has the drop target changed?\n                if (\n                    (this.$activeDropTarget && this.onDrag._activeDropTarget != this.$activeDropTarget[0]) ||\n                    (!this.$activeDropTarget && this.onDrag._activeDropTarget !== null)\n                ) {\n                    // was there a previous one?\n                    if (this.$activeDropTarget) {\n                        this.$activeDropTarget.removeClass(this.settings.activeDropTargetClass);\n                    }\n\n                    // remember the new one\n                    if (this.onDrag._activeDropTarget) {\n                        this.$activeDropTarget = $(this.onDrag._activeDropTarget).addClass(this.settings.activeDropTargetClass);\n                    }\n                    else {\n                        this.$activeDropTarget = null;\n                    }\n\n                    this.settings.onDropTargetChange(this.$activeDropTarget);\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            if (this.$dropTargets && this.$activeDropTarget) {\n                this.$activeDropTarget.removeClass(this.settings.activeDropTargetClass);\n            }\n\n            this.base();\n        },\n\n        /**\n         * Fade Out Helpers\n         */\n        fadeOutHelpers: function() {\n            for (var i = 0; i < this.helpers.length; i++) {\n                (function($draggeeHelper) {\n                    $draggeeHelper.velocity('fadeOut', {\n                        duration: Garnish.FX_DURATION,\n                        complete: function() {\n                            $draggeeHelper.remove();\n                        }\n                    });\n                })(this.helpers[i]);\n            }\n        }\n    },\n    {\n        defaults: {\n            dropTargets: null,\n            onDropTargetChange: $.noop,\n            activeDropTargetClass: 'active'\n        }\n    });\n","/** global: Garnish */\n/**\n * Drag-to-move clas\n *\n * Builds on the BaseDrag class by simply moving the dragged element(s) along with the mouse.\n */\nGarnish.DragMove = Garnish.BaseDrag.extend(\n    {\n        onDrag: function(items, settings) {\n            this.$targetItem.css({\n                left: this.mouseX - this.mouseOffsetX,\n                top: this.mouseY - this.mouseOffsetY\n            });\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Drag-to-sort class\n *\n * Builds on the Drag class by allowing you to sort the elements amongst themselves.\n */\nGarnish.DragSort = Garnish.Drag.extend(\n    {\n        $heightedContainer: null,\n        $insertion: null,\n        insertionVisible: false,\n        oldDraggeeIndexes: null,\n        newDraggeeIndexes: null,\n        closestItem: null,\n\n        _midpointVersion: 0,\n        _$prevItem: null,\n\n        /**\n         * Constructor\n         *\n         * @param mixed  items    Elements that should be draggable right away. (Can be skipped.)\n         * @param object settings Any settings that should override the defaults.\n         */\n        init: function(items, settings) {\n            // Param mapping\n            if (settings === undefined && $.isPlainObject(items)) {\n                // (settings)\n                settings = items;\n                items = null;\n            }\n\n            settings = $.extend({}, Garnish.DragSort.defaults, settings);\n            this.base(items, settings);\n        },\n\n        /**\n         * Creates the insertion element.\n         */\n        createInsertion: function() {\n            if (this.settings.insertion) {\n                if (typeof this.settings.insertion == 'function') {\n                    return $(this.settings.insertion(this.$draggee));\n                }\n                else {\n                    return $(this.settings.insertion);\n                }\n            }\n        },\n\n        /**\n         * Returns the helper’s target X position\n         */\n        getHelperTargetX: function() {\n            if (this.settings.magnetStrength != 1) {\n                this.getHelperTargetX._draggeeOffsetX = this.$draggee.offset().left;\n                return this.getHelperTargetX._draggeeOffsetX + ((this.mouseX - this.mouseOffsetX - this.getHelperTargetX._draggeeOffsetX) / this.settings.magnetStrength);\n            }\n            else {\n                return this.base();\n            }\n        },\n\n        /**\n         * Returns the helper’s target Y position\n         */\n        getHelperTargetY: function() {\n            if (this.settings.magnetStrength != 1) {\n                this.getHelperTargetY._draggeeOffsetY = this.$draggee.offset().top;\n                return this.getHelperTargetY._draggeeOffsetY + ((this.mouseY - this.mouseOffsetY - this.getHelperTargetY._draggeeOffsetY) / this.settings.magnetStrength);\n            }\n            else {\n                return this.base();\n            }\n        },\n\n        /**\n         * Returns whether the draggee can be inserted before a given item.\n         */\n        canInsertBefore: function($item) {\n            return true;\n        },\n\n        /**\n         * Returns whether the draggee can be inserted after a given item.\n         */\n        canInsertAfter: function($item) {\n            return true;\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            this.oldDraggeeIndexes = this._getDraggeeIndexes();\n\n            // Are we supposed to be moving the target item to the front, and is it not already there?\n            if (\n                this.settings.moveTargetItemToFront &&\n                this.$draggee.length > 1 &&\n                this._getItemIndex(this.$draggee[0]) > this._getItemIndex(this.$draggee[1])\n            ) {\n                // Reposition the target item before the other draggee items in the DOM\n                this.$draggee.first().insertBefore(this.$draggee[1]);\n            }\n\n            // Create the insertion\n            this.$insertion = this.createInsertion();\n            this._placeInsertionWithDraggee();\n\n            this.closestItem = null;\n            this._clearMidpoints();\n\n            //  Get the closest container that has a height\n            if (this.settings.container) {\n                this.$heightedContainer = $(this.settings.container);\n\n                while (!this.$heightedContainer.height()) {\n                    this.$heightedContainer = this.$heightedContainer.parent();\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            // If there's a container set, make sure that we're hovering over it\n            if (this.$heightedContainer && !Garnish.hitTest(this.mouseX, this.mouseY, this.$heightedContainer)) {\n                if (this.closestItem) {\n                    this.closestItem = null;\n                    this._removeInsertion();\n                }\n            }\n            else {\n                // Is there a new closest item?\n                if (\n                    this.closestItem !== (this.closestItem = this._getClosestItem()) &&\n                    this.closestItem !== null\n                ) {\n                    this._updateInsertion();\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            this._removeInsertion();\n\n            // Should we keep the target item where it was?\n            if (!this.settings.moveTargetItemToFront && this.targetItemPositionInDraggee != 0) {\n                this.$targetItem.insertAfter(this.$draggee.eq(this.targetItemPositionInDraggee));\n            }\n\n            // Return the helpers to the draggees\n            this.returnHelpersToDraggees();\n\n            this.base();\n\n            // Has the item actually moved?\n            this.$items = $().add(this.$items);\n            this.newDraggeeIndexes = this._getDraggeeIndexes();\n\n            if (this.newDraggeeIndexes.join(',') != this.oldDraggeeIndexes.join(',')) {\n                this.onSortChange();\n            }\n        },\n\n        /**\n         * On Insertion Point Change event\n         */\n        onInsertionPointChange: function() {\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.trigger('insertionPointChange');\n                this.settings.onInsertionPointChange();\n            }, this));\n        },\n\n        /**\n         * On Sort Change event\n         */\n        onSortChange: function() {\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.trigger('sortChange');\n                this.settings.onSortChange();\n            }, this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        _getItemIndex: function(item) {\n            return $.inArray(item, this.$items);\n        },\n\n        _getDraggeeIndexes: function() {\n            var indexes = [];\n\n            for (var i = 0; i < this.$draggee.length; i++) {\n                indexes.push(this._getItemIndex(this.$draggee[i]))\n            }\n\n            return indexes;\n        },\n\n        /**\n         * Returns the closest item to the cursor.\n         */\n        _getClosestItem: function() {\n            this._getClosestItem._closestItem = null;\n\n            // Start by checking the draggee/insertion, if either are visible\n            if (!this.settings.removeDraggee) {\n                this._testForClosestItem(this.$draggee[0]);\n            }\n            else if (this.insertionVisible) {\n                this._testForClosestItem(this.$insertion[0]);\n            }\n\n            // Check items before the draggee\n            if (this._getClosestItem._closestItem) {\n                this._getClosestItem._midpoint = this._getItemMidpoint(this._getClosestItem._closestItem)\n            }\n            if (this.settings.axis != Garnish.Y_AXIS) {\n                this._getClosestItem._startXDist = this._getClosestItem._lastXDist = this._getClosestItem._closestItem ? Math.abs(this._getClosestItem._midpoint.x - this.draggeeVirtualMidpointX) : null;\n            }\n            if (this.settings.axis != Garnish.X_AXIS) {\n                this._getClosestItem._startYDist = this._getClosestItem._lastYDist = this._getClosestItem._closestItem ? Math.abs(this._getClosestItem._midpoint.y - this.draggeeVirtualMidpointY) : null;\n            }\n\n            this._getClosestItem._$otherItem = this.$draggee.first().prev();\n\n            while (this._getClosestItem._$otherItem.length) {\n                // See if we're just getting further away\n                this._getClosestItem._midpoint = this._getItemMidpoint(this._getClosestItem._$otherItem[0]);\n                if (this.settings.axis != Garnish.Y_AXIS) {\n                    this._getClosestItem._xDist = Math.abs(this._getClosestItem._midpoint.x - this.draggeeVirtualMidpointX);\n                }\n                if (this.settings.axis != Garnish.X_AXIS) {\n                    this._getClosestItem._yDist = Math.abs(this._getClosestItem._midpoint.y - this.draggeeVirtualMidpointY);\n                }\n\n                if (\n                    (this.settings.axis == Garnish.Y_AXIS || (this._getClosestItem._lastXDist !== null && this._getClosestItem._xDist > this._getClosestItem._lastXDist)) &&\n                    (this.settings.axis == Garnish.X_AXIS || (this._getClosestItem._lastYDist !== null && this._getClosestItem._yDist > this._getClosestItem._lastYDist))\n                ) {\n                    break;\n                }\n\n                if (this.settings.axis != Garnish.Y_AXIS) {\n                    this._getClosestItem._lastXDist = this._getClosestItem._xDist;\n                }\n                if (this.settings.axis != Garnish.X_AXIS) {\n                    this._getClosestItem._lastYDist = this._getClosestItem._yDist;\n                }\n\n                // Give the extending class a chance to allow/disallow this item\n                if (this.canInsertBefore(this._getClosestItem._$otherItem)) {\n                    this._testForClosestItem(this._getClosestItem._$otherItem[0]);\n                }\n\n                // Prep the next item\n                this._getClosestItem._$otherItem = this._getClosestItem._$otherItem.prev();\n            }\n\n            // Check items after the draggee\n            if (this.settings.axis != Garnish.Y_AXIS) {\n                this._getClosestItem._lastXDist = this._getClosestItem._startXDist;\n            }\n            if (this.settings.axis != Garnish.X_AXIS) {\n                this._getClosestItem._lastYDist = this._getClosestItem._startYDist;\n            }\n\n            this._getClosestItem._$otherItem = this.$draggee.last().next();\n\n            while (this._getClosestItem._$otherItem.length) {\n                // See if we're just getting further away\n                this._getClosestItem._midpoint = this._getItemMidpoint(this._getClosestItem._$otherItem[0]);\n                if (this.settings.axis != Garnish.Y_AXIS) {\n                    this._getClosestItem._xDist = Math.abs(this._getClosestItem._midpoint.x - this.draggeeVirtualMidpointX);\n                }\n                if (this.settings.axis != Garnish.X_AXIS) {\n                    this._getClosestItem._yDist = Math.abs(this._getClosestItem._midpoint.y - this.draggeeVirtualMidpointY);\n                }\n\n                if (\n                    (this.settings.axis == Garnish.Y_AXIS || (this._getClosestItem._lastXDist !== null && this._getClosestItem._xDist > this._getClosestItem._lastXDist)) &&\n                    (this.settings.axis == Garnish.X_AXIS || (this._getClosestItem._lastYDist !== null && this._getClosestItem._yDist > this._getClosestItem._lastYDist))\n                ) {\n                    break;\n                }\n\n                if (this.settings.axis != Garnish.Y_AXIS) {\n                    this._getClosestItem._lastXDist = this._getClosestItem._xDist;\n                }\n                if (this.settings.axis != Garnish.X_AXIS) {\n                    this._getClosestItem._lastYDist = this._getClosestItem._yDist;\n                }\n\n                // Give the extending class a chance to allow/disallow this item\n                if (this.canInsertAfter(this._getClosestItem._$otherItem)) {\n                    this._testForClosestItem(this._getClosestItem._$otherItem[0]);\n                }\n\n                // Prep the next item\n                this._getClosestItem._$otherItem = this._getClosestItem._$otherItem.next();\n            }\n\n            // Return the result\n\n            // Ignore if it's the draggee or insertion\n            if (\n                this._getClosestItem._closestItem != this.$draggee[0] &&\n                (!this.insertionVisible || this._getClosestItem._closestItem != this.$insertion[0])\n            ) {\n                return this._getClosestItem._closestItem;\n            }\n            else {\n                return null;\n            }\n        },\n\n        _clearMidpoints: function() {\n            this._midpointVersion++;\n            this._$prevItem = null;\n        },\n\n        _getItemMidpoint: function(item) {\n            if ($.data(item, 'midpointVersion') != this._midpointVersion) {\n                // If this isn't the draggee, temporarily move the draggee to this item\n                this._getItemMidpoint._repositionDraggee = (\n                    !this.settings.axis &&\n                    (!this.settings.removeDraggee || this.insertionVisible) &&\n                    item != this.$draggee[0] &&\n                    (!this.$insertion || item != this.$insertion.get(0))\n                );\n\n                if (this._getItemMidpoint._repositionDraggee) {\n                    // Is this the first time we've had to temporarily reposition the draggee since the last midpoint clearing?\n                    if (!this._$prevItem) {\n                        this._$prevItem = (this.insertionVisible ? this.$insertion : this.$draggee).first().prev();\n                    }\n\n                    this._moveDraggeeToItem(item);\n\n                    // Now figure out which element we're actually getting the midpoint of\n                    if (!this.settings.removeDraggee) {\n                        this._getItemMidpoint._$item = this.$draggee;\n                    }\n                    else {\n                        this._getItemMidpoint._$item = this.$insertion;\n                    }\n                }\n                else {\n                    // We're actually getting the midpoint of this item\n                    this._getItemMidpoint._$item = $(item);\n                }\n\n                this._getItemMidpoint._offset = this._getItemMidpoint._$item.offset();\n\n                $.data(item, 'midpoint', {\n                    x: this._getItemMidpoint._offset.left + this._getItemMidpoint._$item.outerWidth() / 2,\n                    y: this._getItemMidpoint._offset.top + this._getItemMidpoint._$item.outerHeight() / 2\n                });\n\n                $.data(item, 'midpointVersion', this._midpointVersion);\n\n                delete this._getItemMidpoint._$item;\n                delete this._getItemMidpoint._offset;\n\n                if (this._getItemMidpoint._repositionDraggee) {\n                    // Move the draggee back\n                    if (this._$prevItem.length) {\n                        this.$draggee.insertAfter(this._$prevItem);\n                    }\n                    else {\n                        this.$draggee.prependTo(this.$draggee.parent());\n                    }\n\n                    this._placeInsertionWithDraggee();\n                }\n            }\n\n            return $.data(item, 'midpoint');\n        },\n\n        _testForClosestItem: function(item) {\n            this._testForClosestItem._midpoint = this._getItemMidpoint(item);\n            this._testForClosestItem._mouseDistX = Math.abs(this._testForClosestItem._midpoint.x - this.draggeeVirtualMidpointX);\n            this._testForClosestItem._mouseDistY = Math.abs(this._testForClosestItem._midpoint.y - this.draggeeVirtualMidpointY);\n\n            // Don't even consider items that are further away on the Y axis\n            if (\n                this._getClosestItem._closestItem === null ||\n                this._testForClosestItem._mouseDistY < this._getClosestItem._closestItemMouseDistY ||\n                (\n                    this._testForClosestItem._mouseDistY == this._getClosestItem._closestItemMouseDistY &&\n                    this._testForClosestItem._mouseDistX <= this._getClosestItem._closestItemMouseDistX\n                )\n            ) {\n                this._getClosestItem._closestItem = item;\n                this._getClosestItem._closestItemMouseDistX = this._testForClosestItem._mouseDistX;\n                this._getClosestItem._closestItemMouseDistY = this._testForClosestItem._mouseDistY;\n            }\n        },\n\n        /**\n         * Updates the position of the insertion point.\n         */\n        _updateInsertion: function() {\n            if (this.closestItem) {\n                this._moveDraggeeToItem(this.closestItem);\n            }\n\n            // Now that things have shifted around, invalidate the midpoints\n            this._clearMidpoints();\n\n            this.onInsertionPointChange();\n        },\n\n        _moveDraggeeToItem: function(item) {\n            // Going down?\n            if (this.$draggee.index() < $(item).index()) {\n                this.$draggee.insertAfter(item);\n            }\n            else {\n                this.$draggee.insertBefore(item);\n            }\n\n            this._placeInsertionWithDraggee();\n        },\n\n        _placeInsertionWithDraggee: function() {\n            if (this.$insertion) {\n                this.$insertion.insertBefore(this.$draggee.first());\n                this.insertionVisible = true;\n            }\n        },\n\n        /**\n         * Removes the insertion, if it's visible.\n         */\n        _removeInsertion: function() {\n            if (this.insertionVisible) {\n                this.$insertion.remove();\n                this.insertionVisible = false;\n            }\n        }\n    },\n    {\n        defaults: {\n            container: null,\n            insertion: null,\n            moveTargetItemToFront: false,\n            magnetStrength: 1,\n            onInsertionPointChange: $.noop,\n            onSortChange: $.noop\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * ESC key manager class\n */\nGarnish.EscManager = Garnish.Base.extend(\n    {\n        handlers: null,\n\n        init: function() {\n            this.handlers = [];\n\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode == Garnish.ESC_KEY) {\n                    this.escapeLatest(ev);\n                }\n            });\n        },\n\n        register: function(obj, func) {\n            this.handlers.push({\n                obj: obj,\n                func: func\n            });\n        },\n\n        unregister: function(obj) {\n            for (var i = this.handlers.length - 1; i >= 0; i--) {\n                if (this.handlers[i].obj == obj) {\n                    this.handlers.splice(i, 1);\n                }\n            }\n        },\n\n        escapeLatest: function(ev) {\n            if (this.handlers.length) {\n                var handler = this.handlers.pop();\n\n                if (typeof handler.func == 'function') {\n                    var func = handler.func;\n                }\n                else {\n                    var func = handler.obj[handler.func];\n                }\n\n                func.call(handler.obj, ev);\n\n                if (typeof handler.obj.trigger == 'function') {\n                    handler.obj.trigger('escape');\n                }\n            }\n        }\n    }\n);\n\nGarnish.escManager = new Garnish.EscManager();\n","/** global: Garnish */\n/**\n * HUD\n */\nGarnish.HUD = Garnish.Base.extend(\n    {\n        $trigger: null,\n        $fixedTriggerParent: null,\n        $hud: null,\n        $tip: null,\n        $body: null,\n        $header: null,\n        $footer: null,\n        $mainContainer: null,\n        $main: null,\n        $shade: null,\n\n        showing: false,\n        orientation: null,\n\n        /**\n         * Constructor\n         */\n        init: function(trigger, bodyContents, settings) {\n\n            this.$trigger = $(trigger);\n\n            this.setSettings(settings, Garnish.HUD.defaults);\n            this.on('show', this.settings.onShow);\n            this.on('hide', this.settings.onHide);\n            this.on('submit', this.settings.onSubmit);\n\n            if (Garnish.HUD.activeHUDs === undefined) {\n                Garnish.HUD.activeHUDs = {};\n            }\n\n            this.$shade = $('<div/>', {'class': this.settings.shadeClass});\n            this.$hud = $('<div/>', {'class': this.settings.hudClass});\n            this.$tip = $('<div/>', {'class': this.settings.tipClass}).appendTo(this.$hud);\n            this.$body = $('<form/>', {'class': this.settings.bodyClass}).appendTo(this.$hud);\n            this.$mainContainer = $('<div/>', {'class': this.settings.mainContainerClass}).appendTo(this.$body);\n            this.$main = $('<div/>', {'class': this.settings.mainClass}).appendTo(this.$mainContainer);\n\n            this.updateBody(bodyContents);\n\n            // See if the trigger is fixed\n            var $parent = this.$trigger;\n\n            do {\n                if ($parent.css('position') == 'fixed') {\n                    this.$fixedTriggerParent = $parent;\n                    break;\n                }\n\n                $parent = $parent.offsetParent();\n            }\n            while ($parent.length && $parent.prop('nodeName') != 'HTML');\n\n            if (this.$fixedTriggerParent) {\n                this.$hud.css('position', 'fixed');\n            }\n            else {\n                this.$hud.css('position', 'absolute');\n            }\n\n            this.show();\n\n            this.addListener(this.$body, 'submit', '_handleSubmit');\n            this.addListener(this.$shade, 'tap', 'hide');\n\n            if (!this.$fixedTriggerParent && Garnish.$scrollContainer[0] != Garnish.$win[0]) {\n                this.addListener(Garnish.$scrollContainer, 'scroll', 'updateSizeAndPosition');\n            }\n\n            if (this.settings.closeBtn) {\n                this.addListener(this.settings.closeBtn, 'activate', 'hide');\n            }\n\n            this.addListener(Garnish.$win, 'resize', 'updateSizeAndPosition');\n        },\n\n        /**\n         * Update the body contents\n         */\n        updateBody: function(bodyContents) {\n            this.removeListener(this.$main, 'resize');\n\n            // Cleanup\n            this.$main.html('');\n\n            if (this.$header) {\n                this.$hud.removeClass('has-header');\n                this.$header.remove();\n                this.$header = null;\n            }\n\n            if (this.$footer) {\n                this.$hud.removeClass('has-footer');\n                this.$footer.remove();\n                this.$footer = null;\n            }\n\n            // Append the new body contents\n            this.$main.append(bodyContents);\n\n            // Look for a header and footer\n            var $header = this.$main.find('.' + this.settings.headerClass + ':first'),\n                $footer = this.$main.find('.' + this.settings.footerClass + ':first');\n\n            if ($header.length) {\n                this.$header = $header.insertBefore(this.$mainContainer);\n                this.$hud.addClass('has-header');\n            }\n\n            if ($footer.length) {\n                this.$footer = $footer.insertAfter(this.$mainContainer);\n                this.$hud.addClass('has-footer');\n            }\n        },\n\n        /**\n         * Show\n         */\n        show: function(ev) {\n            if (ev && ev.stopPropagation) {\n                ev.stopPropagation();\n            }\n\n            if (this.showing) {\n                return;\n            }\n\n            if (this.settings.closeOtherHUDs) {\n                for (var hudID in Garnish.HUD.activeHUDs) {\n                    Garnish.HUD.activeHUDs[hudID].hide();\n                }\n            }\n\n            // Prevent the browser from jumping\n            this.$hud.css('top', Garnish.$scrollContainer.scrollTop());\n\n            // Move it to the end of <body> so it gets the highest sub-z-index\n            this.$shade.appendTo(Garnish.$bod);\n            this.$hud.appendTo(Garnish.$bod);\n\n            this.$hud.show();\n            this.updateSizeAndPosition();\n\n            this.$shade.show();\n\n            this.showing = true;\n            Garnish.HUD.activeHUDs[this._namespace] = this;\n\n            Garnish.escManager.register(this, 'hide');\n\n            this.onShow();\n\n            // Reposition one last time just in case\n            Garnish.requestAnimationFrame($.proxy(this, 'updateSizeAndPosition'));\n\n            this.enable();\n        },\n\n        onShow: function() {\n            this.trigger('show');\n        },\n\n        updateSizeAndPosition: function() {\n            this.removeListener(this.$main, 'resize');\n\n            var windowWidth,\n                windowHeight,\n                triggerWidth,\n                triggerHeight,\n                triggerOffset,\n                windowScrollLeft,\n                windowScrollTop,\n                scrollContainerTriggerOffset,\n                scrollContainerScrollLeft,\n                scrollContainerScrollTop,\n                hudBodyWidth,\n                hudBodyHeight;\n\n            // Get the window sizes and trigger offset\n\n            windowWidth = Garnish.$win.width();\n            windowHeight = Garnish.$win.height();\n            windowScrollLeft = Garnish.$win.scrollLeft();\n            windowScrollTop = Garnish.$win.scrollTop();\n\n            // Get the trigger's dimensions\n            triggerWidth = this.$trigger.outerWidth();\n            triggerHeight = this.$trigger.outerHeight();\n\n            // Get the offsets for each side of the trigger element\n            triggerOffset = this.$trigger.offset();\n\n            if (this.$fixedTriggerParent) {\n                triggerOffset.left -= windowScrollLeft;\n                triggerOffset.top -= windowScrollTop;\n\n                scrollContainerTriggerOffset = triggerOffset;\n\n                windowScrollLeft = 0;\n                windowScrollTop = 0;\n                scrollContainerScrollLeft = 0;\n                scrollContainerScrollTop = 0;\n            }\n            else {\n                scrollContainerTriggerOffset = Garnish.getOffset(this.$trigger);\n\n                scrollContainerScrollLeft = Garnish.$scrollContainer.scrollLeft();\n                scrollContainerScrollTop = Garnish.$scrollContainer.scrollTop();\n            }\n\n            triggerOffset.right = triggerOffset.left + triggerWidth;\n            triggerOffset.bottom = triggerOffset.top + triggerHeight;\n\n            scrollContainerTriggerOffset.right = scrollContainerTriggerOffset.left + triggerWidth;\n            scrollContainerTriggerOffset.bottom = scrollContainerTriggerOffset.top + triggerHeight;\n\n            // Get the HUD dimensions\n            this.$hud.css({\n                width: ''\n            });\n\n            this.$mainContainer.css({\n                height: '',\n                'overflow-x': '',\n                'overflow-y': ''\n            });\n\n            hudBodyWidth = this.$body.width();\n            hudBodyHeight = this.$body.height();\n\n            // Determine the best orientation for the HUD\n\n            // Find the actual available top/right/bottom/left clearances\n            var clearances = {\n                bottom: windowHeight + scrollContainerScrollTop - scrollContainerTriggerOffset.bottom,\n                top: scrollContainerTriggerOffset.top - scrollContainerScrollTop,\n                right: windowWidth + scrollContainerScrollLeft - scrollContainerTriggerOffset.right,\n                left: scrollContainerTriggerOffset.left - scrollContainerScrollLeft\n            };\n\n            // Find the first position that has enough room\n            this.orientation = null;\n\n            for (var i = 0; i < this.settings.orientations.length; i++) {\n                var orientation = this.settings.orientations[i],\n                    relevantSize = (orientation == 'top' || orientation == 'bottom' ? hudBodyHeight : hudBodyWidth);\n\n                if (clearances[orientation] - (this.settings.windowSpacing + this.settings.triggerSpacing) >= relevantSize) {\n                    // This is the first orientation that has enough room in order of preference, so we'll go with this\n                    this.orientation = orientation;\n                    break;\n                }\n\n                if (!this.orientation || clearances[orientation] > clearances[this.orientation]) {\n                    // Use this as a fallback as it's the orientation with the most clearance so far\n                    this.orientation = orientation;\n                }\n            }\n\n            // Just in case...\n            if (!this.orientation || $.inArray(this.orientation, ['bottom', 'top', 'right', 'left']) == -1) {\n                this.orientation = 'bottom'\n            }\n\n            // Update the tip class\n            if (this.tipClass) {\n                this.$tip.removeClass(this.tipClass);\n            }\n\n            this.tipClass = this.settings.tipClass + '-' + Garnish.HUD.tipClasses[this.orientation];\n            this.$tip.addClass(this.tipClass);\n\n            // Make sure the HUD body is within the allowed size\n\n            var maxHudBodyWidth,\n                maxHudBodyHeight;\n\n            if (this.orientation == 'top' || this.orientation == 'bottom') {\n                maxHudBodyWidth = windowWidth - this.settings.windowSpacing * 2;\n                maxHudBodyHeight = clearances[this.orientation] - this.settings.windowSpacing - this.settings.triggerSpacing;\n            }\n            else {\n                maxHudBodyWidth = clearances[this.orientation] - this.settings.windowSpacing - this.settings.triggerSpacing;\n                maxHudBodyHeight = windowHeight - this.settings.windowSpacing * 2;\n            }\n\n            if (maxHudBodyWidth < this.settings.minBodyWidth) {\n                maxHudBodyWidth = this.settings.minBodyWidth;\n            }\n\n            if (maxHudBodyHeight < this.settings.minBodyHeight) {\n                maxHudBodyHeight = this.settings.minBodyHeight;\n            }\n\n            if (hudBodyWidth > maxHudBodyWidth || hudBodyWidth < this.settings.minBodyWidth) {\n                if (hudBodyWidth > maxHudBodyWidth) {\n                    hudBodyWidth = maxHudBodyWidth;\n                }\n                else {\n                    hudBodyWidth = this.settings.minBodyWidth;\n                }\n\n                this.$hud.width(hudBodyWidth);\n\n                // Is there any overflow now?\n                if (this.$main.outerWidth() > maxHudBodyWidth) {\n                    this.$mainContainer.css('overflow-x', 'scroll');\n                }\n\n                // The height may have just changed\n                hudBodyHeight = this.$body.height();\n            }\n\n            if (hudBodyHeight > maxHudBodyHeight || hudBodyHeight < this.settings.minBodyHeight) {\n                if (hudBodyHeight > maxHudBodyHeight) {\n                    hudBodyHeight = maxHudBodyHeight;\n                }\n                else {\n                    hudBodyHeight = this.settings.minBodyHeight;\n                }\n\n                var mainHeight = hudBodyHeight;\n\n                if (this.$header) {\n                    mainHeight -= this.$header.outerHeight();\n                }\n\n                if (this.$footer) {\n                    mainHeight -= this.$footer.outerHeight();\n                }\n\n                this.$mainContainer.height(mainHeight);\n\n                // Is there any overflow now?\n                if (this.$main.outerHeight() > mainHeight) {\n                    this.$mainContainer.css('overflow-y', 'scroll');\n                }\n            }\n\n            // Set the HUD/tip positions\n\n            if (this.orientation == 'top' || this.orientation == 'bottom') {\n                // Center the HUD horizontally\n                var maxLeft = (windowWidth + windowScrollLeft) - (hudBodyWidth + this.settings.windowSpacing),\n                    minLeft = (windowScrollLeft + this.settings.windowSpacing),\n                    triggerCenter = triggerOffset.left + Math.round(triggerWidth / 2),\n                    left = triggerCenter - Math.round(hudBodyWidth / 2);\n\n                if (left > maxLeft) {\n                    left = maxLeft;\n                }\n                if (left < minLeft) {\n                    left = minLeft;\n                }\n\n                this.$hud.css('left', left);\n\n                var tipLeft = (triggerCenter - left) - (this.settings.tipWidth / 2);\n                this.$tip.css({left: tipLeft, top: ''});\n\n                if (this.orientation == 'top') {\n                    var top = triggerOffset.top - (hudBodyHeight + this.settings.triggerSpacing);\n                    this.$hud.css('top', top);\n                }\n                else {\n                    var top = triggerOffset.bottom + this.settings.triggerSpacing;\n                    this.$hud.css('top', top);\n                }\n            }\n            else {\n                // Center the HUD vertically\n                var maxTop = (windowHeight + windowScrollTop) - (hudBodyHeight + this.settings.windowSpacing),\n                    minTop = (windowScrollTop + this.settings.windowSpacing),\n                    triggerCenter = triggerOffset.top + Math.round(triggerHeight / 2),\n                    top = triggerCenter - Math.round(hudBodyHeight / 2);\n\n                if (top > maxTop) {\n                    top = maxTop;\n                }\n                if (top < minTop) {\n                    top = minTop;\n                }\n\n                this.$hud.css('top', top);\n\n                var tipTop = (triggerCenter - top) - (this.settings.tipWidth / 2);\n                this.$tip.css({top: tipTop, left: ''});\n\n\n                if (this.orientation == 'left') {\n                    var left = triggerOffset.left - (hudBodyWidth + this.settings.triggerSpacing);\n                    this.$hud.css('left', left);\n                }\n                else {\n                    var left = triggerOffset.right + this.settings.triggerSpacing;\n                    this.$hud.css('left', left);\n                }\n            }\n\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.addListener(this.$main, 'resize', 'updateSizeAndPosition');\n            }, this));\n        },\n\n        /**\n         * Hide\n         */\n        hide: function() {\n            this.disable();\n\n            this.$hud.hide();\n            this.$shade.hide();\n            this.showing = false;\n\n            delete Garnish.HUD.activeHUDs[this._namespace];\n\n            Garnish.escManager.unregister(this);\n\n            this.onHide();\n        },\n\n        onHide: function() {\n            this.trigger('hide');\n        },\n\n        toggle: function() {\n            if (this.showing) {\n                this.hide();\n            }\n            else {\n                this.show();\n            }\n        },\n\n        submit: function() {\n            this.onSubmit();\n        },\n\n        onSubmit: function() {\n            this.trigger('submit');\n        },\n\n        _handleSubmit: function(ev) {\n            ev.preventDefault();\n            this.submit();\n        }\n    },\n    {\n        tipClasses: {bottom: 'top', top: 'bottom', right: 'left', left: 'right'},\n\n        defaults: {\n            shadeClass: 'hud-shade',\n            hudClass: 'hud',\n            tipClass: 'tip',\n            bodyClass: 'body',\n            headerClass: 'hud-header',\n            footerClass: 'hud-footer',\n            mainContainerClass: 'main-container',\n            mainClass: 'main',\n            orientations: ['bottom', 'top', 'right', 'left'],\n            triggerSpacing: 10,\n            windowSpacing: 10,\n            tipWidth: 30,\n            minBodyWidth: 200,\n            minBodyHeight: 0,\n            onShow: $.noop,\n            onHide: $.noop,\n            onSubmit: $.noop,\n            closeBtn: null,\n            closeOtherHUDs: true\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Menu\n */\nGarnish.Menu = Garnish.Base.extend(\n    {\n        settings: null,\n\n        $container: null,\n        $options: null,\n        $anchor: null,\n\n        menuId: null,\n\n        _windowWidth: null,\n        _windowHeight: null,\n        _windowScrollLeft: null,\n        _windowScrollTop: null,\n\n        _anchorOffset: null,\n        _anchorWidth: null,\n        _anchorHeight: null,\n        _anchorOffsetRight: null,\n        _anchorOffsetBottom: null,\n\n        _menuWidth: null,\n        _menuHeight: null,\n\n        /**\n         * Constructor\n         */\n        init: function(container, settings) {\n            this.setSettings(settings, Garnish.Menu.defaults);\n\n            this.$container = $(container);\n\n            this.$options = $();\n            this.addOptions(this.$container.find('a'));\n\n            // Menu List\n            this.menuId = 'menu' + this._namespace;\n            this.$menuList = $('ul', this.$container);\n            this.$menuList.attr({\n                'role': 'listbox',\n                'id': this.menuId,\n                'aria-hidden': 'true'\n            });\n\n            // Deprecated\n            if (this.settings.attachToElement) {\n                this.settings.anchor = this.settings.attachToElement;\n                Garnish.log('The \\'attachToElement\\' setting is deprecated. Use \\'anchor\\' instead.');\n            }\n\n            if (this.settings.anchor) {\n                this.$anchor = $(this.settings.anchor);\n            }\n\n            // Prevent clicking on the container from hiding the menu\n            this.addListener(this.$container, 'mousedown', function(ev) {\n                ev.stopPropagation();\n\n                // Prevent this from causing the menu button to blur\n                ev.preventDefault();\n            });\n        },\n\n        addOptions: function($options) {\n            this.$options = this.$options.add($options);\n            $options.data('menu', this);\n\n            $options.each($.proxy(function(optionKey, option) {\n                $(option).attr({\n                    'role': 'option',\n                    'tabindex': '-1',\n                    'id': this.menuId + '-option-' + optionKey\n                });\n            }, this));\n\n            this.addListener($options, 'click', 'selectOption');\n        },\n\n        setPositionRelativeToAnchor: function() {\n            this._windowWidth = Garnish.$win.width();\n            this._windowHeight = Garnish.$win.height();\n            this._windowScrollLeft = Garnish.$win.scrollLeft();\n            this._windowScrollTop = Garnish.$win.scrollTop();\n\n            this._anchorOffset = this.$anchor.offset();\n            this._anchorWidth = this.$anchor.outerWidth();\n            this._anchorHeight = this.$anchor.outerHeight();\n            this._anchorOffsetRight = this._anchorOffset.left + this._anchorHeight;\n            this._anchorOffsetBottom = this._anchorOffset.top + this._anchorHeight;\n\n            this.$container.css('minWidth', 0);\n            this.$container.css('minWidth', this._anchorWidth - (this.$container.outerWidth() - this.$container.width()));\n\n            this._menuWidth = this.$container.outerWidth();\n            this._menuHeight = this.$container.outerHeight();\n\n            // Is there room for the menu below the anchor?\n            var topClearance = this._anchorOffset.top - this._windowScrollTop,\n                bottomClearance = this._windowHeight + this._windowScrollTop - this._anchorOffsetBottom;\n\n            if (bottomClearance >= this._menuHeight || bottomClearance >= topClearance || topClearance < this._menuHeight) {\n                this.$container.css('top', this._anchorOffsetBottom);\n            }\n            else {\n                this.$container.css('top', this._anchorOffset.top - this._menuHeight);\n            }\n\n            // Figure out how we're aliging it\n            var align = this.$container.data('align');\n\n            if (align != 'left' && align != 'center' && align != 'right') {\n                align = 'left';\n            }\n\n            if (align == 'center') {\n                this._alignCenter();\n            }\n            else {\n                // Figure out which options are actually possible\n                var rightClearance = this._windowWidth + this._windowScrollLeft - (this._anchorOffset.left + this._menuWidth),\n                    leftClearance = this._anchorOffsetRight - this._menuWidth;\n\n                if (align == 'right' && leftClearance >= 0 || rightClearance < 0) {\n                    this._alignRight();\n                }\n                else {\n                    this._alignLeft();\n                }\n            }\n\n            delete this._windowWidth;\n            delete this._windowHeight;\n            delete this._windowScrollLeft;\n            delete this._windowScrollTop;\n            delete this._anchorOffset;\n            delete this._anchorWidth;\n            delete this._anchorHeight;\n            delete this._anchorOffsetRight;\n            delete this._anchorOffsetBottom;\n            delete this._menuWidth;\n            delete this._menuHeight;\n        },\n\n        show: function() {\n            // Move the menu to the end of the DOM\n            this.$container.appendTo(Garnish.$bod)\n\n            if (this.$anchor) {\n                this.setPositionRelativeToAnchor();\n            }\n\n            this.$container.velocity('stop');\n            this.$container.css({\n                opacity: 1,\n                display: 'block'\n            });\n\n            this.$menuList.attr('aria-hidden', 'false');\n\n            Garnish.escManager.register(this, 'hide');\n        },\n\n        hide: function() {\n            this.$menuList.attr('aria-hidden', 'true');\n\n            this.$container.velocity('fadeOut', {duration: Garnish.FX_DURATION}, $.proxy(function() {\n                this.$container.detach();\n            }, this));\n\n            Garnish.escManager.unregister(this);\n\n            this.trigger('hide');\n        },\n\n        selectOption: function(ev) {\n            this.settings.onOptionSelect(ev.currentTarget);\n            this.trigger('optionselect', {selectedOption: ev.currentTarget});\n            this.hide();\n        },\n\n        _alignLeft: function() {\n            this.$container.css({\n                left: this._anchorOffset.left,\n                right: 'auto'\n            });\n        },\n\n        _alignRight: function() {\n            this.$container.css({\n                right: this._windowWidth - (this._anchorOffset.left + this._anchorWidth),\n                left: 'auto'\n            });\n        },\n\n        _alignCenter: function() {\n            var left = Math.round((this._anchorOffset.left + this._anchorWidth / 2) - (this._menuWidth / 2));\n\n            if (left < 0) {\n                left = 0;\n            }\n\n            this.$container.css('left', left);\n        }\n\n    },\n    {\n        defaults: {\n            anchor: null,\n            onOptionSelect: $.noop\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Menu Button\n */\nGarnish.MenuBtn = Garnish.Base.extend(\n    {\n        $btn: null,\n        menu: null,\n        showingMenu: false,\n        disabled: true,\n\n        /**\n         * Constructor\n         */\n        init: function(btn, settings) {\n            this.$btn = $(btn);\n\n            // Is this already a menu button?\n            if (this.$btn.data('menubtn')) {\n                // Grab the old MenuBtn's menu container\n                var $menu = this.$btn.data('menubtn').menu.$container;\n\n                Garnish.log('Double-instantiating a menu button on an element');\n                this.$btn.data('menubtn').destroy();\n            }\n            else {\n                var $menu = this.$btn.next('.menu').detach();\n            }\n\n            this.$btn.data('menubtn', this);\n\n            this.setSettings(settings, Garnish.MenuBtn.defaults);\n\n            this.menu = new Garnish.Menu($menu, {\n                anchor: (this.settings.menuAnchor || this.$btn),\n                onOptionSelect: $.proxy(this, 'onOptionSelect')\n            });\n\n            this.$btn.attr({\n                'tabindex': 0,\n                'role': 'combobox',\n                'aria-owns': this.menu.menuId,\n                'aria-haspopup': 'true',\n                'aria-expanded': 'false',\n            });\n\n            this.menu.on('hide', $.proxy(this, 'onMenuHide'));\n            this.addListener(this.$btn, 'mousedown', 'onMouseDown');\n            this.addListener(this.$btn, 'keydown', 'onKeyDown');\n            this.addListener(this.$btn, 'blur', 'onBlur');\n            this.enable();\n        },\n\n        onBlur: function(ev) {\n            if (this.showingMenu) {\n                this.hideMenu();\n            }\n        },\n\n        onKeyDown: function(ev) {\n            switch (ev.keyCode) {\n                case Garnish.RETURN_KEY: {\n                    ev.preventDefault();\n\n                    var $currentOption = this.menu.$options.filter('.hover');\n\n                    if ($currentOption.length > 0) {\n                        $currentOption.get(0).click();\n                    }\n\n                    break;\n                }\n\n                case Garnish.SPACE_KEY: {\n                    ev.preventDefault();\n\n                    if (!this.showingMenu) {\n                        this.showMenu();\n\n                        var $option = this.menu.$options.filter('.sel:first');\n\n                        if ($option.length > 0) {\n                            $option;\n                        }\n                        else {\n                            $option = this.menu.$options.first();\n                        }\n\n                        this.focusOption($option);\n                    }\n\n                    break;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n\n                    var $option;\n\n                    if (this.showingMenu) {\n                        $.each(this.menu.$options, $.proxy(function(index, value) {\n                            if (!$option) {\n                                if ($(value).hasClass('hover')) {\n                                    if ((index + 1) < this.menu.$options.length) {\n                                        $option = $(this.menu.$options[(index + 1)]);\n                                    }\n                                }\n                            }\n                        }, this));\n\n                        if (!$option) {\n                            $option = $(this.menu.$options[0]);\n                        }\n                    }\n                    else {\n                        this.showMenu();\n\n                        $option = this.menu.$options.filter('.sel:first');\n\n                        if ($option.length == 0) {\n                            $option = this.menu.$options.first();\n                        }\n                    }\n\n                    this.focusOption($option);\n\n                    break;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n\n                    var $option;\n\n                    if (this.showingMenu) {\n                        $.each(this.menu.$options, $.proxy(function(index, value) {\n                            if (!$option) {\n                                if ($(value).hasClass('hover')) {\n                                    if ((index - 1) >= 0) {\n                                        $option = $(this.menu.$options[(index - 1)]);\n                                    }\n                                }\n                            }\n                        }, this));\n\n                        if (!$option) {\n                            $option = $(this.menu.$options[(this.menu.$options.length - 1)]);\n                        }\n                    }\n                    else {\n                        this.showMenu();\n\n                        $option = this.menu.$options.filter('.sel:first');\n\n                        if ($option.length == 0) {\n                            $option = this.menu.$options.last();\n                        }\n                    }\n\n                    this.focusOption($option);\n\n                    break;\n                }\n            }\n        },\n\n        focusOption: function($option) {\n            this.menu.$options.removeClass('hover');\n\n            $option.addClass('hover');\n\n            this.menu.$menuList.attr('aria-activedescendant', $option.attr('id'));\n            this.$btn.attr('aria-activedescendant', $option.attr('id'));\n        },\n\n        onMouseDown: function(ev) {\n            if (ev.which != Garnish.PRIMARY_CLICK || Garnish.isCtrlKeyPressed(ev)) {\n                return;\n            }\n\n            ev.preventDefault();\n\n            if (this.showingMenu) {\n                this.hideMenu();\n            }\n            else {\n                this.showMenu();\n            }\n        },\n\n        showMenu: function() {\n            if (this.disabled) {\n                return;\n            }\n\n            this.menu.show();\n            this.$btn.addClass('active');\n            this.$btn.trigger('focus');\n            this.$btn.attr('aria-expanded', 'true');\n\n            this.showingMenu = true;\n\n            setTimeout($.proxy(function() {\n                this.addListener(Garnish.$doc, 'mousedown', 'onMouseDown');\n            }, this), 1);\n        },\n\n        hideMenu: function() {\n            this.menu.hide();\n            this.$btn.attr('aria-expanded', 'false');\n        },\n\n        onMenuHide: function() {\n            this.$btn.removeClass('active');\n            this.showingMenu = false;\n\n            this.removeListener(Garnish.$doc, 'mousedown');\n        },\n\n        onOptionSelect: function(option) {\n            this.settings.onOptionSelect(option);\n            this.trigger('optionSelect', {option: option});\n        },\n\n        enable: function() {\n            this.disabled = false;\n        },\n\n        disable: function() {\n            this.disabled = true;\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$btn.removeData('menubtn');\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            menuAnchor: null,\n            onOptionSelect: $.noop\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Mixed input\n *\n * @todo RTL support, in the event that the input doesn't have dir=\"ltr\".\n */\nGarnish.MixedInput = Garnish.Base.extend(\n    {\n        $container: null,\n        elements: null,\n        focussedElement: null,\n        blurTimeout: null,\n\n        init: function(container, settings) {\n            this.$container = $(container);\n            this.setSettings(settings, Garnish.MixedInput.defaults);\n\n            this.elements = [];\n\n            // Allow the container to receive focus\n            this.$container.attr('tabindex', 0);\n            this.addListener(this.$container, 'focus', 'onFocus');\n        },\n\n        getElementIndex: function($elem) {\n            return $.inArray($elem, this.elements);\n        },\n\n        isText: function($elem) {\n            return ($elem.prop('nodeName') == 'INPUT');\n        },\n\n        onFocus: function(ev) {\n            // Set focus to the first element\n            if (this.elements.length) {\n                var $elem = this.elements[0];\n                this.setFocus($elem);\n                this.setCarotPos($elem, 0);\n            }\n            else {\n                this.addTextElement();\n            }\n        },\n\n        addTextElement: function(index) {\n            var text = new TextElement(this);\n            this.addElement(text.$input, index);\n            return text;\n        },\n\n        addElement: function($elem, index) {\n            // Was a target index passed, and is it valid?\n            if (index === undefined) {\n                if (this.focussedElement) {\n                    var focussedElement = this.focussedElement,\n                        focussedElementIndex = this.getElementIndex(focussedElement);\n\n                    // Is the focus on a text element?\n                    if (this.isText(focussedElement)) {\n                        var selectionStart = focussedElement.prop('selectionStart'),\n                            selectionEnd = focussedElement.prop('selectionEnd'),\n                            val = focussedElement.val(),\n                            preVal = val.substring(0, selectionStart),\n                            postVal = val.substr(selectionEnd);\n\n                        if (preVal && postVal) {\n                            // Split the input into two\n                            focussedElement.val(preVal).trigger('change');\n                            var newText = new TextElement(this);\n                            newText.$input.val(postVal).trigger('change');\n                            this.addElement(newText.$input, focussedElementIndex + 1);\n\n                            // Insert the new element in between them\n                            index = focussedElementIndex + 1;\n                        }\n                        else if (!preVal) {\n                            // Insert the new element before this one\n                            index = focussedElementIndex;\n                        }\n                        else {\n                            // Insert it after this one\n                            index = focussedElementIndex + 1;\n                        }\n                    }\n                    else {\n                        // Just insert the new one after this one\n                        index = focussedElementIndex + 1;\n                    }\n                }\n                else {\n                    // Insert the new element at the end\n                    index = this.elements.length;\n                }\n            }\n\n            // Add the element\n            if (this.elements[index] !== undefined) {\n                $elem.insertBefore(this.elements[index]);\n                this.elements.splice(index, 0, $elem);\n            }\n            else {\n                // Just for safe measure, set the index to what it really will be\n                index = this.elements.length;\n\n                this.$container.append($elem);\n                this.elements.push($elem);\n            }\n\n            // Make sure that there are text elements surrounding all non-text elements\n            if (!this.isText($elem)) {\n                // Add a text element before?\n                if (index == 0 || !this.isText(this.elements[index - 1])) {\n                    this.addTextElement(index);\n                    index++;\n                }\n\n                // Add a text element after?\n                if (index == this.elements.length - 1 || !this.isText(this.elements[index + 1])) {\n                    this.addTextElement(index + 1);\n                }\n            }\n\n            // Add event listeners\n            this.addListener($elem, 'click', function() {\n                this.setFocus($elem);\n            });\n\n            // Set focus to the new element\n            setTimeout($.proxy(function() {\n                this.setFocus($elem);\n            }, this), 1);\n        },\n\n        removeElement: function($elem) {\n            var index = this.getElementIndex($elem);\n            if (index != -1) {\n                this.elements.splice(index, 1);\n\n                if (!this.isText($elem)) {\n                    // Combine the two now-adjacent text elements\n                    var $prevElem = this.elements[index - 1],\n                        $nextElem = this.elements[index];\n\n                    if (this.isText($prevElem) && this.isText($nextElem)) {\n                        var prevElemVal = $prevElem.val(),\n                            newVal = prevElemVal + $nextElem.val();\n                        $prevElem.val(newVal).trigger('change');\n                        this.removeElement($nextElem);\n                        this.setFocus($prevElem);\n                        this.setCarotPos($prevElem, prevElemVal.length);\n                    }\n                }\n\n                $elem.remove();\n            }\n        },\n\n        setFocus: function($elem) {\n            this.$container.addClass('focus');\n\n            if (!this.focussedElement) {\n                // Prevent the container from receiving focus\n                // as long as one of its elements has focus\n                this.$container.attr('tabindex', '-1');\n            }\n            else {\n                // Blur the previously-focussed element\n                this.blurFocussedElement();\n            }\n\n            $elem.attr('tabindex', '0');\n            $elem.focus();\n            this.focussedElement = $elem;\n\n            this.addListener($elem, 'blur', function() {\n                this.blurTimeout = setTimeout($.proxy(function() {\n                    if (this.focussedElement == $elem) {\n                        this.blurFocussedElement();\n                        this.focussedElement = null;\n                        this.$container.removeClass('focus');\n\n                        // Get ready for future focus\n                        this.$container.attr('tabindex', '0');\n                    }\n                }, this), 1);\n            });\n        },\n\n        blurFocussedElement: function() {\n            this.removeListener(this.focussedElement, 'blur');\n            this.focussedElement.attr('tabindex', '-1');\n        },\n\n        focusPreviousElement: function($from) {\n            var index = this.getElementIndex($from);\n\n            if (index > 0) {\n                var $elem = this.elements[index - 1];\n                this.setFocus($elem);\n\n                // If it's a text element, put the carot at the end\n                if (this.isText($elem)) {\n                    var length = $elem.val().length;\n                    this.setCarotPos($elem, length);\n                }\n            }\n        },\n\n        focusNextElement: function($from) {\n            var index = this.getElementIndex($from);\n\n            if (index < this.elements.length - 1) {\n                var $elem = this.elements[index + 1];\n                this.setFocus($elem);\n\n                // If it's a text element, put the carot at the beginning\n                if (this.isText($elem)) {\n                    this.setCarotPos($elem, 0)\n                }\n            }\n        },\n\n        setCarotPos: function($elem, pos) {\n            $elem.prop('selectionStart', pos);\n            $elem.prop('selectionEnd', pos);\n        }\n\n    });\n\n\nvar TextElement = Garnish.Base.extend({\n\n        parentInput: null,\n        $input: null,\n        $stage: null,\n        val: null,\n        focussed: false,\n        interval: null,\n\n        init: function(parentInput) {\n            this.parentInput = parentInput;\n\n            this.$input = $('<input type=\"text\"/>').appendTo(this.parentInput.$container);\n            this.$input.css('margin-right', (2 - TextElement.padding) + 'px');\n\n            this.setWidth();\n\n            this.addListener(this.$input, 'focus', 'onFocus');\n            this.addListener(this.$input, 'blur', 'onBlur');\n            this.addListener(this.$input, 'keydown', 'onKeyDown');\n            this.addListener(this.$input, 'change', 'checkInput');\n        },\n\n        getIndex: function() {\n            return this.parentInput.getElementIndex(this.$input);\n        },\n\n        buildStage: function() {\n            this.$stage = $('<stage/>').appendTo(Garnish.$bod);\n\n            // replicate the textarea's text styles\n            this.$stage.css({\n                position: 'absolute',\n                top: -9999,\n                left: -9999,\n                wordWrap: 'nowrap'\n            });\n\n            Garnish.copyTextStyles(this.$input, this.$stage);\n        },\n\n        getTextWidth: function(val) {\n            if (!this.$stage) {\n                this.buildStage();\n            }\n\n            if (val) {\n                // Ampersand entities\n                val = val.replace(/&/g, '&amp;');\n\n                // < and >\n                val = val.replace(/</g, '&lt;');\n                val = val.replace(/>/g, '&gt;');\n\n                // Spaces\n                val = val.replace(/ /g, '&nbsp;');\n            }\n\n            this.$stage.html(val);\n            this.stageWidth = this.$stage.width();\n            return this.stageWidth;\n        },\n\n        onFocus: function() {\n            this.focussed = true;\n            this.interval = setInterval($.proxy(this, 'checkInput'), Garnish.NiceText.interval);\n            this.checkInput();\n        },\n\n        onBlur: function() {\n            this.focussed = false;\n            clearInterval(this.interval);\n            this.checkInput();\n        },\n\n        onKeyDown: function(ev) {\n            setTimeout($.proxy(this, 'checkInput'), 1);\n\n            switch (ev.keyCode) {\n                case Garnish.LEFT_KEY: {\n                    if (this.$input.prop('selectionStart') == 0 && this.$input.prop('selectionEnd') == 0) {\n                        // Set focus to the previous element\n                        this.parentInput.focusPreviousElement(this.$input);\n                    }\n                    break;\n                }\n\n                case Garnish.RIGHT_KEY: {\n                    if (this.$input.prop('selectionStart') == this.val.length && this.$input.prop('selectionEnd') == this.val.length) {\n                        // Set focus to the next element\n                        this.parentInput.focusNextElement(this.$input);\n                    }\n                    break;\n                }\n\n                case Garnish.DELETE_KEY: {\n                    if (this.$input.prop('selectionStart') == 0 && this.$input.prop('selectionEnd') == 0) {\n                        // Set focus to the previous element\n                        this.parentInput.focusPreviousElement(this.$input);\n                        ev.preventDefault();\n                    }\n                }\n            }\n        },\n\n        getVal: function() {\n            this.val = this.$input.val();\n            return this.val;\n        },\n\n        setVal: function(val) {\n            this.$input.val(val);\n            this.checkInput();\n        },\n\n        checkInput: function() {\n            // Has the value changed?\n            var changed = (this.val !== this.getVal());\n            if (changed) {\n                this.setWidth();\n                this.onChange();\n            }\n\n            return changed;\n        },\n\n        setWidth: function() {\n            // has the width changed?\n            if (this.stageWidth !== this.getTextWidth(this.val)) {\n                // update the textarea width\n                var width = this.stageWidth + TextElement.padding;\n                this.$input.width(width);\n            }\n        },\n\n        onChange: $.noop\n    },\n    {\n        padding: 20\n    }\n);\n","/** global: Garnish */\n/**\n * Modal\n */\nGarnish.Modal = Garnish.Base.extend(\n    {\n        $container: null,\n        $shade: null,\n\n        visible: false,\n\n        dragger: null,\n\n        desiredWidth: null,\n        desiredHeight: null,\n        resizeDragger: null,\n        resizeStartWidth: null,\n        resizeStartHeight: null,\n\n        init: function(container, settings) {\n            // Param mapping\n            if (settings === undefined && $.isPlainObject(container)) {\n                // (settings)\n                settings = container;\n                container = null;\n            }\n\n            this.setSettings(settings, Garnish.Modal.defaults);\n\n            // Create the shade\n            this.$shade = $('<div class=\"' + this.settings.shadeClass + '\"/>');\n\n            // If the container is already set, drop the shade below it.\n            if (container) {\n                this.$shade.insertBefore(container);\n            }\n            else {\n                this.$shade.appendTo(Garnish.$bod);\n            }\n\n            if (container) {\n                this.setContainer(container);\n\n                if (this.settings.autoShow) {\n                    this.show();\n                }\n            }\n\n            Garnish.Modal.instances.push(this);\n        },\n\n        setContainer: function(container) {\n            this.$container = $(container);\n\n            // Is this already a modal?\n            if (this.$container.data('modal')) {\n                Garnish.log('Double-instantiating a modal on an element');\n                this.$container.data('modal').destroy();\n            }\n\n            this.$container.data('modal', this);\n\n            if (this.settings.draggable) {\n                this.dragger = new Garnish.DragMove(this.$container, {\n                    handle: (this.settings.dragHandleSelector ? this.$container.find(this.settings.dragHandleSelector) : this.$container)\n                });\n            }\n\n            if (this.settings.resizable) {\n                var $resizeDragHandle = $('<div class=\"resizehandle\"/>').appendTo(this.$container);\n\n                this.resizeDragger = new Garnish.BaseDrag($resizeDragHandle, {\n                    onDragStart: $.proxy(this, '_handleResizeStart'),\n                    onDrag: $.proxy(this, '_handleResize')\n                });\n            }\n\n            this.addListener(this.$container, 'click', function(ev) {\n                ev.stopPropagation();\n            });\n\n            // Show it if we're late to the party\n            if (this.visible) {\n                this.show();\n            }\n        },\n\n        show: function() {\n            // Close other modals as needed\n            if (this.settings.closeOtherModals && Garnish.Modal.visibleModal && Garnish.Modal.visibleModal != this) {\n                Garnish.Modal.visibleModal.hide();\n            }\n\n            if (this.$container) {\n                // Move it to the end of <body> so it gets the highest sub-z-index\n                this.$shade.appendTo(Garnish.$bod);\n                this.$container.appendTo(Garnish.$bod);\n\n                this.$container.show();\n                this.updateSizeAndPosition();\n\n                this.$shade.velocity('fadeIn', {duration: 50});\n                this.$container.delay(50).velocity('fadeIn', {\n                    complete: $.proxy(this, 'onFadeIn')\n                });\n\n                if (this.settings.hideOnShadeClick) {\n                    this.addListener(this.$shade, 'click', 'hide');\n                }\n\n                this.addListener(Garnish.$win, 'resize', 'updateSizeAndPosition');\n            }\n\n            this.enable();\n\n            if (this.settings.hideOnEsc) {\n                Garnish.escManager.register(this, 'hide');\n            }\n\n            if (!this.visible) {\n                this.visible = true;\n                Garnish.Modal.visibleModal = this;\n\n                this.trigger('show');\n                this.settings.onShow();\n            }\n        },\n\n        quickShow: function() {\n            this.show();\n\n            if (this.$container) {\n                this.$container.velocity('stop');\n                this.$container.show().css('opacity', 1);\n\n                this.$shade.velocity('stop');\n                this.$shade.show().css('opacity', 1);\n            }\n        },\n\n        hide: function(ev) {\n            this.disable();\n\n            if (ev) {\n                ev.stopPropagation();\n            }\n\n            if (this.$container) {\n                this.$container.velocity('fadeOut', {duration: Garnish.FX_DURATION});\n                this.$shade.velocity('fadeOut', {\n                    duration: Garnish.FX_DURATION,\n                    complete: $.proxy(this, 'onFadeOut')\n                });\n\n                if (this.settings.hideOnShadeClick) {\n                    this.removeListener(this.$shade, 'click');\n                }\n\n                this.removeListener(Garnish.$win, 'resize');\n            }\n\n            this.visible = false;\n            Garnish.Modal.visibleModal = null;\n\n            if (this.settings.hideOnEsc) {\n                Garnish.escManager.unregister(this);\n            }\n\n            this.trigger('hide');\n            this.settings.onHide();\n        },\n\n        quickHide: function() {\n            this.hide();\n\n            if (this.$container) {\n                this.$container.velocity('stop');\n                this.$container.css('opacity', 0).hide();\n\n                this.$shade.velocity('stop');\n                this.$shade.css('opacity', 0).hide();\n            }\n        },\n\n        updateSizeAndPosition: function() {\n            if (!this.$container) {\n                return;\n            }\n\n            this.$container.css({\n                'width': (this.desiredWidth ? Math.max(this.desiredWidth, 200) : ''),\n                'height': (this.desiredHeight ? Math.max(this.desiredHeight, 200) : ''),\n                'min-width': '',\n                'min-height': ''\n            });\n\n            // Set the width first so that the height can adjust for the width\n            this.updateSizeAndPosition._windowWidth = Garnish.$win.width();\n            this.updateSizeAndPosition._width = Math.min(this.getWidth(), this.updateSizeAndPosition._windowWidth - this.settings.minGutter * 2);\n\n            this.$container.css({\n                'width': this.updateSizeAndPosition._width,\n                'min-width': this.updateSizeAndPosition._width,\n                'left': Math.round((this.updateSizeAndPosition._windowWidth - this.updateSizeAndPosition._width) / 2)\n            });\n\n            // Now set the height\n            this.updateSizeAndPosition._windowHeight = Garnish.$win.height();\n            this.updateSizeAndPosition._height = Math.min(this.getHeight(), this.updateSizeAndPosition._windowHeight - this.settings.minGutter * 2);\n\n            this.$container.css({\n                'height': this.updateSizeAndPosition._height,\n                'min-height': this.updateSizeAndPosition._height,\n                'top': Math.round((this.updateSizeAndPosition._windowHeight - this.updateSizeAndPosition._height) / 2)\n            });\n        },\n\n        onFadeIn: function() {\n            this.trigger('fadeIn');\n            this.settings.onFadeIn();\n        },\n\n        onFadeOut: function() {\n            this.trigger('fadeOut');\n            this.settings.onFadeOut();\n        },\n\n        getHeight: function() {\n            if (!this.$container) {\n                throw 'Attempted to get the height of a modal whose container has not been set.';\n            }\n\n            if (!this.visible) {\n                this.$container.show();\n            }\n\n            this.getHeight._height = this.$container.outerHeight();\n\n            if (!this.visible) {\n                this.$container.hide();\n            }\n\n            return this.getHeight._height;\n        },\n\n        getWidth: function() {\n            if (!this.$container) {\n                throw 'Attempted to get the width of a modal whose container has not been set.';\n            }\n\n            if (!this.visible) {\n                this.$container.show();\n            }\n\n            // Chrome might be 1px shy here for some reason\n            this.getWidth._width = this.$container.outerWidth() + 1;\n\n            if (!this.visible) {\n                this.$container.hide();\n            }\n\n            return this.getWidth._width;\n        },\n\n        _handleResizeStart: function() {\n            this.resizeStartWidth = this.getWidth();\n            this.resizeStartHeight = this.getHeight();\n        },\n\n        _handleResize: function() {\n            if (Garnish.ltr) {\n                this.desiredWidth = this.resizeStartWidth + (this.resizeDragger.mouseDistX * 2);\n            }\n            else {\n                this.desiredWidth = this.resizeStartWidth - (this.resizeDragger.mouseDistX * 2);\n            }\n\n            this.desiredHeight = this.resizeStartHeight + (this.resizeDragger.mouseDistY * 2);\n\n            this.updateSizeAndPosition();\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            if (this.$container) {\n                this.$container.removeData('modal').remove();\n            }\n\n            if (this.dragger) {\n                this.dragger.destroy();\n            }\n\n            if (this.resizeDragger) {\n                this.resizeDragger.destroy();\n            }\n\n            this.base();\n        }\n    },\n    {\n        relativeElemPadding: 8,\n        defaults: {\n            autoShow: true,\n            draggable: false,\n            dragHandleSelector: null,\n            resizable: false,\n            minGutter: 10,\n            onShow: $.noop,\n            onHide: $.noop,\n            onFadeIn: $.noop,\n            onFadeOut: $.noop,\n            closeOtherModals: false,\n            hideOnEsc: true,\n            hideOnShadeClick: true,\n            shadeClass: 'modal-shade'\n        },\n        instances: [],\n        visibleModal: null\n    }\n);\n","/** global: Garnish */\n/**\n * Nice Text\n */\nGarnish.NiceText = Garnish.Base.extend(\n    {\n        $input: null,\n        $hint: null,\n        $stage: null,\n        $charsLeft: null,\n        autoHeight: null,\n        maxLength: null,\n        showCharsLeft: false,\n        showingHint: false,\n        val: null,\n        inputBoxSizing: 'content-box',\n        width: null,\n        height: null,\n        minHeight: null,\n        initialized: false,\n\n        init: function(input, settings) {\n            this.$input = $(input);\n            this.settings = $.extend({}, Garnish.NiceText.defaults, settings);\n\n            if (this.isVisible()) {\n                this.initialize();\n            }\n            else {\n                this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n            }\n        },\n\n        isVisible: function() {\n            return (this.$input.height() > 0);\n        },\n\n        initialize: function() {\n            if (this.initialized) {\n                return;\n            }\n\n            this.initialized = true;\n            this.removeListener(Garnish.$win, 'resize');\n\n            this.maxLength = this.$input.attr('maxlength');\n\n            if (this.maxLength) {\n                this.maxLength = parseInt(this.maxLength);\n            }\n\n            if (this.maxLength && (this.settings.showCharsLeft || Garnish.hasAttr(this.$input, 'data-show-chars-left'))) {\n                this.showCharsLeft = true;\n\n                // Remove the maxlength attribute\n                this.$input.removeAttr('maxlength');\n            }\n\n            // Is this already a transparent text input?\n            if (this.$input.data('nicetext')) {\n                Garnish.log('Double-instantiating a transparent text input on an element');\n                this.$input.data('nicetext').destroy();\n            }\n\n            this.$input.data('nicetext', this);\n\n            this.getVal();\n\n            this.autoHeight = (this.settings.autoHeight && this.$input.prop('nodeName') == 'TEXTAREA');\n\n            if (this.autoHeight) {\n                this.minHeight = this.getHeightForValue('');\n                this.updateHeight();\n\n                // Update height when the window resizes\n                this.width = this.$input.width();\n                this.addListener(Garnish.$win, 'resize', 'updateHeightIfWidthChanged');\n            }\n\n            if (this.settings.hint) {\n                this.$hintContainer = $('<div class=\"texthint-container\"/>').insertBefore(this.$input);\n                this.$hint = $('<div class=\"texthint\">' + this.settings.hint + '</div>').appendTo(this.$hintContainer);\n                this.$hint.css({\n                    top: (parseInt(this.$input.css('borderTopWidth')) + parseInt(this.$input.css('paddingTop'))),\n                    left: (parseInt(this.$input.css('borderLeftWidth')) + parseInt(this.$input.css('paddingLeft')) + 1)\n                });\n                Garnish.copyTextStyles(this.$input, this.$hint);\n\n                if (this.val) {\n                    this.$hint.hide();\n                }\n                else {\n                    this.showingHint = true;\n                }\n\n                // Focus the input when clicking on the hint\n                this.addListener(this.$hint, 'mousedown', function(ev) {\n                    ev.preventDefault();\n                    this.$input.focus();\n                });\n            }\n\n            if (this.showCharsLeft) {\n                this.$charsLeft = $('<div class=\"' + this.settings.charsLeftClass + '\"/>').insertAfter(this.$input);\n                this.updateCharsLeft();\n            }\n\n            this.addListener(this.$input, 'textchange', 'onTextChange');\n        },\n\n        initializeIfVisible: function() {\n            if (this.isVisible()) {\n                this.initialize();\n            }\n        },\n\n        getVal: function() {\n            this.val = this.$input.val();\n            return this.val;\n        },\n\n        showHint: function() {\n            this.$hint.velocity('fadeIn', {\n                complete: Garnish.NiceText.hintFadeDuration\n            });\n\n            this.showingHint = true;\n        },\n\n        hideHint: function() {\n            this.$hint.velocity('fadeOut', {\n                complete: Garnish.NiceText.hintFadeDuration\n            });\n\n            this.showingHint = false;\n        },\n\n        onTextChange: function() {\n            this.getVal();\n\n            if (this.$hint) {\n                if (this.showingHint && this.val) {\n                    this.hideHint();\n                }\n                else if (!this.showingHint && !this.val) {\n                    this.showHint();\n                }\n            }\n\n            if (this.autoHeight) {\n                this.updateHeight();\n            }\n\n            if (this.showCharsLeft) {\n                this.updateCharsLeft();\n            }\n        },\n\n        buildStage: function() {\n            this.$stage = $('<stage/>').appendTo(Garnish.$bod);\n\n            // replicate the textarea's text styles\n            this.$stage.css({\n                display: 'block',\n                position: 'absolute',\n                top: -9999,\n                left: -9999\n            });\n\n            this.inputBoxSizing = this.$input.css('box-sizing');\n\n            if (this.inputBoxSizing == 'border-box') {\n                this.$stage.css({\n                    'border-top': this.$input.css('border-top'),\n                    'border-right': this.$input.css('border-right'),\n                    'border-bottom': this.$input.css('border-bottom'),\n                    'border-left': this.$input.css('border-left'),\n                    'padding-top': this.$input.css('padding-top'),\n                    'padding-right': this.$input.css('padding-right'),\n                    'padding-bottom': this.$input.css('padding-bottom'),\n                    'padding-left': this.$input.css('padding-left'),\n                    '-webkit-box-sizing': this.inputBoxSizing,\n                    '-moz-box-sizing': this.inputBoxSizing,\n                    'box-sizing': this.inputBoxSizing\n                });\n            }\n\n            Garnish.copyTextStyles(this.$input, this.$stage);\n        },\n\n        getHeightForValue: function(val) {\n            if (!this.$stage) {\n                this.buildStage();\n            }\n\n            if (this.inputBoxSizing == 'border-box') {\n                this.$stage.css('width', this.$input.outerWidth());\n            }\n            else {\n                this.$stage.css('width', this.$input.width());\n            }\n\n            if (!val) {\n                val = '&nbsp;';\n                for (var i = 1; i < this.$input.prop('rows'); i++) {\n                    val += '<br/>&nbsp;';\n                }\n            }\n            else {\n                // Ampersand entities\n                val = val.replace(/&/g, '&amp;');\n\n                // < and >\n                val = val.replace(/</g, '&lt;');\n                val = val.replace(/>/g, '&gt;');\n\n                // Multiple spaces\n                val = val.replace(/ {2,}/g, function(spaces) {\n                    // TODO: replace with String.repeat() when more broadly available?\n                    var replace = '';\n                    for (var i = 0; i < spaces.length - 1; i++) {\n                        replace += '&nbsp;';\n                    }\n                    return replace + ' ';\n                });\n\n                // Line breaks\n                val = val.replace(/[\\n\\r]$/g, '<br/>&nbps;');\n                val = val.replace(/[\\n\\r]/g, '<br/>');\n            }\n\n            this.$stage.html(val);\n\n            if (this.inputBoxSizing == 'border-box') {\n                this.getHeightForValue._height = this.$stage.outerHeight();\n            }\n            else {\n                this.getHeightForValue._height = this.$stage.height();\n            }\n\n            if (this.minHeight && this.getHeightForValue._height < this.minHeight) {\n                this.getHeightForValue._height = this.minHeight;\n            }\n\n            return this.getHeightForValue._height;\n        },\n\n        updateHeight: function() {\n            // has the height changed?\n            if (this.height !== (this.height = this.getHeightForValue(this.val))) {\n                this.$input.css('min-height', this.height);\n\n                if (this.initialized) {\n                    this.onHeightChange();\n                }\n            }\n        },\n\n        updateHeightIfWidthChanged: function() {\n            if (this.isVisible() && this.width !== (this.width = this.$input.width()) && this.width) {\n                this.updateHeight();\n            }\n        },\n\n        onHeightChange: function() {\n            this.settings.onHeightChange();\n        },\n\n        updateCharsLeft: function() {\n            this.updateCharsLeft._charsLeft = this.maxLength - this.val.length;\n            this.$charsLeft.text(this.updateCharsLeft._charsLeft);\n\n            if (this.updateCharsLeft._charsLeft >= 0) {\n                this.$charsLeft.removeClass(this.settings.negativeCharsLeftClass);\n            }\n            else {\n                this.$charsLeft.addClass(this.settings.negativeCharsLeftClass);\n            }\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$input.removeData('nicetext');\n\n            if (this.$hint) {\n                this.$hint.remove();\n            }\n\n            if (this.$stage) {\n                this.$stage.remove();\n            }\n\n            this.base();\n        }\n    },\n    {\n        interval: 100,\n        hintFadeDuration: 50,\n        defaults: {\n            autoHeight: true,\n            showCharsLeft: false,\n            charsLeftClass: 'chars-left',\n            negativeCharsLeftClass: 'negative-chars-left',\n            onHeightChange: $.noop\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Pill\n */\nGarnish.Pill = Garnish.Base.extend(\n    {\n        $outerContainer: null,\n        $innerContainer: null,\n        $btns: null,\n        $selectedBtn: null,\n        $input: null,\n\n        init: function(outerContainer) {\n            this.$outerContainer = $(outerContainer);\n\n            // Is this already a pill?\n            if (this.$outerContainer.data('pill')) {\n                Garnish.log('Double-instantiating a pill on an element');\n                this.$outerContainer.data('pill').destroy();\n            }\n\n            this.$outerContainer.data('pill', this);\n\n            this.$innerContainer = this.$outerContainer.find('.btngroup:first');\n            this.$btns = this.$innerContainer.find('.btn');\n            this.$selectedBtn = this.$btns.filter('.active:first');\n            this.$input = this.$outerContainer.find('input:first');\n\n            Garnish.preventOutlineOnMouseFocus(this.$innerContainer);\n            this.addListener(this.$btns, 'mousedown', 'onMouseDown');\n            this.addListener(this.$innerContainer, 'keydown', 'onKeyDown');\n        },\n\n        select: function(btn) {\n            this.$selectedBtn.removeClass('active');\n            var $btn = $(btn);\n            $btn.addClass('active');\n            this.$input.val($btn.attr('data-value'));\n            this.$selectedBtn = $btn;\n        },\n\n        selectNext: function() {\n            if (!this.$selectedBtn.length) {\n                this.select(this.$btns[this.$btns.length - 1]);\n            }\n            else {\n                var nextIndex = this._getSelectedBtnIndex() + 1;\n\n                if (this.$btns[nextIndex] !== undefined) {\n                    this.select(this.$btns[nextIndex]);\n                }\n            }\n        },\n\n        selectPrev: function() {\n            if (!this.$selectedBtn.length) {\n                this.select(this.$btns[0]);\n            }\n            else {\n                var prevIndex = this._getSelectedBtnIndex() - 1;\n\n                if (this.$btns[prevIndex] !== undefined) {\n                    this.select(this.$btns[prevIndex]);\n                }\n            }\n        },\n\n        onMouseDown: function(ev) {\n            this.select(ev.currentTarget);\n        },\n\n        _getSelectedBtnIndex: function() {\n            if (this.$selectedBtn[0] !== undefined) {\n                return $.inArray(this.$selectedBtn[0], this.$btns);\n            }\n            else {\n                return -1;\n            }\n        },\n\n        onKeyDown: function(ev) {\n            switch (ev.keyCode) {\n                case Garnish.RIGHT_KEY: {\n                    if (Garnish.ltr) {\n                        this.selectNext();\n                    }\n                    else {\n                        this.selectPrev();\n                    }\n\n                    ev.preventDefault();\n                    break;\n                }\n\n                case Garnish.LEFT_KEY: {\n                    if (Garnish.ltr) {\n                        this.selectPrev();\n                    }\n                    else {\n                        this.selectNext();\n                    }\n\n                    ev.preventDefault();\n                    break;\n                }\n            }\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$outerContainer.removeData('pill');\n            this.base();\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Select\n */\nGarnish.Select = Garnish.Base.extend(\n    {\n        $container: null,\n        $items: null,\n        $selectedItems: null,\n\n        mousedownTarget: null,\n        mouseUpTimeout: null,\n        callbackFrame: null,\n\n        $focusable: null,\n        $first: null,\n        first: null,\n        $last: null,\n        last: null,\n\n        /**\n         * Constructor\n         */\n        init: function(container, items, settings) {\n            this.$container = $(container);\n\n            // Param mapping\n            if (items === undefined && $.isPlainObject(container)) {\n                // (settings)\n                settings = container;\n                container = null;\n                items = null;\n            }\n            else if (settings === undefined && $.isPlainObject(items)) {\n                // (container, settings)\n                settings = items;\n                items = null;\n            }\n\n            // Is this already a select?\n            if (this.$container.data('select')) {\n                Garnish.log('Double-instantiating a select on an element');\n                this.$container.data('select').destroy();\n            }\n\n            this.$container.data('select', this);\n\n            this.setSettings(settings, Garnish.Select.defaults);\n\n            this.$items = $();\n            this.$selectedItems = $();\n\n            this.addItems(items);\n\n            // --------------------------------------------------------------------\n\n            if (this.settings.allowEmpty && !this.settings.checkboxMode) {\n                this.addListener(this.$container, 'click', function(ev) {\n                    if (this.ignoreClick) {\n                        this.ignoreClick = false;\n                    }\n                    else {\n                        // Deselect all items on container click\n                        this.deselectAll(true);\n                    }\n                });\n            }\n        },\n\n        /**\n         * Get Item Index\n         */\n        getItemIndex: function($item) {\n            return this.$items.index($item[0]);\n        },\n\n        /**\n         * Is Selected?\n         */\n        isSelected: function(item) {\n            if (Garnish.isJquery(item)) {\n                if (!item[0]) {\n                    return false;\n                }\n\n                item = item[0];\n            }\n\n            return ($.inArray(item, this.$selectedItems) != -1);\n        },\n\n        /**\n         * Select Item\n         */\n        selectItem: function($item, focus, preventScroll) {\n            if (!this.settings.multi) {\n                this.deselectAll();\n            }\n\n            this.$first = this.$last = $item;\n            this.first = this.last = this.getItemIndex($item);\n\n            if (focus) {\n                this.setFocusableItem($item);\n                this.focusItem($item, preventScroll);\n            }\n\n            this._selectItems($item);\n        },\n\n        selectAll: function() {\n            if (!this.settings.multi || !this.$items.length) {\n                return;\n            }\n\n            this.first = 0;\n            this.last = this.$items.length - 1;\n            this.$first = this.$items.eq(this.first);\n            this.$last = this.$items.eq(this.last);\n\n            this._selectItems(this.$items);\n        },\n\n        /**\n         * Select Range\n         */\n        selectRange: function($item, preventScroll) {\n            if (!this.settings.multi) {\n                return this.selectItem($item, true);\n            }\n\n            this.deselectAll();\n\n            this.$last = $item;\n            this.last = this.getItemIndex($item);\n\n            this.setFocusableItem($item);\n            this.focusItem($item, preventScroll);\n\n            // prepare params for $.slice()\n            if (this.first < this.last) {\n                var sliceFrom = this.first,\n                    sliceTo = this.last + 1;\n            }\n            else {\n                var sliceFrom = this.last,\n                    sliceTo = this.first + 1;\n            }\n\n            this._selectItems(this.$items.slice(sliceFrom, sliceTo));\n        },\n\n        /**\n         * Deselect Item\n         */\n        deselectItem: function($item) {\n            var index = this.getItemIndex($item);\n            if (this.first === index) {\n                this.$first = this.first = null;\n            }\n            if (this.last === index) {\n                this.$last = this.last = null;\n            }\n\n            this._deselectItems($item);\n        },\n\n        /**\n         * Deselect All\n         */\n        deselectAll: function(clearFirst) {\n            if (clearFirst) {\n                this.$first = this.first = this.$last = this.last = null;\n            }\n\n            this._deselectItems(this.$items);\n        },\n\n        /**\n         * Deselect Others\n         */\n        deselectOthers: function($item) {\n            this.deselectAll();\n            this.selectItem($item, true);\n        },\n\n        /**\n         * Toggle Item\n         */\n        toggleItem: function($item, preventScroll) {\n            if (!this.isSelected($item)) {\n                this.selectItem($item, true, preventScroll);\n            }\n            else {\n                if (this._canDeselect($item)) {\n                    this.deselectItem($item, true);\n                }\n            }\n        },\n\n        clearMouseUpTimeout: function() {\n            clearTimeout(this.mouseUpTimeout);\n        },\n\n        getFirstItem: function() {\n            if (this.$items.length) {\n                return this.$items.first();\n            }\n        },\n\n        getLastItem: function() {\n            if (this.$items.length) {\n                return this.$items.last();\n            }\n        },\n\n        isPreviousItem: function(index) {\n            return (index > 0);\n        },\n\n        isNextItem: function(index) {\n            return (index < this.$items.length - 1);\n        },\n\n        getPreviousItem: function(index) {\n            if (this.isPreviousItem(index)) {\n                return this.$items.eq(index - 1);\n            }\n        },\n\n        getNextItem: function(index) {\n            if (this.isNextItem(index)) {\n                return this.$items.eq(index + 1);\n            }\n        },\n\n        getItemToTheLeft: function(index) {\n            var func = (Garnish.ltr ? 'Previous' : 'Next');\n\n            if (this['is' + func + 'Item'](index)) {\n                if (this.settings.horizontal) {\n                    return this['get' + func + 'Item'](index);\n                }\n                if (!this.settings.vertical) {\n                    return this.getClosestItem(index, Garnish.X_AXIS, '<');\n                }\n            }\n        },\n\n        getItemToTheRight: function(index) {\n            var func = (Garnish.ltr ? 'Next' : 'Previous');\n\n            if (this['is' + func + 'Item'](index)) {\n                if (this.settings.horizontal) {\n                    return this['get' + func + 'Item'](index);\n                }\n                else if (!this.settings.vertical) {\n                    return this.getClosestItem(index, Garnish.X_AXIS, '>');\n                }\n            }\n        },\n\n        getItemAbove: function(index) {\n            if (this.isPreviousItem(index)) {\n                if (this.settings.vertical) {\n                    return this.getPreviousItem(index);\n                }\n                else if (!this.settings.horizontal) {\n                    return this.getClosestItem(index, Garnish.Y_AXIS, '<');\n                }\n            }\n        },\n\n        getItemBelow: function(index) {\n            if (this.isNextItem(index)) {\n                if (this.settings.vertical) {\n                    return this.getNextItem(index);\n                }\n                else if (!this.settings.horizontal) {\n                    return this.getClosestItem(index, Garnish.Y_AXIS, '>');\n                }\n            }\n        },\n\n        getClosestItem: function(index, axis, dir) {\n            var axisProps = Garnish.Select.closestItemAxisProps[axis],\n                dirProps = Garnish.Select.closestItemDirectionProps[dir];\n\n            var $thisItem = this.$items.eq(index),\n                thisOffset = $thisItem.offset(),\n                thisMidpoint = thisOffset[axisProps.midpointOffset] + Math.round($thisItem[axisProps.midpointSizeFunc]() / 2),\n                otherRowPos = null,\n                smallestMidpointDiff = null,\n                $closestItem = null;\n\n            // Go the other way if this is the X axis and a RTL page\n            if (Garnish.rtl && axis == Garnish.X_AXIS) {\n                var step = dirProps.step * -1;\n            }\n            else {\n                var step = dirProps.step;\n            }\n\n            for (var i = index + step; (this.$items[i] !== undefined); i += step) {\n                var $otherItem = this.$items.eq(i),\n                    otherOffset = $otherItem.offset();\n\n                // Are we on the next row yet?\n                if (dirProps.isNextRow(otherOffset[axisProps.rowOffset], thisOffset[axisProps.rowOffset])) {\n                    // Is this the first time we've seen this row?\n                    if (otherRowPos === null) {\n                        otherRowPos = otherOffset[axisProps.rowOffset];\n                    }\n                    // Have we gone too far?\n                    else if (otherOffset[axisProps.rowOffset] != otherRowPos) {\n                        break;\n                    }\n\n                    var otherMidpoint = otherOffset[axisProps.midpointOffset] + Math.round($otherItem[axisProps.midpointSizeFunc]() / 2),\n                        midpointDiff = Math.abs(thisMidpoint - otherMidpoint);\n\n                    // Are we getting warmer?\n                    if (smallestMidpointDiff === null || midpointDiff < smallestMidpointDiff) {\n                        smallestMidpointDiff = midpointDiff;\n                        $closestItem = $otherItem;\n                    }\n                    // Getting colder?\n                    else {\n                        break;\n                    }\n                }\n                // Getting colder?\n                else if (dirProps.isWrongDirection(otherOffset[axisProps.rowOffset], thisOffset[axisProps.rowOffset])) {\n                    break;\n                }\n            }\n\n            return $closestItem;\n        },\n\n        getFurthestItemToTheLeft: function(index) {\n            return this.getFurthestItem(index, 'ToTheLeft');\n        },\n\n        getFurthestItemToTheRight: function(index) {\n            return this.getFurthestItem(index, 'ToTheRight');\n        },\n\n        getFurthestItemAbove: function(index) {\n            return this.getFurthestItem(index, 'Above');\n        },\n\n        getFurthestItemBelow: function(index) {\n            return this.getFurthestItem(index, 'Below');\n        },\n\n        getFurthestItem: function(index, dir) {\n            var $item, $testItem;\n\n            while ($testItem = this['getItem' + dir](index)) {\n                $item = $testItem;\n                index = this.getItemIndex($item);\n            }\n\n            return $item;\n        },\n\n        /**\n         * totalSelected getter\n         */\n        get totalSelected() {\n            return this.getTotalSelected();\n        },\n\n        /**\n         * Get Total Selected\n         */\n        getTotalSelected: function() {\n            return this.$selectedItems.length;\n        },\n\n        /**\n         * Add Items\n         */\n        addItems: function(items) {\n            var $items = $(items);\n\n            for (var i = 0; i < $items.length; i++) {\n                var item = $items[i];\n\n                // Make sure this element doesn't belong to another selector\n                if ($.data(item, 'select')) {\n                    Garnish.log('Element was added to more than one selector');\n                    $.data(item, 'select').removeItems(item);\n                }\n\n                // Add the item\n                $.data(item, 'select', this);\n\n                // Get the handle\n                if (this.settings.handle) {\n                    if (typeof this.settings.handle == 'object') {\n                        var $handle = $(this.settings.handle);\n                    }\n                    else if (typeof this.settings.handle == 'string') {\n                        var $handle = $(item).find(this.settings.handle);\n                    }\n                    else if (typeof this.settings.handle == 'function') {\n                        var $handle = $(this.settings.handle(item));\n                    }\n                }\n                else {\n                    var $handle = $(item);\n                }\n\n                $.data(item, 'select-handle', $handle);\n                $handle.data('select-item', item);\n\n                this.addListener($handle, 'mousedown', 'onMouseDown');\n                this.addListener($handle, 'mouseup', 'onMouseUp');\n                this.addListener($handle, 'click', function(ev) {\n                    this.ignoreClick = true;\n                });\n\n                this.addListener(item, 'keydown', 'onKeyDown');\n            }\n\n            this.$items = this.$items.add($items);\n            this.updateIndexes();\n        },\n\n        /**\n         * Remove Items\n         */\n        removeItems: function(items) {\n            items = $.makeArray(items);\n\n            var itemsChanged = false,\n                selectionChanged = false;\n\n            for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n\n                // Make sure we actually know about this item\n                var index = $.inArray(item, this.$items);\n                if (index != -1) {\n                    this._deinitItem(item);\n                    this.$items.splice(index, 1);\n                    itemsChanged = true;\n\n                    var selectedIndex = $.inArray(item, this.$selectedItems);\n                    if (selectedIndex != -1) {\n                        this.$selectedItems.splice(selectedIndex, 1);\n                        selectionChanged = true;\n                    }\n                }\n            }\n\n            if (itemsChanged) {\n                this.updateIndexes();\n\n                if (selectionChanged) {\n                    $(items).removeClass(this.settings.selectedClass);\n                    this.onSelectionChange();\n                }\n            }\n        },\n\n        /**\n         * Remove All Items\n         */\n        removeAllItems: function() {\n            for (var i = 0; i < this.$items.length; i++) {\n                this._deinitItem(this.$items[i]);\n            }\n\n            this.$items = $();\n            this.$selectedItems = $();\n            this.updateIndexes();\n        },\n\n        /**\n         * Update First/Last indexes\n         */\n        updateIndexes: function() {\n            if (this.first !== null) {\n                this.first = this.getItemIndex(this.$first);\n                this.setFocusableItem(this.$first);\n            }\n            else if (this.$items.length) {\n                this.setFocusableItem($(this.$items[0]));\n            }\n\n            if (this.last !== null) {\n                this.last = this.getItemIndex(this.$last);\n            }\n        },\n\n        /**\n         * Reset Item Order\n         */\n        resetItemOrder: function() {\n            this.$items = $().add(this.$items);\n            this.$selectedItems = $().add(this.$selectedItems);\n            this.updateIndexes();\n        },\n\n        /**\n         * Sets the focusable item.\n         *\n         * We only want to have one focusable item per selection list, so that the user\n         * doesn't have to tab through a million items.\n         *\n         * @param object $item\n         */\n        setFocusableItem: function($item) {\n            if (this.$focusable) {\n                this.$focusable.removeAttr('tabindex');\n            }\n\n            this.$focusable = $item.attr('tabindex', '0');\n        },\n\n        /**\n         * Sets the focus on an item.\n         */\n        focusItem: function($item, preventScroll) {\n            if (preventScroll) {\n                var scrollLeft = Garnish.$doc.scrollLeft(),\n                    scrollTop = Garnish.$doc.scrollTop();\n                $item.focus();\n                window.scrollTo(scrollLeft, scrollTop);\n            }\n            else {\n                $item.focus();\n            }\n        },\n\n        /**\n         * Get Selected Items\n         */\n        getSelectedItems: function() {\n            return this.$selectedItems;\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$container.removeData('select');\n            this.removeAllItems();\n            this.base();\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        /**\n         * On Mouse Down\n         */\n        onMouseDown: function(ev) {\n            // ignore right clicks\n            if (ev.which != Garnish.PRIMARY_CLICK) {\n                return;\n            }\n\n            // Enforce the filter\n            if (this.settings.filter && !$(ev.target).is(this.settings.filter)) {\n                return;\n            }\n\n            this.mousedownTarget = ev.currentTarget;\n\n            var $item = $($.data(ev.currentTarget, 'select-item'));\n\n            if (this.first !== null && ev.shiftKey) {\n                // Shift key is consistent for both selection modes\n                this.selectRange($item, true);\n            }\n            else if (this._actAsCheckbox(ev)) {\n                this.toggleItem($item, true);\n            }\n        },\n\n        /**\n         * On Mouse Up\n         */\n        onMouseUp: function(ev) {\n            // ignore right clicks\n            if (ev.which != Garnish.PRIMARY_CLICK) {\n                return;\n            }\n\n            // Enfore the filter\n            if (this.settings.filter && !$(ev.target).is(this.settings.filter)) {\n                return;\n            }\n\n            var $item = $($.data(ev.currentTarget, 'select-item'));\n\n            // was this a click?\n            if (\n                !this._actAsCheckbox(ev) && !ev.shiftKey &&\n                ev.currentTarget == this.mousedownTarget\n            ) {\n                // If this is already selected, wait a moment to see if this is a double click before making any rash decisions\n                if (this.isSelected($item)) {\n                    this.clearMouseUpTimeout();\n\n                    this.mouseUpTimeout = setTimeout($.proxy(function() {\n                        this.deselectOthers($item);\n                    }, this), 300);\n                }\n                else {\n                    this.deselectAll();\n                    this.selectItem($item, true, true);\n                }\n            }\n        },\n\n        /**\n         * On Key Down\n         */\n        onKeyDown: function(ev) {\n            // Ignore if the focus isn't on one of our items\n            if (ev.target != ev.currentTarget) {\n                return;\n            }\n\n            var ctrlKey = Garnish.isCtrlKeyPressed(ev);\n\n            if (!this.settings.checkboxMode || !this.$focusable.length) {\n                var anchor = ev.shiftKey ? this.last : this.first;\n            }\n            else {\n                var anchor = $.inArray(this.$focusable[0], this.$items);\n\n                if (anchor == -1) {\n                    anchor = 0;\n                }\n            }\n\n            // Ok, what are we doing here?\n            switch (ev.keyCode) {\n                case Garnish.LEFT_KEY: {\n                    ev.preventDefault();\n\n                    // Select the last item if none are selected\n                    if (this.first === null) {\n                        if (Garnish.ltr) {\n                            var $item = this.getLastItem();\n                        }\n                        else {\n                            var $item = this.getFirstItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            var $item = this.getFurthestItemToTheLeft(anchor);\n                        }\n                        else {\n                            var $item = this.getItemToTheLeft(anchor);\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.RIGHT_KEY: {\n                    ev.preventDefault();\n\n                    // Select the first item if none are selected\n                    if (this.first === null) {\n                        if (Garnish.ltr) {\n                            var $item = this.getFirstItem();\n                        }\n                        else {\n                            var $item = this.getLastItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            var $item = this.getFurthestItemToTheRight(anchor);\n                        }\n                        else {\n                            var $item = this.getItemToTheRight(anchor);\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n\n                    // Select the last item if none are selected\n                    if (this.first === null) {\n                        if (this.$focusable) {\n                            var $item = this.$focusable.prev();\n                        }\n\n                        if (!this.$focusable || !$item.length) {\n                            var $item = this.getLastItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            var $item = this.getFurthestItemAbove(anchor);\n                        }\n                        else {\n                            var $item = this.getItemAbove(anchor);\n                        }\n\n                        if (!$item) {\n                            $item = this.getFirstItem();\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n\n                    // Select the first item if none are selected\n                    if (this.first === null) {\n                        if (this.$focusable) {\n                            var $item = this.$focusable.next();\n                        }\n\n                        if (!this.$focusable || !$item.length) {\n                            var $item = this.getFirstItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            var $item = this.getFurthestItemBelow(anchor);\n                        }\n                        else {\n                            var $item = this.getItemBelow(anchor);\n                        }\n\n                        if (!$item) {\n                            $item = this.getLastItem();\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.SPACE_KEY: {\n                    if (!ctrlKey) {\n                        ev.preventDefault();\n\n                        if (this.isSelected(this.$focusable)) {\n                            if (this._canDeselect(this.$focusable)) {\n                                this.deselectItem(this.$focusable);\n                            }\n                        }\n                        else {\n                            this.selectItem(this.$focusable, true);\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.A_KEY: {\n                    if (ctrlKey) {\n                        ev.preventDefault();\n                        this.selectAll();\n                    }\n\n                    break;\n                }\n            }\n\n            // Is there an item queued up for focus/selection?\n            if ($item && $item.length) {\n                if (!this.settings.checkboxMode) {\n                    // select it\n                    if (this.first !== null && ev.shiftKey) {\n                        this.selectRange($item);\n                    }\n                    else {\n                        this.deselectAll();\n                        this.selectItem($item, true);\n                    }\n                }\n                else {\n                    // just set the new item to be focussable\n                    this.setFocusableItem($item);\n                    $item.focus();\n                }\n            }\n        },\n\n        /**\n         * Set Callback Timeout\n         */\n        onSelectionChange: function() {\n            if (this.callbackFrame) {\n                Garnish.cancelAnimationFrame(this.callbackFrame);\n                this.callbackFrame = null;\n            }\n\n            this.callbackFrame = Garnish.requestAnimationFrame($.proxy(function() {\n                this.callbackFrame = null;\n                this.trigger('selectionChange');\n                this.settings.onSelectionChange();\n            }, this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        _actAsCheckbox: function(ev) {\n            if (Garnish.isCtrlKeyPressed(ev)) {\n                return !this.settings.checkboxMode;\n            }\n            else {\n                return this.settings.checkboxMode;\n            }\n        },\n\n        _canDeselect: function($items) {\n            return (this.settings.allowEmpty || this.totalSelected > $items.length);\n        },\n\n        _selectItems: function($items) {\n            $items.addClass(this.settings.selectedClass);\n            this.$selectedItems = this.$selectedItems.add($items);\n            this.onSelectionChange();\n        },\n\n        _deselectItems: function($items) {\n            $items.removeClass(this.settings.selectedClass);\n            this.$selectedItems = this.$selectedItems.not($items);\n            this.onSelectionChange();\n        },\n\n        /**\n         * Deinitialize an item.\n         */\n        _deinitItem: function(item) {\n            var $handle = $.data(item, 'select-handle');\n\n            if ($handle) {\n                $handle.removeData('select-item');\n                this.removeAllListeners($handle);\n            }\n\n            $.removeData(item, 'select');\n            $.removeData(item, 'select-handle');\n        }\n    },\n    {\n        defaults: {\n            selectedClass: 'sel',\n            multi: false,\n            allowEmpty: true,\n            vertical: false,\n            horizontal: false,\n            handle: null,\n            filter: null,\n            checkboxMode: false,\n            onSelectionChange: $.noop\n        },\n\n        closestItemAxisProps: {\n            x: {\n                midpointOffset: 'top',\n                midpointSizeFunc: 'outerHeight',\n                rowOffset: 'left'\n            },\n            y: {\n                midpointOffset: 'left',\n                midpointSizeFunc: 'outerWidth',\n                rowOffset: 'top'\n            }\n        },\n\n        closestItemDirectionProps: {\n            '<': {\n                step: -1,\n                isNextRow: function(a, b) {\n                    return (a < b);\n                },\n                isWrongDirection: function(a, b) {\n                    return (a > b);\n                }\n            },\n            '>': {\n                step: 1,\n                isNextRow: function(a, b) {\n                    return (a > b);\n                },\n                isWrongDirection: function(a, b) {\n                    return (a < b);\n                }\n            }\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Select Menu\n */\nGarnish.SelectMenu = Garnish.Menu.extend(\n    {\n        /**\n         * Constructor\n         */\n        init: function(btn, options, settings, callback) {\n            // argument mapping\n            if (typeof settings == 'function') {\n                // (btn, options, callback)\n                callback = settings;\n                settings = {};\n            }\n\n            settings = $.extend({}, Garnish.SelectMenu.defaults, settings);\n\n            this.base(btn, options, settings, callback);\n\n            this.selected = -1;\n        },\n\n        /**\n         * Build\n         */\n        build: function() {\n            this.base();\n\n            if (this.selected != -1) {\n                this._addSelectedOptionClass(this.selected);\n            }\n        },\n\n        /**\n         * Select\n         */\n        select: function(option) {\n            // ignore if it's already selected\n            if (option == this.selected) {\n                return;\n            }\n\n            if (this.dom.ul) {\n                if (this.selected != -1) {\n                    this.dom.options[this.selected].className = '';\n                }\n\n                this._addSelectedOptionClass(option);\n            }\n\n            this.selected = option;\n\n            // set the button text to the selected option\n            this.setBtnText($(this.options[option].label).text());\n\n            this.base(option);\n        },\n\n        /**\n         * Add Selected Option Class\n         */\n        _addSelectedOptionClass: function(option) {\n            this.dom.options[option].className = 'sel';\n        },\n\n        /**\n         * Set Button Text\n         */\n        setBtnText: function(text) {\n            this.dom.$btnLabel.text(text);\n        }\n\n    },\n    {\n        defaults: {\n            ulClass: 'menu select'\n        }\n    }\n);\n","/**\n * Garnish UI toolkit\n *\n * @copyright 2013 Pixel & Tonic, Inc.. All rights reserved.\n * @author    Brandon Kelly <brandon@pixelandtonic.com>\n * @version   0.1.10\n * @license   MIT\n */\n(function($){\n\n/*!\r\n\tBase.js, version 1.1a\r\n\tCopyright 2006-2010, Dean Edwards\r\n\tLicense: http://www.opensource.org/licenses/mit-license.php\r\n*/\r\n\r\nvar Base = function() {\r\n\t// dummy\r\n};\r\n\r\nBase.extend = function(_instance, _static) { // subclass\r\n\tvar extend = Base.prototype.extend;\r\n\r\n\t// build the prototype\r\n\tBase._prototyping = true;\r\n\tvar proto = new this;\r\n\textend.call(proto, _instance);\r\n\tproto.base = function() {\r\n\t\t// call this method from any other method to invoke that method's ancestor\r\n\t};\r\n\tdelete Base._prototyping;\r\n\r\n\t// create the wrapper for the constructor function\r\n\t//var constructor = proto.constructor.valueOf(); //-dean\r\n\tvar constructor = proto.constructor;\r\n\tvar klass = proto.constructor = function() {\r\n\t\tif (!Base._prototyping) {\r\n\t\t\tif (this._constructing || this.constructor == klass) { // instantiation\r\n\t\t\t\tthis._constructing = true;\r\n\t\t\t\tconstructor.apply(this, arguments);\r\n\t\t\t\tdelete this._constructing;\r\n\t\t\t} else if (arguments[0] != null) { // casting\r\n\t\t\t\treturn (arguments[0].extend || extend).call(arguments[0], proto);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// build the class interface\r\n\tklass.ancestor = this;\r\n\tklass.extend = this.extend;\r\n\tklass.forEach = this.forEach;\r\n\tklass.implement = this.implement;\r\n\tklass.prototype = proto;\r\n\tklass.toString = this.toString;\r\n\tklass.valueOf = function(type) {\r\n\t\t//return (type == \"object\") ? klass : constructor; //-dean\r\n\t\treturn (type == \"object\") ? klass : constructor.valueOf();\r\n\t};\r\n\textend.call(klass, _static);\r\n\t// class initialisation\r\n\tif (typeof klass.init == \"function\") klass.init();\r\n\treturn klass;\r\n};\r\n\r\nBase.prototype = {\r\n\textend: function(source, value) {\r\n\t\tif (arguments.length > 1) { // extending with a name/value pair\r\n\t\t\tvar ancestor = this[source];\r\n\t\t\tif (ancestor && (typeof value == \"function\") && // overriding a method?\r\n\t\t\t\t// the valueOf() comparison is to avoid circular references\r\n\t\t\t\t(!ancestor.valueOf || ancestor.valueOf() != value.valueOf()) &&\r\n\t\t\t\t/\\bbase\\b/.test(value)) {\r\n\t\t\t\t// get the underlying method\r\n\t\t\t\tvar method = value.valueOf();\r\n\t\t\t\t// override\r\n\t\t\t\tvalue = function() {\r\n\t\t\t\t\tvar previous = this.base || Base.prototype.base;\r\n\t\t\t\t\tthis.base = ancestor;\r\n\t\t\t\t\tvar returnValue = method.apply(this, arguments);\r\n\t\t\t\t\tthis.base = previous;\r\n\t\t\t\t\treturn returnValue;\r\n\t\t\t\t};\r\n\t\t\t\t// point to the underlying method\r\n\t\t\t\tvalue.valueOf = function(type) {\r\n\t\t\t\t\treturn (type == \"object\") ? value : method;\r\n\t\t\t\t};\r\n\t\t\t\tvalue.toString = Base.toString;\r\n\t\t\t}\r\n\t\t\tthis[source] = value;\r\n\t\t} else if (source) { // extending with an object literal\r\n\t\t\tvar extend = Base.prototype.extend;\r\n\t\t\t// if this object has a customised extend method then use it\r\n\t\t\tif (!Base._prototyping && typeof this != \"function\") {\r\n\t\t\t\textend = this.extend || extend;\r\n\t\t\t}\r\n\t\t\tvar proto = {toSource: null};\r\n\t\t\t// do the \"toString\" and other methods manually\r\n\t\t\tvar hidden = [\"constructor\", \"toString\", \"valueOf\"];\r\n\t\t\t// if we are prototyping then include the constructor\r\n\t\t\tvar i = Base._prototyping ? 0 : 1;\r\n\t\t\twhile (key = hidden[i++]) {\r\n\t\t\t\tif (source[key] != proto[key]) {\r\n\t\t\t\t\textend.call(this, key, source[key]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// copy each of the source object's properties to this object\r\n\t\t\tfor (var key in source) {\r\n\t\t\t\tif (!proto[key]) {\r\n\t\t\t\t\tvar desc = Object.getOwnPropertyDescriptor(source, key);\r\n\t\t\t\t\tif (typeof desc.value != typeof undefined) {\r\n\t\t\t\t\t\t// set the value normally in case it's a function that needs to be overwritten\r\n\t\t\t\t\t\textend.call(this, key, desc.value);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// set it while maintaining the original descriptor settings\r\n\t\t\t\t\t\tObject.defineProperty(this, key, desc);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n};\r\n\r\n// initialise\r\nBase = Base.extend({\r\n\tconstructor: function() {\r\n\t\tthis.extend(arguments[0]);\r\n\t}\r\n}, {\r\n\tancestor: Object,\r\n\tversion: \"1.1\",\r\n\r\n\tforEach: function(object, block, context) {\r\n\t\tfor (var key in object) {\r\n\t\t\tif (this.prototype[key] === undefined) {\r\n\t\t\t\tblock.call(context, object[key], key, object);\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\timplement: function() {\r\n\t\tfor (var i = 0; i < arguments.length; i++) {\r\n\t\t\tif (typeof arguments[i] == \"function\") {\r\n\t\t\t\t// if it's a function, call it\r\n\t\t\t\targuments[i](this.prototype);\r\n\t\t\t} else {\r\n\t\t\t\t// add the interface using the extend method\r\n\t\t\t\tthis.prototype.extend(arguments[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t},\r\n\r\n\ttoString: function() {\r\n\t\treturn String(this.valueOf());\r\n\t}\r\n});\r\n\n/**\n * @namespace Garnish\n */\n\n// Bail if Garnish is already defined\nif (Garnish !== undefined) {\n    throw 'Garnish is already defined!';\n}\n\nGarnish = {\n\n    // jQuery objects for common elements\n    $win: $(window),\n    $doc: $(document),\n    $bod: $(document.body)\n\n};\n\nGarnish.rtl = Garnish.$bod.hasClass('rtl');\nGarnish.ltr = !Garnish.rtl;\n\nGarnish = $.extend(Garnish, {\n\n    $scrollContainer: Garnish.$win,\n\n    // Key code constants\n    DELETE_KEY: 8,\n    SHIFT_KEY: 16,\n    CTRL_KEY: 17,\n    ALT_KEY: 18,\n    RETURN_KEY: 13,\n    ESC_KEY: 27,\n    SPACE_KEY: 32,\n    LEFT_KEY: 37,\n    UP_KEY: 38,\n    RIGHT_KEY: 39,\n    DOWN_KEY: 40,\n    A_KEY: 65,\n    S_KEY: 83,\n    CMD_KEY: 91,\n\n    // Mouse button constants\n    PRIMARY_CLICK: 1,\n    SECONDARY_CLICK: 3,\n\n    // Axis constants\n    X_AXIS: 'x',\n    Y_AXIS: 'y',\n\n    FX_DURATION: 100,\n\n    // Node types\n    TEXT_NODE: 3,\n\n    /**\n     * Logs a message to the browser's console, if the browser has one.\n     *\n     * @param string msg\n     */\n    log: function(msg) {\n        if (console !== undefined && typeof console.log == 'function') {\n            console.log(msg);\n        }\n    },\n\n    _isMobileBrowser: null,\n    _isMobileOrTabletBrowser: null,\n\n    /**\n     * Returns whether this is a mobile browser.\n     * Detection script courtesy of http://detectmobilebrowsers.com\n     *\n     * Last updated: 2014-11-24\n     *\n     * @param bool detectTablets\n     * @return bool\n     */\n    isMobileBrowser: function(detectTablets) {\n        var key = detectTablets ? '_isMobileOrTabletBrowser' : '_isMobileBrowser';\n\n        if (Garnish[key] === null) {\n            var a = navigator.userAgent || navigator.vendor || window.opera;\n            Garnish[key] = ((new RegExp('(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino' + (detectTablets ? '|android|ipad|playbook|silk' : ''), 'i')).test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0, 4)));\n        }\n\n        return Garnish[key];\n    },\n\n    /**\n     * Returns whether a variable is an array.\n     *\n     * @param mixed val\n     * @return bool\n     */\n    isArray: function(val) {\n        return (val instanceof Array);\n    },\n\n    /**\n     * Returns whether a variable is a jQuery collection.\n     *\n     * @param mixed val\n     * @return bool\n     */\n    isJquery: function(val) {\n        return (val instanceof jQuery);\n    },\n\n    /**\n     * Returns whether a variable is a string.\n     *\n     * @param mixed val\n     * @return bool\n     */\n    isString: function(val) {\n        return (typeof val == 'string');\n    },\n\n    /**\n     * Returns whether an element has an attribute.\n     *\n     * @see http://stackoverflow.com/questions/1318076/jquery-hasattr-checking-to-see-if-there-is-an-attribute-on-an-element/1318091#1318091\n     */\n    hasAttr: function(elem, attr) {\n        var val = $(elem).attr(attr);\n        return (val !== undefined && val !== false);\n    },\n\n    /**\n     * Returns whether something is a text node.\n     *\n     * @param object elem\n     * @return bool\n     */\n    isTextNode: function(elem) {\n        return (elem.nodeType == Garnish.TEXT_NODE);\n    },\n\n    /**\n     * Returns the offset of an element within the scroll container, whether that's the window or something else\n     */\n    getOffset: function(elem) {\n        this.getOffset._offset = $(elem).offset();\n\n        if (Garnish.$scrollContainer[0] != Garnish.$win[0]) {\n            this.getOffset._offset.top += Garnish.$scrollContainer.scrollTop();\n            this.getOffset._offset.left += Garnish.$scrollContainer.scrollLeft();\n        }\n\n        return this.getOffset._offset;\n    },\n\n    /**\n     * Returns the distance between two coordinates.\n     *\n     * @param int x1 The first coordinate's X position.\n     * @param int y1 The first coordinate's Y position.\n     * @param int x2 The second coordinate's X position.\n     * @param int y2 The second coordinate's Y position.\n     * @return float\n     */\n    getDist: function(x1, y1, x2, y2) {\n        return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n    },\n\n    /**\n     * Returns whether an element is touching an x/y coordinate.\n     *\n     * @param int    x    The coordinate's X position.\n     * @param int    y    The coordinate's Y position.\n     * @param object elem Either an actual element or a jQuery collection.\n     * @return bool\n     */\n    hitTest: function(x, y, elem) {\n        Garnish.hitTest._$elem = $(elem);\n        Garnish.hitTest._offset = Garnish.hitTest._$elem.offset();\n        Garnish.hitTest._x1 = Garnish.hitTest._offset.left;\n        Garnish.hitTest._y1 = Garnish.hitTest._offset.top;\n        Garnish.hitTest._x2 = Garnish.hitTest._x1 + Garnish.hitTest._$elem.outerWidth();\n        Garnish.hitTest._y2 = Garnish.hitTest._y1 + Garnish.hitTest._$elem.outerHeight();\n\n        return (x >= Garnish.hitTest._x1 && x < Garnish.hitTest._x2 && y >= Garnish.hitTest._y1 && y < Garnish.hitTest._y2);\n    },\n\n    /**\n     * Returns whether the cursor is touching an element.\n     *\n     * @param object ev   The mouse event object containing pageX and pageY properties.\n     * @param object elem Either an actual element or a jQuery collection.\n     * @return bool\n     */\n    isCursorOver: function(ev, elem) {\n        return Garnish.hitTest(ev.pageX, ev.pageY, elem);\n    },\n\n    /**\n     * Copies text styles from one element to another.\n     *\n     * @param object source The source element. Can be either an actual element or a jQuery collection.\n     * @param object target The target element. Can be either an actual element or a jQuery collection.\n     */\n    copyTextStyles: function(source, target) {\n        var $source = $(source),\n            $target = $(target);\n\n        $target.css({\n            fontFamily: $source.css('fontFamily'),\n            fontSize: $source.css('fontSize'),\n            fontWeight: $source.css('fontWeight'),\n            letterSpacing: $source.css('letterSpacing'),\n            lineHeight: $source.css('lineHeight'),\n            textAlign: $source.css('textAlign'),\n            textIndent: $source.css('textIndent'),\n            whiteSpace: $source.css('whiteSpace'),\n            wordSpacing: $source.css('wordSpacing'),\n            wordWrap: $source.css('wordWrap')\n        });\n    },\n\n    /**\n     * Returns the body's real scrollTop, discarding any window banding in Safari.\n     *\n     * @return int\n     */\n    getBodyScrollTop: function() {\n        Garnish.getBodyScrollTop._scrollTop = document.body.scrollTop;\n\n        if (Garnish.getBodyScrollTop._scrollTop < 0) {\n            Garnish.getBodyScrollTop._scrollTop = 0;\n        }\n        else {\n            Garnish.getBodyScrollTop._maxScrollTop = Garnish.$bod.outerHeight() - Garnish.$win.height();\n\n            if (Garnish.getBodyScrollTop._scrollTop > Garnish.getBodyScrollTop._maxScrollTop) {\n                Garnish.getBodyScrollTop._scrollTop = Garnish.getBodyScrollTop._maxScrollTop;\n            }\n        }\n\n        return Garnish.getBodyScrollTop._scrollTop;\n    },\n\n    requestAnimationFrame: (function() {\n            var raf = (\n                window.requestAnimationFrame ||\n                window.mozRequestAnimationFrame ||\n                window.webkitRequestAnimationFrame ||\n                function(fn) {\n                    return window.setTimeout(fn, 20);\n                }\n            );\n\n            return function(fn) {\n                return raf(fn);\n            };\n        })(),\n\n    cancelAnimationFrame: (function() {\n            var cancel = (\n                window.cancelAnimationFrame ||\n                window.mozCancelAnimationFrame ||\n                window.webkitCancelAnimationFrame ||\n                window.clearTimeout\n            );\n\n            return function(id) {\n                return cancel(id);\n            };\n        })(),\n\n    /**\n     * Scrolls a container element to an element within it.\n     *\n     * @param object container Either an actual element or a jQuery collection.\n     * @param object elem      Either an actual element or a jQuery collection.\n     */\n    scrollContainerToElement: function(container, elem) {\n        if (elem === undefined) {\n            var $elem = $(container);\n            $container = $elem.scrollParent();\n        }\n        else {\n            var $container = $(container),\n                $elem = $(elem);\n        }\n\n        if ($container.prop('nodeName') === 'HTML' || $container[0] == Garnish.$doc[0]) {\n            $container = Garnish.$win;\n        }\n\n        var scrollTop = $container.scrollTop(),\n            elemOffset = $elem.offset().top;\n\n        if ($container[0] == window) {\n            var elemScrollOffset = elemOffset - scrollTop;\n        }\n        else {\n            var elemScrollOffset = elemOffset - $container.offset().top;\n        }\n\n        var targetScrollTop = false;\n\n        // Is the element above the fold?\n        if (elemScrollOffset < 0) {\n            targetScrollTop = scrollTop + elemScrollOffset - 10;\n        }\n        else {\n            var elemHeight = $elem.outerHeight(),\n                containerHeight = ($container[0] == window ? window.innerHeight : $container[0].clientHeight);\n\n            // Is it below the fold?\n            if (elemScrollOffset + elemHeight > containerHeight) {\n                targetScrollTop = scrollTop + (elemScrollOffset - (containerHeight - elemHeight)) + 10;\n            }\n        }\n\n        if (targetScrollTop !== false) {\n            // Velocity only allows you to scroll to an arbitrary position if you're scrolling the main window\n            if ($container[0] == window) {\n                $('html').velocity('scroll', {\n                    offset: targetScrollTop + 'px',\n                    mobileHA: false\n                });\n            }\n            else {\n                $container.scrollTop(targetScrollTop);\n            }\n        }\n    },\n\n    SHAKE_STEPS: 10,\n    SHAKE_STEP_DURATION: 25,\n\n    /**\n     * Shakes an element.\n     *\n     * @param mixed  elem Either an actual element or a jQuery collection.\n     * @param string prop The property that should be adjusted (default is 'margin-left').\n     */\n    shake: function(elem, prop) {\n        var $elem = $(elem);\n\n        if (!prop) {\n            prop = 'margin-left';\n        }\n\n        var startingPoint = parseInt($elem.css(prop));\n        if (isNaN(startingPoint)) {\n            startingPoint = 0;\n        }\n\n        for (var i = 0; i <= Garnish.SHAKE_STEPS; i++) {\n            (function(i) {\n                setTimeout(function() {\n                    Garnish.shake._properties = {};\n                    Garnish.shake._properties[prop] = startingPoint + (i % 2 ? -1 : 1) * (10 - i);\n                    $elem.velocity(Garnish.shake._properties, Garnish.SHAKE_STEP_DURATION);\n                }, (Garnish.SHAKE_STEP_DURATION * i));\n            })(i);\n        }\n    },\n\n    /**\n     * Returns the first element in an array or jQuery collection.\n     *\n     * @param mixed elem\n     * @return mixed\n     */\n    getElement: function(elem) {\n        return $.makeArray(elem)[0];\n    },\n\n    /**\n     * Returns the beginning of an input's name= attribute value with any [bracktes] stripped out.\n     *\n     * @param object elem\n     * @return string|null\n     */\n    getInputBasename: function(elem) {\n        var name = $(elem).attr('name');\n\n        if (name) {\n            return name.replace(/\\[.*/, '');\n        }\n        else {\n            return null;\n        }\n    },\n\n    /**\n     * Returns an input's value as it would be POSTed.\n     * So unchecked checkboxes and radio buttons return null,\n     * and multi-selects whose name don't end in \"[]\" only return the last selection\n     *\n     * @param jQuery $input\n     * @return mixed\n     */\n    getInputPostVal: function($input) {\n        var type = $input.attr('type'),\n            val = $input.val();\n\n        // Is this an unchecked checkbox or radio button?\n        if ((type == 'checkbox' || type == 'radio')) {\n            if ($input.prop('checked')) {\n                return val;\n            }\n            else {\n                return null;\n            }\n        }\n\n        // Flatten any array values whose input name doesn't end in \"[]\"\n        //  - e.g. a multi-select\n        else if (Garnish.isArray(val) && $input.attr('name').substr(-2) != '[]') {\n            if (val.length) {\n                return val[val.length - 1];\n            }\n            else {\n                return null;\n            }\n        }\n\n        // Just return the value\n        else {\n            return val;\n        }\n    },\n\n    /**\n     * Returns the inputs within a container\n     *\n     * @param mixed container The container element. Can be either an actual element or a jQuery collection.\n     * @return jQuery\n     */\n    findInputs: function(container) {\n        return $(container).find('input,text,textarea,select,button');\n    },\n\n    /**\n     * Returns the post data within a container.\n     *\n     * @param mixed container\n     * @return array\n     */\n    getPostData: function(container) {\n        var postData = {},\n            arrayInputCounters = {},\n            $inputs = Garnish.findInputs(container);\n\n        for (var i = 0; i < $inputs.length; i++) {\n            var $input = $inputs.eq(i);\n\n            if ($input.prop('disabled')) {\n                continue;\n            }\n\n            var inputName = $input.attr('name');\n            if (!inputName) {\n                continue;\n            }\n\n            var inputVal = Garnish.getInputPostVal($input);\n            if (inputVal === null) {\n                continue;\n            }\n\n            var isArrayInput = (inputName.substr(-2) == '[]');\n\n            if (isArrayInput) {\n                // Get the cropped input name\n                var croppedName = inputName.substring(0, inputName.length - 2);\n\n                // Prep the input counter\n                if (arrayInputCounters[croppedName] === undefined) {\n                    arrayInputCounters[croppedName] = 0;\n                }\n            }\n\n            if (!Garnish.isArray(inputVal)) {\n                inputVal = [inputVal];\n            }\n\n            for (var j = 0; j < inputVal.length; j++) {\n                if (isArrayInput) {\n                    var inputName = croppedName + '[' + arrayInputCounters[croppedName] + ']';\n                    arrayInputCounters[croppedName]++;\n                }\n\n                postData[inputName] = inputVal[j];\n            }\n        }\n\n        return postData;\n    },\n\n    copyInputValues: function(source, target) {\n        var $sourceInputs = Garnish.findInputs(source),\n            $targetInputs = Garnish.findInputs(target);\n\n        for (var i = 0; i < $sourceInputs.length; i++) {\n            if ($targetInputs[i] === undefined) {\n                break;\n            }\n\n            $targetInputs.eq(i).val(\n                $sourceInputs.eq(i).val()\n            );\n        }\n    },\n\n    /**\n     * Returns whether the \"Ctrl\" key is pressed (or ⌘ if this is a Mac) for a given keyboard event\n     *\n     * @param ev The keyboard event\n     *\n     * @return boolean Whether the \"Ctrl\" key is pressed\n     */\n    isCtrlKeyPressed: function(ev) {\n        if (window.navigator.platform.match(/Mac/)) {\n            // metaKey maps to ⌘ on Macs\n            return ev.metaKey;\n        }\n        else {\n            // Both altKey and ctrlKey == true on some Windows keyboards when the right-hand ALT key is pressed\n            // so just be safe and make sure altKey == false\n            return (ev.ctrlKey && !ev.altKey);\n        }\n    }\n});\n\n\n/**\n * Garnish base class\n */\nGarnish.Base = Base.extend({\n\n    settings: null,\n\n    _eventHandlers: null,\n    _namespace: null,\n    _$listeners: null,\n    _disabled: false,\n\n    constructor: function() {\n        this._eventHandlers = [];\n        this._namespace = '.Garnish' + Math.floor(Math.random() * 1000000000);\n        this._listeners = [];\n        this.init.apply(this, arguments);\n    },\n\n    init: $.noop,\n\n    setSettings: function(settings, defaults) {\n        var baseSettings = (this.settings === undefined ? {} : this.settings);\n        this.settings = $.extend({}, baseSettings, defaults, settings);\n    },\n\n    on: function(events, data, handler) {\n        if (typeof data == 'function') {\n            handler = data;\n            data = {};\n        }\n\n        var events = this._normalizeEvents(events);\n\n        for (var i = 0; i < events.length; i++) {\n            var ev = events[i];\n\n            this._eventHandlers.push({\n                type: ev[0],\n                namespace: ev[1],\n                data: data,\n                handler: handler\n            });\n        }\n    },\n\n    off: function(events, handler) {\n        var events = this._normalizeEvents(events);\n\n        for (var i = 0; i < events.length; i++) {\n            var ev = events[i];\n\n            for (var j = this._eventHandlers.length - 1; j >= 0; j--) {\n                var eventHandler = this._eventHandlers[j];\n\n                if (eventHandler.type == ev[0] && (!ev[1] || eventHandler.namespace == ev[1]) && eventHandler.handler === handler) {\n                    this._eventHandlers.splice(j, 1);\n                }\n            }\n        }\n    },\n\n    trigger: function(type, data) {\n        var ev = {\n            type: type,\n            target: this\n        };\n\n        if (params === undefined) {\n            params = [];\n        }\n\n        for (var i = 0; i < this._eventHandlers.length; i++) {\n            var handler = this._eventHandlers[i];\n\n            if (handler.type == type) {\n                var _ev = $.extend({data: handler.data}, data, ev);\n                handler.handler(_ev)\n            }\n        }\n    },\n\n    _normalizeEvents: function(events) {\n        if (typeof events == 'string') {\n            events = events.split(' ');\n        }\n\n        for (var i = 0; i < events.length; i++) {\n            if (typeof events[i] == 'string') {\n                events[i] = events[i].split('.');\n            }\n        }\n\n        return events;\n    },\n\n    _splitEvents: function(events) {\n        if (typeof events == 'string') {\n            events = events.split(',');\n\n            for (var i = 0; i < events.length; i++) {\n                events[i] = $.trim(events[i]);\n            }\n        }\n\n        return events;\n    },\n\n    _formatEvents: function(events) {\n        var events = this._splitEvents(events).slice(0);\n\n        for (var i = 0; i < events.length; i++) {\n            events[i] += this._namespace;\n        }\n\n        return events.join(' ');\n    },\n\n    addListener: function(elem, events, data, func) {\n        var $elem = $(elem);\n\n        // Ignore if there aren't any elements\n        if (!$elem.length) {\n            return;\n        }\n\n        events = this._splitEvents(events);\n\n        // Param mapping\n        if (func === undefined && typeof data != 'object') {\n            // (elem, events, func)\n            func = data;\n            data = {};\n        }\n\n        if (typeof func == 'function') {\n            func = $.proxy(func, this);\n        }\n        else {\n            func = $.proxy(this, func);\n        }\n\n        $elem.on(this._formatEvents(events), data, $.proxy(function() {\n            if (!this._disabled) {\n                func.apply(this, arguments);\n            }\n        }, this));\n\n        // Remember that we're listening to this element\n        if ($.inArray(elem, this._listeners) == -1) {\n            this._listeners.push(elem);\n        }\n    },\n\n    removeListener: function(elem, events) {\n        $(elem).off(this._formatEvents(events));\n    },\n\n    removeAllListeners: function(elem) {\n        $(elem).off(this._namespace);\n    },\n\n    disable: function() {\n        this._disabled = true;\n    },\n\n    enable: function() {\n        this._disabled = false;\n    },\n\n    destroy: function() {\n        this.trigger('destroy');\n        this.removeAllListeners(this._listeners);\n    }\n});\n\n// Custom events\n// -----------------------------------------------------------------------------\n\nvar erd;\n\nfunction getErd() {\n    if (erd === undefined) {\n        erd = elementResizeDetectorMaker();\n    }\n\n    return erd;\n}\n\nfunction triggerResizeEvent(elem) {\n    $(elem).trigger('resize');\n};\n\n// Work them into jQuery's event system\n$.extend(jQuery.event.special, {\n    activate: {\n        setup: function(data, namespaces, eventHandle) {\n            var activateNamespace = this._namespace + '-activate';\n            var $elem = $(this);\n\n            $elem.on({\n                'mousedown.garnish-activate': function(e) {\n                    // Prevent buttons from getting focus on click\n                    e.preventDefault();\n                },\n                'click.garnish-activate': function(e) {\n                    e.preventDefault();\n\n                    if (!$elem.hasClass('disabled')) {\n                        $elem.trigger('activate');\n                    }\n                },\n                'keydown.garnish-activate': function(e) {\n                    // Ignore if the event was bubbled up, or if it wasn't the space key\n                    if (this != $elem[0] || e.keyCode != Garnish.SPACE_KEY) {\n                        return;\n                    }\n\n                    e.preventDefault();\n\n                    if (!$elem.hasClass('disabled')) {\n                        $elem.addClass('active');\n\n                        Garnish.$doc.on('keyup.garnish-activate', function(e) {\n                            $elem.removeClass('active');\n\n                            if (e.keyCode == Garnish.SPACE_KEY) {\n                                e.preventDefault();\n                                $elem.trigger('activate');\n                            }\n\n                            Garnish.$doc.off('keyup.garnish-activate');\n                        });\n                    }\n                }\n            });\n\n            if (!$elem.hasClass('disabled')) {\n                $elem.attr('tabindex', '0');\n            } else {\n                $elem.removeAttr('tabindex');\n            }\n        },\n        teardown: function() {\n            $(this).off('.garnish-activate');\n        }\n    },\n\n    textchange: {\n        setup: function(data, namespaces, eventHandle) {\n            var $elem = $(this);\n            $elem.data('garnish-textchange-value', $elem.val());\n            $elem.on('keypress.garnish-textchange keyup.garnish-textchange change.garnish-textchange blur.garnish-textchange', function(e) {\n                var val = $elem.val();\n                if (val != $elem.data('garnish-textchange-value')) {\n                    $elem.data('garnish-textchange-value', val);\n                    $elem.trigger('textchange');\n                }\n            });\n        },\n        teardown: function() {\n            $(this).off('.garnish-textchange');\n        },\n        handle: function(ev, data) {\n            var el = this;\n            var args = arguments;\n            var delay = data && data.delay !== undefined ? data.delay : (ev.data && ev.data.delay !== undefined ? ev.data.delay : null);\n            var handleObj = ev.handleObj;\n            var targetData = $.data(ev.target);\n\n            // Was this event configured with a delay?\n            if (delay) {\n                if (targetData.delayTimeout) {\n                    clearTimeout(targetData.delayTimeout);\n                }\n\n                targetData.delayTimeout = setTimeout(function() {\n                    handleObj.handler.apply(el, args);\n                }, delay);\n            } else {\n                return handleObj.handler.apply(el, args);\n            }\n        }\n    },\n\n    resize: {\n        setup: function(data, namespaces, eventHandle) {\n            // window is the only element that natively supports a resize event\n            if (this == window) {\n                return false;\n            }\n\n            $('> :last-child', this).addClass('last');\n            getErd().listenTo(this, triggerResizeEvent)\n        },\n        teardown: function() {\n            if (this == window) {\n                return false;\n            }\n\n            getErd().removeListener(this, triggerResizeEvent);\n        }\n    }\n});\n\n// Give them their own element collection chaining methods\njQuery.each(['activate', 'textchange', 'resize'], function(i, name) {\n    jQuery.fn[name] = function(data, fn) {\n        return arguments.length > 0 ?\n            this.on(name, null, data, fn) :\n            this.trigger(name);\n    };\n});\n\n/** global: Garnish */\n/**\n * Base drag class\n *\n * Does all the grunt work for manipulating elements via click-and-drag,\n * while leaving the actual element manipulation up to a subclass.\n */\nGarnish.BaseDrag = Garnish.Base.extend(\n    {\n        $items: null,\n\n        dragging: false,\n\n        mousedownX: null,\n        mousedownY: null,\n        realMouseX: null,\n        realMouseY: null,\n        mouseX: null,\n        mouseY: null,\n        mouseDistX: null,\n        mouseDistY: null,\n        mouseOffsetX: null,\n        mouseOffsetY: null,\n\n        $targetItem: null,\n\n        scrollProperty: null,\n        scrollAxis: null,\n        scrollDist: null,\n        scrollProxy: null,\n        scrollFrame: null,\n\n        _: null,\n\n        /**\n         * Constructor\n         *\n         * @param mixed  items    Elements that should be draggable right away. (Can be skipped.)\n         * @param object settings Any settings that should override the defaults.\n         */\n        init: function(items, settings) {\n            // Param mapping\n            if (settings === undefined && $.isPlainObject(items)) {\n                // (settings)\n                settings = items;\n                items = null;\n            }\n\n            this.settings = $.extend({}, Garnish.BaseDrag.defaults, settings);\n\n            this.$items = $();\n            this._ = {};\n\n            if (items) {\n                this.addItems(items);\n            }\n        },\n\n        /**\n         * Returns whether dragging is allowed right now.\n         */\n        allowDragging: function() {\n            return true;\n        },\n\n        /**\n         * Start Dragging\n         */\n        startDragging: function() {\n            this.dragging = true;\n            this.onDragStart();\n        },\n\n        /**\n         * Drag\n         */\n        drag: function(didMouseMove) {\n            if (didMouseMove) {\n                // Is the mouse up against one of the window edges?\n                this.drag._scrollProperty = null;\n\n                if (this.settings.axis != Garnish.X_AXIS) {\n                    // Scrolling up?\n                    this.drag._winScrollTop = Garnish.$win.scrollTop();\n                    this.drag._minMouseScrollY = this.drag._winScrollTop + Garnish.BaseDrag.windowScrollTargetSize;\n\n                    if (this.mouseY < this.drag._minMouseScrollY) {\n                        this.drag._scrollProperty = 'scrollTop';\n                        this.drag._scrollAxis = 'Y';\n                        this.drag._scrollDist = Math.round((this.mouseY - this.drag._minMouseScrollY) / 2);\n                    }\n                    else {\n                        // Scrolling down?\n                        this.drag._maxMouseScrollY = this.drag._winScrollTop + Garnish.$win.height() - Garnish.BaseDrag.windowScrollTargetSize;\n\n                        if (this.mouseY > this.drag._maxMouseScrollY) {\n                            this.drag._scrollProperty = 'scrollTop';\n                            this.drag._scrollAxis = 'Y';\n                            this.drag._scrollDist = Math.round((this.mouseY - this.drag._maxMouseScrollY) / 2);\n                        }\n                    }\n                }\n\n                if (!this.drag._scrollProperty && this.settings.axis != Garnish.Y_AXIS) {\n                    // Scrolling left?\n                    this.drag._winScrollLeft = Garnish.$win.scrollLeft();\n                    this.drag._minMouseScrollX = this.drag._winScrollLeft + Garnish.BaseDrag.windowScrollTargetSize;\n\n                    if (this.mouseX < this.drag._minMouseScrollX) {\n                        this.drag._scrollProperty = 'scrollLeft';\n                        this.drag._scrollAxis = 'X';\n                        this.drag._scrollDist = Math.round((this.mouseX - this.drag._minMouseScrollX) / 2);\n                    }\n                    else {\n                        // Scrolling right?\n                        this.drag._maxMouseScrollX = this.drag._winScrollLeft + Garnish.$win.width() - Garnish.BaseDrag.windowScrollTargetSize;\n\n                        if (this.mouseX > this.drag._maxMouseScrollX) {\n                            this.drag._scrollProperty = 'scrollLeft';\n                            this.drag._scrollAxis = 'X';\n                            this.drag._scrollDist = Math.round((this.mouseX - this.drag._maxMouseScrollX) / 2);\n                        }\n                    }\n                }\n\n                if (this.drag._scrollProperty) {\n                    // Are we starting to scroll now?\n                    if (!this.scrollProperty) {\n                        if (!this.scrollProxy) {\n                            this.scrollProxy = $.proxy(this, '_scrollWindow');\n                        }\n\n                        if (this.scrollFrame) {\n                            Garnish.cancelAnimationFrame(this.scrollFrame);\n                            this.scrollFrame = null;\n                        }\n\n                        this.scrollFrame = Garnish.requestAnimationFrame(this.scrollProxy);\n                    }\n\n                    this.scrollProperty = this.drag._scrollProperty;\n                    this.scrollAxis = this.drag._scrollAxis;\n                    this.scrollDist = this.drag._scrollDist;\n                }\n                else {\n                    this._cancelWindowScroll();\n                }\n            }\n\n            this.onDrag();\n        },\n\n        /**\n         * Stop Dragging\n         */\n        stopDragging: function() {\n            this.dragging = false;\n            this.onDragStop();\n\n            // Clear the scroll animation\n            this._cancelWindowScroll();\n        },\n\n        /**\n         * Add Items\n         *\n         * @param mixed items Elements that should be draggable.\n         */\n        addItems: function(items) {\n            items = $.makeArray(items);\n\n            for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n\n                // Make sure this element doesn't belong to another dragger\n                if ($.data(item, 'drag')) {\n                    Garnish.log('Element was added to more than one dragger');\n                    $.data(item, 'drag').removeItems(item);\n                }\n\n                // Add the item\n                $.data(item, 'drag', this);\n\n                // Add the listener\n                this.addListener(item, 'mousedown', '_handleMouseDown');\n            }\n\n            this.$items = this.$items.add(items);\n        },\n\n        /**\n         * Remove Items\n         *\n         * @param mixed items Elements that should no longer be draggable.\n         */\n        removeItems: function(items) {\n            items = $.makeArray(items);\n\n            for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n\n                // Make sure we actually know about this item\n                var index = $.inArray(item, this.$items);\n                if (index != -1) {\n                    this._deinitItem(item);\n                    this.$items.splice(index, 1);\n                }\n            }\n        },\n\n        /**\n         * Remove All Items\n         */\n        removeAllItems: function() {\n            for (var i = 0; i < this.$items.length; i++) {\n                this._deinitItem(this.$items[i]);\n            }\n\n            this.$items = $();\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.removeAllItems();\n            this.base();\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.trigger('dragStart');\n                this.settings.onDragStart();\n            }, this));\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.trigger('drag');\n                this.settings.onDrag();\n            }, this));\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.trigger('dragStop');\n                this.settings.onDragStop();\n            }, this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        /**\n         * Handle Mouse Down\n         */\n        _handleMouseDown: function(ev) {\n            // Ignore right clicks\n            if (ev.which != Garnish.PRIMARY_CLICK) {\n                return;\n            }\n\n            // Ignore if we already have a target\n            if (this.$targetItem) {\n                return;\n            }\n\n            // Ignore if they didn't actually click on the handle\n            var $target = $(ev.target),\n                $handle = this._getItemHandle(ev.currentTarget);\n\n            if (!$target.is($handle) && !$target.closest($handle).length) {\n                return;\n            }\n\n            // Make sure the target isn't a button (unless the button is the handle)\n            if (ev.currentTarget != ev.target && this.settings.ignoreHandleSelector) {\n                if (\n                    $target.is(this.settings.ignoreHandleSelector) ||\n                    $target.closest(this.settings.ignoreHandleSelector).length\n                ) {\n                    return;\n                }\n            }\n\n            ev.preventDefault();\n\n            // Make sure that dragging is allowed right now\n            if (!this.allowDragging()) {\n                return;\n            }\n\n            // Capture the target\n            this.$targetItem = $(ev.currentTarget);\n\n            // Capture the current mouse position\n            this.mousedownX = this.mouseX = ev.pageX;\n            this.mousedownY = this.mouseY = ev.pageY;\n\n            // Capture the difference between the mouse position and the target item's offset\n            var offset = this.$targetItem.offset();\n            this.mouseOffsetX = ev.pageX - offset.left;\n            this.mouseOffsetY = ev.pageY - offset.top;\n\n            // Listen for mousemove, mouseup\n            this.addListener(Garnish.$doc, 'mousemove', '_handleMouseMove');\n            this.addListener(Garnish.$doc, 'mouseup', '_handleMouseUp');\n        },\n\n        _getItemHandle: function(item) {\n            if (this.settings.handle) {\n                if (typeof this.settings.handle == 'object') {\n                    return $(this.settings.handle);\n                }\n\n                if (typeof this.settings.handle == 'string') {\n                    return $(this.settings.handle, item);\n                }\n\n                if (typeof this.settings.handle == 'function') {\n                    return $(this.settings.handle(item));\n                }\n            }\n\n            return $(item);\n        },\n\n        /**\n         * Handle Mouse Move\n         */\n        _handleMouseMove: function(ev) {\n            ev.preventDefault();\n\n            this.realMouseX = ev.pageX;\n            this.realMouseY = ev.pageY;\n\n            if (this.settings.axis != Garnish.Y_AXIS) {\n                this.mouseX = ev.pageX;\n            }\n\n            if (this.settings.axis != Garnish.X_AXIS) {\n                this.mouseY = ev.pageY;\n            }\n\n            this.mouseDistX = this.mouseX - this.mousedownX;\n            this.mouseDistY = this.mouseY - this.mousedownY;\n\n            if (!this.dragging) {\n                // Has the mouse moved far enough to initiate dragging yet?\n                this._handleMouseMove._mouseDist = Garnish.getDist(this.mousedownX, this.mousedownY, this.realMouseX, this.realMouseY);\n\n                if (this._handleMouseMove._mouseDist >= Garnish.BaseDrag.minMouseDist) {\n                    this.startDragging();\n                }\n            }\n\n            if (this.dragging) {\n                this.drag(true);\n            }\n        },\n\n        /**\n         * Handle Moues Up\n         */\n        _handleMouseUp: function(ev) {\n            // Unbind the document events\n            this.removeAllListeners(Garnish.$doc);\n\n            if (this.dragging) {\n                this.stopDragging();\n            }\n\n            this.$targetItem = null;\n        },\n\n        /**\n         * Scroll Window\n         */\n        _scrollWindow: function() {\n            this._.scrollPos = Garnish.$scrollContainer[this.scrollProperty]();\n            Garnish.$scrollContainer[this.scrollProperty](this._.scrollPos + this.scrollDist);\n\n            this['mouse' + this.scrollAxis] -= this._.scrollPos - Garnish.$scrollContainer[this.scrollProperty]();\n            this['realMouse' + this.scrollAxis] = this['mouse' + this.scrollAxis];\n\n            this.drag();\n\n            this.scrollFrame = Garnish.requestAnimationFrame(this.scrollProxy);\n        },\n\n        /**\n         * Cancel Window Scroll\n         */\n        _cancelWindowScroll: function() {\n            if (this.scrollFrame) {\n                Garnish.cancelAnimationFrame(this.scrollFrame);\n                this.scrollFrame = null;\n            }\n\n            this.scrollProperty = null;\n            this.scrollAxis = null;\n            this.scrollDist = null;\n        },\n\n        /**\n         * Deinitialize an item.\n         */\n        _deinitItem: function(item) {\n            this.removeAllListeners(item);\n            $.removeData(item, 'drag');\n        }\n    },\n    {\n        minMouseDist: 1,\n        windowScrollTargetSize: 25,\n\n        defaults: {\n            handle: null,\n            axis: null,\n            ignoreHandleSelector: 'input, textarea, button, select, .btn',\n\n            onDragStart: $.noop,\n            onDrag: $.noop,\n            onDragStop: $.noop\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Checkbox select class\n */\nGarnish.CheckboxSelect = Garnish.Base.extend(\n    {\n        $container: null,\n        $all: null,\n        $options: null,\n\n        init: function(container) {\n            this.$container = $(container);\n\n            // Is this already a checkbox select?\n            if (this.$container.data('checkboxSelect')) {\n                Garnish.log('Double-instantiating a checkbox select on an element');\n                this.$container.data('checkbox-select').destroy();\n            }\n\n            this.$container.data('checkboxSelect', this);\n\n            var $checkboxes = this.$container.find('input');\n            this.$all = $checkboxes.filter('.all:first');\n            this.$options = $checkboxes.not(this.$all);\n\n            this.addListener(this.$all, 'change', 'onAllChange');\n        },\n\n        onAllChange: function() {\n            var isAllChecked = this.$all.prop('checked');\n\n            this.$options.prop({\n                checked: isAllChecked,\n                disabled: isAllChecked\n            });\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$container.removeData('checkboxSelect');\n            this.base();\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Context Menu\n */\nGarnish.ContextMenu = Garnish.Base.extend(\n    {\n        $target: null,\n        options: null,\n        $menu: null,\n        showingMenu: false,\n\n        /**\n         * Constructor\n         */\n        init: function(target, options, settings) {\n            this.$target = $(target);\n\n            // Is this already a context menu target?\n            if (this.$target.data('contextmenu')) {\n                Garnish.log('Double-instantiating a context menu on an element');\n                this.$target.data('contextmenu').destroy();\n            }\n\n            this.$target.data('contextmenu', this);\n\n            this.options = options;\n            this.setSettings(settings, Garnish.ContextMenu.defaults);\n\n            Garnish.ContextMenu.counter++;\n\n            this.enable();\n        },\n\n        /**\n         * Build Menu\n         */\n        buildMenu: function() {\n            this.$menu = $('<div class=\"' + this.settings.menuClass + '\" style=\"display: none\" />');\n\n            var $ul = $('<ul/>').appendTo(this.$menu);\n\n            for (var i in this.options) {\n                var option = this.options[i];\n\n                if (option == '-') {\n                    // Create a new <ul>\n                    $('<hr/>').appendTo(this.$menu);\n                    $ul = $('<ul/>').appendTo(this.$menu);\n                }\n                else {\n                    var $li = $('<li></li>').appendTo($ul),\n                        $a = $('<a>' + option.label + '</a>').appendTo($li);\n\n                    if (typeof option.onClick == 'function') {\n                        // maintain the current $a and options.onClick variables\n                        (function($a, onClick) {\n                            setTimeout($.proxy(function() {\n                                $a.mousedown($.proxy(function(ev) {\n                                    this.hideMenu();\n                                    // call the onClick callback, with the scope set to the item,\n                                    // and pass it the event with currentTarget set to the item as well\n                                    onClick.call(this.currentTarget, $.extend(ev, {currentTarget: this.currentTarget}));\n                                }, this));\n                            }, this), 1);\n                        }).call(this, $a, option.onClick);\n                    }\n                }\n            }\n        },\n\n        /**\n         * Show Menu\n         */\n        showMenu: function(ev) {\n            // Ignore left mouse clicks\n            if (ev.type == 'mousedown' && ev.which != Garnish.SECONDARY_CLICK) {\n                return;\n            }\n\n            if (ev.type == 'contextmenu') {\n                // Prevent the real context menu from showing\n                ev.preventDefault();\n            }\n\n            // Ignore if already showing\n            if (this.showing && ev.currentTarget == this.currentTarget) {\n                return;\n            }\n\n            this.currentTarget = ev.currentTarget;\n\n            if (!this.$menu) {\n                this.buildMenu();\n            }\n\n            this.$menu.appendTo(document.body);\n            this.$menu.show();\n            this.$menu.css({left: ev.pageX + 1, top: ev.pageY - 4});\n\n            this.showing = true;\n\n            setTimeout($.proxy(function() {\n                this.addListener(Garnish.$doc, 'mousedown', 'hideMenu');\n            }, this), 0);\n        },\n\n        /**\n         * Hide Menu\n         */\n        hideMenu: function() {\n            this.removeListener(Garnish.$doc, 'mousedown');\n            this.$menu.hide();\n            this.showing = false;\n        },\n\n        /**\n         * Enable\n         */\n        enable: function() {\n            this.addListener(this.$target, 'contextmenu,mousedown', 'showMenu');\n        },\n\n        /**\n         * Disable\n         */\n        disable: function() {\n            this.removeListener(this.$target, 'contextmenu,mousedown');\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$target.removeData('contextmenu');\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            menuClass: 'menu'\n        },\n        counter: 0\n    }\n);\n\n/** global: Garnish */\n/**\n * Drag class\n *\n * Builds on the BaseDrag class by \"picking up\" the selceted element(s),\n * without worrying about what to do when an element is being dragged.\n */\nGarnish.Drag = Garnish.BaseDrag.extend(\n    {\n        targetItemWidth: null,\n        targetItemHeight: null,\n        targetItemPositionInDraggee: null,\n\n        $draggee: null,\n\n        otherItems: null,\n        totalOtherItems: null,\n\n        helpers: null,\n        helperTargets: null,\n        helperPositions: null,\n        helperLagIncrement: null,\n        updateHelperPosProxy: null,\n        updateHelperPosFrame: null,\n\n        lastMouseX: null,\n        lastMouseY: null,\n\n        _returningHelpersToDraggees: false,\n\n        /**\n         * Constructor\n         *\n         * @param mixed  items    Elements that should be draggable right away. (Can be skipped.)\n         * @param object settings Any settings that should override the defaults.\n         */\n        init: function(items, settings) {\n            // Param mapping\n            if (settings === undefined && $.isPlainObject(items)) {\n                // (settings)\n                settings = items;\n                items = null;\n            }\n\n            settings = $.extend({}, Garnish.Drag.defaults, settings);\n            this.base(items, settings);\n        },\n\n        /**\n         * Returns whether dragging is allowed right now.\n         */\n        allowDragging: function() {\n            // Don't allow dragging if we're in the middle of animating the helpers back to the draggees\n            return !this._returningHelpersToDraggees;\n        },\n\n        /**\n         * Start Dragging\n         */\n        startDragging: function() {\n            // Reset some things\n            this.helpers = [];\n            this.helperTargets = [];\n            this.helperPositions = [];\n            this.lastMouseX = this.lastMouseY = null;\n\n            // Capture the target item's width/height\n            this.targetItemWidth = this.$targetItem.outerWidth();\n            this.targetItemHeight = this.$targetItem.outerHeight();\n\n            // Save the draggee's display style (block/table-row) so we can re-apply it later\n            this.draggeeDisplay = this.$targetItem.css('display');\n\n            // Set the $draggee\n            this.setDraggee(this.findDraggee());\n\n            // Create an array of all the other items\n            this.otherItems = [];\n\n            for (var i = 0; i < this.$items.length; i++) {\n                var item = this.$items[i];\n\n                if ($.inArray(item, this.$draggee) == -1) {\n                    this.otherItems.push(item);\n                }\n            }\n            ;\n\n            this.totalOtherItems = this.otherItems.length;\n\n            // Keep the helpers following the cursor, with a little lag to smooth it out\n            if (!this.updateHelperPosProxy) {\n                this.updateHelperPosProxy = $.proxy(this, '_updateHelperPos');\n            }\n\n            this.helperLagIncrement = this.helpers.length == 1 ? 0 : this.settings.helperLagIncrementDividend / (this.helpers.length - 1);\n            this.updateHelperPosFrame = Garnish.requestAnimationFrame(this.updateHelperPosProxy);\n\n            this.base();\n        },\n\n        /**\n         * Sets the draggee.\n         */\n        setDraggee: function($draggee) {\n            // Record the target item's position in the draggee\n            this.targetItemPositionInDraggee = $.inArray(this.$targetItem[0], $draggee.add(this.$targetItem[0]));\n\n            // Keep the target item at the front of the list\n            this.$draggee = $([this.$targetItem[0]].concat($draggee.not(this.$targetItem).toArray()));\n\n            // Create the helper(s)\n            if (this.settings.singleHelper) {\n                this._createHelper(0);\n            }\n            else {\n                for (var i = 0; i < this.$draggee.length; i++) {\n                    this._createHelper(i);\n                }\n            }\n\n            if (this.settings.removeDraggee) {\n                this.$draggee.hide();\n            }\n            else if (this.settings.collapseDraggees) {\n                this.$targetItem.css('visibility', 'hidden');\n                this.$draggee.not(this.$targetItem).hide();\n            }\n            else {\n                this.$draggee.css('visibility', 'hidden');\n            }\n        },\n\n        /**\n         * Appends additional items to the draggee.\n         */\n        appendDraggee: function($newDraggee) {\n            if (!$newDraggee.length) {\n                return;\n            }\n\n            if (!this.settings.collapseDraggees) {\n                var oldLength = this.$draggee.length;\n            }\n\n            this.$draggee = $(this.$draggee.toArray().concat($newDraggee.toArray()));\n\n            // Create new helpers?\n            if (!this.settings.collapseDraggees) {\n                var newLength = this.$draggee.length;\n\n                for (var i = oldLength; i < newLength; i++) {\n                    this._createHelper(i);\n                }\n            }\n\n            if (this.settings.removeDraggee || this.settings.collapseDraggees) {\n                $newDraggee.hide();\n            }\n            else {\n                $newDraggee.css('visibility', 'hidden');\n            }\n        },\n\n        /**\n         * Drag\n         */\n        drag: function(didMouseMove) {\n            // Update the draggee's virtual midpoint\n            this.draggeeVirtualMidpointX = this.mouseX - this.mouseOffsetX + (this.targetItemWidth / 2);\n            this.draggeeVirtualMidpointY = this.mouseY - this.mouseOffsetY + (this.targetItemHeight / 2);\n\n            this.base(didMouseMove);\n        },\n\n        /**\n         * Stop Dragging\n         */\n        stopDragging: function() {\n            // Clear the helper animation\n            Garnish.cancelAnimationFrame(this.updateHelperPosFrame);\n\n            this.base();\n        },\n\n        /**\n         * Identifies the item(s) that are being dragged.\n         */\n        findDraggee: function() {\n            switch (typeof this.settings.filter) {\n                case 'function': {\n                    return this.settings.filter();\n                }\n\n                case 'string': {\n                    return this.$items.filter(this.settings.filter);\n                }\n\n                default: {\n                    return this.$targetItem;\n                }\n            }\n        },\n\n        /**\n         * Returns the helper’s target X position\n         */\n        getHelperTargetX: function() {\n            return this.mouseX - this.mouseOffsetX;\n        },\n\n        /**\n         * Returns the helper’s target Y position\n         */\n        getHelperTargetY: function() {\n            return this.mouseY - this.mouseOffsetY;\n        },\n\n        /**\n         * Return Helpers to Draggees\n         */\n        returnHelpersToDraggees: function() {\n            this._returningHelpersToDraggees = true;\n\n            for (var i = 0; i < this.helpers.length; i++) {\n                var $draggee = this.$draggee.eq(i),\n                    $helper = this.helpers[i];\n\n                $draggee.css({\n                    display: this.draggeeDisplay,\n                    visibility: 'hidden'\n                });\n\n                var draggeeOffset = $draggee.offset();\n\n                if (i == 0) {\n                    var callback = $.proxy(this, '_showDraggee');\n                }\n                else {\n                    var callback = null;\n                }\n\n                $helper.velocity({left: draggeeOffset.left, top: draggeeOffset.top}, Garnish.FX_DURATION, callback);\n            }\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        onReturnHelpersToDraggees: function() {\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.trigger('returnHelpersToDraggees');\n                this.settings.onReturnHelpersToDraggees();\n            }, this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        /**\n         * Creates a helper.\n         */\n        _createHelper: function(i) {\n            var $draggee = this.$draggee.eq(i),\n                $draggeeHelper = $draggee.clone().addClass('draghelper');\n\n            if (this.settings.copyDraggeeInputValuesToHelper) {\n                Garnish.copyInputValues($draggee, $draggeeHelper);\n            }\n\n            // Remove any name= attributes so radio buttons don't lose their values\n            $draggeeHelper.find('[name]').attr('name', '');\n\n            $draggeeHelper.css({\n                width: $draggee.width() + 1, // Prevent the brower from wrapping text if the width was actually a fraction of a pixel larger\n                height: $draggee.height(),\n                margin: 0\n            });\n\n            if (this.settings.helper) {\n                if (typeof this.settings.helper == 'function') {\n                    $draggeeHelper = this.settings.helper($draggeeHelper);\n                }\n                else {\n                    $draggeeHelper = $(this.settings.helper).append($draggeeHelper);\n                }\n            }\n\n            $draggeeHelper.appendTo(Garnish.$bod);\n\n            var helperPos = this._getHelperTarget(i);\n\n            $draggeeHelper.css({\n                position: 'absolute',\n                top: helperPos.top,\n                left: helperPos.left,\n                zIndex: this.settings.helperBaseZindex + this.$draggee.length - i,\n                opacity: this.settings.helperOpacity\n            });\n\n            this.helperPositions[i] = {\n                top: helperPos.top,\n                left: helperPos.left\n            };\n\n            this.helpers.push($draggeeHelper);\n        },\n\n        /**\n         * Update Helper Position\n         */\n        _updateHelperPos: function() {\n            // Has the mouse moved?\n            if (this.mouseX !== this.lastMouseX || this.mouseY !== this.lastMouseY) {\n                // Get the new target helper positions\n                for (this._updateHelperPos._i = 0; this._updateHelperPos._i < this.helpers.length; this._updateHelperPos._i++) {\n                    this.helperTargets[this._updateHelperPos._i] = this._getHelperTarget(this._updateHelperPos._i);\n                }\n\n                this.lastMouseX = this.mouseX;\n                this.lastMouseY = this.mouseY;\n            }\n\n            // Gravitate helpers toward their target positions\n            for (this._updateHelperPos._j = 0; this._updateHelperPos._j < this.helpers.length; this._updateHelperPos._j++) {\n                this._updateHelperPos._lag = this.settings.helperLagBase + (this.helperLagIncrement * this._updateHelperPos._j);\n\n                this.helperPositions[this._updateHelperPos._j] = {\n                    left: this.helperPositions[this._updateHelperPos._j].left + ((this.helperTargets[this._updateHelperPos._j].left - this.helperPositions[this._updateHelperPos._j].left) / this._updateHelperPos._lag),\n                    top: this.helperPositions[this._updateHelperPos._j].top + ((this.helperTargets[this._updateHelperPos._j].top - this.helperPositions[this._updateHelperPos._j].top) / this._updateHelperPos._lag)\n                };\n\n                this.helpers[this._updateHelperPos._j].css(this.helperPositions[this._updateHelperPos._j]);\n            }\n\n            // Let's do this again on the next frame!\n            this.updateHelperPosFrame = Garnish.requestAnimationFrame(this.updateHelperPosProxy);\n        },\n\n        /**\n         * Get the helper position for a draggee helper\n         */\n        _getHelperTarget: function(i) {\n            return {\n                left: this.getHelperTargetX() + (this.settings.helperSpacingX * i),\n                top: this.getHelperTargetY() + (this.settings.helperSpacingY * i)\n            };\n        },\n\n        _showDraggee: function() {\n            // Remove the helpers\n            for (var i = 0; i < this.helpers.length; i++) {\n                this.helpers[i].remove();\n            }\n\n            this.helpers = null;\n\n            this.$draggee.show().css('visibility', 'inherit');\n\n            this.onReturnHelpersToDraggees();\n\n            this._returningHelpersToDraggees = false;\n        }\n    },\n    {\n        defaults: {\n            filter: null,\n            singleHelper: false,\n            collapseDraggees: false,\n            removeDraggee: false,\n            copyDraggeeInputValuesToHelper: false,\n            helperOpacity: 1,\n            helper: null,\n            helperBaseZindex: 1000,\n            helperLagBase: 1,\n            helperLagIncrementDividend: 1.5,\n            helperSpacingX: 5,\n            helperSpacingY: 5,\n            onReturnHelpersToDraggees: $.noop\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Drag-and-drop class\n *\n * Builds on the Drag class by allowing you to set up \"drop targets\"\n * which the dragged elemements can be dropped onto.\n */\nGarnish.DragDrop = Garnish.Drag.extend({\n\n        $dropTargets: null,\n        $activeDropTarget: null,\n\n        /**\n         * Constructor\n         */\n        init: function(settings) {\n            settings = $.extend({}, Garnish.DragDrop.defaults, settings);\n            this.base(settings);\n        },\n\n        updateDropTargets: function() {\n            if (this.settings.dropTargets) {\n                if (typeof this.settings.dropTargets == 'function') {\n                    this.$dropTargets = $(this.settings.dropTargets());\n                }\n                else {\n                    this.$dropTargets = $(this.settings.dropTargets);\n                }\n\n                // Discard if it's an empty array\n                if (!this.$dropTargets.length) {\n                    this.$dropTargets = null;\n                }\n            }\n        },\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            this.updateDropTargets();\n            this.$activeDropTarget = null;\n            this.base();\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            if (this.$dropTargets) {\n                this.onDrag._activeDropTarget = null;\n\n                // is the cursor over any of the drop target?\n                for (this.onDrag._i = 0; this.onDrag._i < this.$dropTargets.length; this.onDrag._i++) {\n                    this.onDrag._elem = this.$dropTargets[this.onDrag._i];\n\n                    if (Garnish.hitTest(this.mouseX, this.mouseY, this.onDrag._elem)) {\n                        this.onDrag._activeDropTarget = this.onDrag._elem;\n                        break;\n                    }\n                }\n\n                // has the drop target changed?\n                if (\n                    (this.$activeDropTarget && this.onDrag._activeDropTarget != this.$activeDropTarget[0]) ||\n                    (!this.$activeDropTarget && this.onDrag._activeDropTarget !== null)\n                ) {\n                    // was there a previous one?\n                    if (this.$activeDropTarget) {\n                        this.$activeDropTarget.removeClass(this.settings.activeDropTargetClass);\n                    }\n\n                    // remember the new one\n                    if (this.onDrag._activeDropTarget) {\n                        this.$activeDropTarget = $(this.onDrag._activeDropTarget).addClass(this.settings.activeDropTargetClass);\n                    }\n                    else {\n                        this.$activeDropTarget = null;\n                    }\n\n                    this.settings.onDropTargetChange(this.$activeDropTarget);\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            if (this.$dropTargets && this.$activeDropTarget) {\n                this.$activeDropTarget.removeClass(this.settings.activeDropTargetClass);\n            }\n\n            this.base();\n        },\n\n        /**\n         * Fade Out Helpers\n         */\n        fadeOutHelpers: function() {\n            for (var i = 0; i < this.helpers.length; i++) {\n                (function($draggeeHelper) {\n                    $draggeeHelper.velocity('fadeOut', {\n                        duration: Garnish.FX_DURATION,\n                        complete: function() {\n                            $draggeeHelper.remove();\n                        }\n                    });\n                })(this.helpers[i]);\n            }\n        }\n    },\n    {\n        defaults: {\n            dropTargets: null,\n            onDropTargetChange: $.noop,\n            activeDropTargetClass: 'active'\n        }\n    });\n\n/** global: Garnish */\n/**\n * Drag-to-move clas\n *\n * Builds on the BaseDrag class by simply moving the dragged element(s) along with the mouse.\n */\nGarnish.DragMove = Garnish.BaseDrag.extend(\n    {\n        onDrag: function(items, settings) {\n            this.$targetItem.css({\n                left: this.mouseX - this.mouseOffsetX,\n                top: this.mouseY - this.mouseOffsetY\n            });\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Drag-to-sort class\n *\n * Builds on the Drag class by allowing you to sort the elements amongst themselves.\n */\nGarnish.DragSort = Garnish.Drag.extend(\n    {\n        $heightedContainer: null,\n        $insertion: null,\n        insertionVisible: false,\n        oldDraggeeIndexes: null,\n        newDraggeeIndexes: null,\n        closestItem: null,\n\n        _midpointVersion: 0,\n        _$prevItem: null,\n\n        /**\n         * Constructor\n         *\n         * @param mixed  items    Elements that should be draggable right away. (Can be skipped.)\n         * @param object settings Any settings that should override the defaults.\n         */\n        init: function(items, settings) {\n            // Param mapping\n            if (settings === undefined && $.isPlainObject(items)) {\n                // (settings)\n                settings = items;\n                items = null;\n            }\n\n            settings = $.extend({}, Garnish.DragSort.defaults, settings);\n            this.base(items, settings);\n        },\n\n        /**\n         * Creates the insertion element.\n         */\n        createInsertion: function() {\n            if (this.settings.insertion) {\n                if (typeof this.settings.insertion == 'function') {\n                    return $(this.settings.insertion(this.$draggee));\n                }\n                else {\n                    return $(this.settings.insertion);\n                }\n            }\n        },\n\n        /**\n         * Returns the helper’s target X position\n         */\n        getHelperTargetX: function() {\n            if (this.settings.magnetStrength != 1) {\n                this.getHelperTargetX._draggeeOffsetX = this.$draggee.offset().left;\n                return this.getHelperTargetX._draggeeOffsetX + ((this.mouseX - this.mouseOffsetX - this.getHelperTargetX._draggeeOffsetX) / this.settings.magnetStrength);\n            }\n            else {\n                return this.base();\n            }\n        },\n\n        /**\n         * Returns the helper’s target Y position\n         */\n        getHelperTargetY: function() {\n            if (this.settings.magnetStrength != 1) {\n                this.getHelperTargetY._draggeeOffsetY = this.$draggee.offset().top;\n                return this.getHelperTargetY._draggeeOffsetY + ((this.mouseY - this.mouseOffsetY - this.getHelperTargetY._draggeeOffsetY) / this.settings.magnetStrength);\n            }\n            else {\n                return this.base();\n            }\n        },\n\n        /**\n         * Returns whether the draggee can be inserted before a given item.\n         */\n        canInsertBefore: function($item) {\n            return true;\n        },\n\n        /**\n         * Returns whether the draggee can be inserted after a given item.\n         */\n        canInsertAfter: function($item) {\n            return true;\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            this.oldDraggeeIndexes = this._getDraggeeIndexes();\n\n            // Are we supposed to be moving the target item to the front, and is it not already there?\n            if (\n                this.settings.moveTargetItemToFront &&\n                this.$draggee.length > 1 &&\n                this._getItemIndex(this.$draggee[0]) > this._getItemIndex(this.$draggee[1])\n            ) {\n                // Reposition the target item before the other draggee items in the DOM\n                this.$draggee.first().insertBefore(this.$draggee[1]);\n            }\n\n            // Create the insertion\n            this.$insertion = this.createInsertion();\n            this._placeInsertionWithDraggee();\n\n            this.closestItem = null;\n            this._clearMidpoints();\n\n            //  Get the closest container that has a height\n            if (this.settings.container) {\n                this.$heightedContainer = $(this.settings.container);\n\n                while (!this.$heightedContainer.height()) {\n                    this.$heightedContainer = this.$heightedContainer.parent();\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            // If there's a container set, make sure that we're hovering over it\n            if (this.$heightedContainer && !Garnish.hitTest(this.mouseX, this.mouseY, this.$heightedContainer)) {\n                if (this.closestItem) {\n                    this.closestItem = null;\n                    this._removeInsertion();\n                }\n            }\n            else {\n                // Is there a new closest item?\n                if (\n                    this.closestItem !== (this.closestItem = this._getClosestItem()) &&\n                    this.closestItem !== null\n                ) {\n                    this._updateInsertion();\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            this._removeInsertion();\n\n            // Should we keep the target item where it was?\n            if (!this.settings.moveTargetItemToFront && this.targetItemPositionInDraggee != 0) {\n                this.$targetItem.insertAfter(this.$draggee.eq(this.targetItemPositionInDraggee));\n            }\n\n            // Return the helpers to the draggees\n            this.returnHelpersToDraggees();\n\n            this.base();\n\n            // Has the item actually moved?\n            this.$items = $().add(this.$items);\n            this.newDraggeeIndexes = this._getDraggeeIndexes();\n\n            if (this.newDraggeeIndexes.join(',') != this.oldDraggeeIndexes.join(',')) {\n                this.onSortChange();\n            }\n        },\n\n        /**\n         * On Insertion Point Change event\n         */\n        onInsertionPointChange: function() {\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.trigger('insertionPointChange');\n                this.settings.onInsertionPointChange();\n            }, this));\n        },\n\n        /**\n         * On Sort Change event\n         */\n        onSortChange: function() {\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.trigger('sortChange');\n                this.settings.onSortChange();\n            }, this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        _getItemIndex: function(item) {\n            return $.inArray(item, this.$items);\n        },\n\n        _getDraggeeIndexes: function() {\n            var indexes = [];\n\n            for (var i = 0; i < this.$draggee.length; i++) {\n                indexes.push(this._getItemIndex(this.$draggee[i]))\n            }\n\n            return indexes;\n        },\n\n        /**\n         * Returns the closest item to the cursor.\n         */\n        _getClosestItem: function() {\n            this._getClosestItem._closestItem = null;\n\n            // Start by checking the draggee/insertion, if either are visible\n            if (!this.settings.removeDraggee) {\n                this._testForClosestItem(this.$draggee[0]);\n            }\n            else if (this.insertionVisible) {\n                this._testForClosestItem(this.$insertion[0]);\n            }\n\n            // Check items before the draggee\n            if (this._getClosestItem._closestItem) {\n                this._getClosestItem._midpoint = this._getItemMidpoint(this._getClosestItem._closestItem)\n            }\n            if (this.settings.axis != Garnish.Y_AXIS) {\n                this._getClosestItem._startXDist = this._getClosestItem._lastXDist = this._getClosestItem._closestItem ? Math.abs(this._getClosestItem._midpoint.x - this.draggeeVirtualMidpointX) : null;\n            }\n            if (this.settings.axis != Garnish.X_AXIS) {\n                this._getClosestItem._startYDist = this._getClosestItem._lastYDist = this._getClosestItem._closestItem ? Math.abs(this._getClosestItem._midpoint.y - this.draggeeVirtualMidpointY) : null;\n            }\n\n            this._getClosestItem._$otherItem = this.$draggee.first().prev();\n\n            while (this._getClosestItem._$otherItem.length) {\n                // See if we're just getting further away\n                this._getClosestItem._midpoint = this._getItemMidpoint(this._getClosestItem._$otherItem[0]);\n                if (this.settings.axis != Garnish.Y_AXIS) {\n                    this._getClosestItem._xDist = Math.abs(this._getClosestItem._midpoint.x - this.draggeeVirtualMidpointX);\n                }\n                if (this.settings.axis != Garnish.X_AXIS) {\n                    this._getClosestItem._yDist = Math.abs(this._getClosestItem._midpoint.y - this.draggeeVirtualMidpointY);\n                }\n\n                if (\n                    (this.settings.axis == Garnish.Y_AXIS || (this._getClosestItem._lastXDist !== null && this._getClosestItem._xDist > this._getClosestItem._lastXDist)) &&\n                    (this.settings.axis == Garnish.X_AXIS || (this._getClosestItem._lastYDist !== null && this._getClosestItem._yDist > this._getClosestItem._lastYDist))\n                ) {\n                    break;\n                }\n\n                if (this.settings.axis != Garnish.Y_AXIS) {\n                    this._getClosestItem._lastXDist = this._getClosestItem._xDist;\n                }\n                if (this.settings.axis != Garnish.X_AXIS) {\n                    this._getClosestItem._lastYDist = this._getClosestItem._yDist;\n                }\n\n                // Give the extending class a chance to allow/disallow this item\n                if (this.canInsertBefore(this._getClosestItem._$otherItem)) {\n                    this._testForClosestItem(this._getClosestItem._$otherItem[0]);\n                }\n\n                // Prep the next item\n                this._getClosestItem._$otherItem = this._getClosestItem._$otherItem.prev();\n            }\n\n            // Check items after the draggee\n            if (this.settings.axis != Garnish.Y_AXIS) {\n                this._getClosestItem._lastXDist = this._getClosestItem._startXDist;\n            }\n            if (this.settings.axis != Garnish.X_AXIS) {\n                this._getClosestItem._lastYDist = this._getClosestItem._startYDist;\n            }\n\n            this._getClosestItem._$otherItem = this.$draggee.last().next();\n\n            while (this._getClosestItem._$otherItem.length) {\n                // See if we're just getting further away\n                this._getClosestItem._midpoint = this._getItemMidpoint(this._getClosestItem._$otherItem[0]);\n                if (this.settings.axis != Garnish.Y_AXIS) {\n                    this._getClosestItem._xDist = Math.abs(this._getClosestItem._midpoint.x - this.draggeeVirtualMidpointX);\n                }\n                if (this.settings.axis != Garnish.X_AXIS) {\n                    this._getClosestItem._yDist = Math.abs(this._getClosestItem._midpoint.y - this.draggeeVirtualMidpointY);\n                }\n\n                if (\n                    (this.settings.axis == Garnish.Y_AXIS || (this._getClosestItem._lastXDist !== null && this._getClosestItem._xDist > this._getClosestItem._lastXDist)) &&\n                    (this.settings.axis == Garnish.X_AXIS || (this._getClosestItem._lastYDist !== null && this._getClosestItem._yDist > this._getClosestItem._lastYDist))\n                ) {\n                    break;\n                }\n\n                if (this.settings.axis != Garnish.Y_AXIS) {\n                    this._getClosestItem._lastXDist = this._getClosestItem._xDist;\n                }\n                if (this.settings.axis != Garnish.X_AXIS) {\n                    this._getClosestItem._lastYDist = this._getClosestItem._yDist;\n                }\n\n                // Give the extending class a chance to allow/disallow this item\n                if (this.canInsertAfter(this._getClosestItem._$otherItem)) {\n                    this._testForClosestItem(this._getClosestItem._$otherItem[0]);\n                }\n\n                // Prep the next item\n                this._getClosestItem._$otherItem = this._getClosestItem._$otherItem.next();\n            }\n\n            // Return the result\n\n            // Ignore if it's the draggee or insertion\n            if (\n                this._getClosestItem._closestItem != this.$draggee[0] &&\n                (!this.insertionVisible || this._getClosestItem._closestItem != this.$insertion[0])\n            ) {\n                return this._getClosestItem._closestItem;\n            }\n            else {\n                return null;\n            }\n        },\n\n        _clearMidpoints: function() {\n            this._midpointVersion++;\n            this._$prevItem = null;\n        },\n\n        _getItemMidpoint: function(item) {\n            if ($.data(item, 'midpointVersion') != this._midpointVersion) {\n                // If this isn't the draggee, temporarily move the draggee to this item\n                this._getItemMidpoint._repositionDraggee = (\n                    !this.settings.axis &&\n                    (!this.settings.removeDraggee || this.insertionVisible) &&\n                    item != this.$draggee[0] &&\n                    (!this.$insertion || item != this.$insertion.get(0))\n                );\n\n                if (this._getItemMidpoint._repositionDraggee) {\n                    // Is this the first time we've had to temporarily reposition the draggee since the last midpoint clearing?\n                    if (!this._$prevItem) {\n                        this._$prevItem = (this.insertionVisible ? this.$insertion : this.$draggee).first().prev();\n                    }\n\n                    this._moveDraggeeToItem(item);\n\n                    // Now figure out which element we're actually getting the midpoint of\n                    if (!this.settings.removeDraggee) {\n                        this._getItemMidpoint._$item = this.$draggee;\n                    }\n                    else {\n                        this._getItemMidpoint._$item = this.$insertion;\n                    }\n                }\n                else {\n                    // We're actually getting the midpoint of this item\n                    this._getItemMidpoint._$item = $(item);\n                }\n\n                this._getItemMidpoint._offset = this._getItemMidpoint._$item.offset();\n\n                $.data(item, 'midpoint', {\n                    x: this._getItemMidpoint._offset.left + this._getItemMidpoint._$item.outerWidth() / 2,\n                    y: this._getItemMidpoint._offset.top + this._getItemMidpoint._$item.outerHeight() / 2\n                });\n\n                $.data(item, 'midpointVersion', this._midpointVersion);\n\n                delete this._getItemMidpoint._$item;\n                delete this._getItemMidpoint._offset;\n\n                if (this._getItemMidpoint._repositionDraggee) {\n                    // Move the draggee back\n                    if (this._$prevItem.length) {\n                        this.$draggee.insertAfter(this._$prevItem);\n                    }\n                    else {\n                        this.$draggee.prependTo(this.$draggee.parent());\n                    }\n\n                    this._placeInsertionWithDraggee();\n                }\n            }\n\n            return $.data(item, 'midpoint');\n        },\n\n        _testForClosestItem: function(item) {\n            this._testForClosestItem._midpoint = this._getItemMidpoint(item);\n            this._testForClosestItem._mouseDistX = Math.abs(this._testForClosestItem._midpoint.x - this.draggeeVirtualMidpointX);\n            this._testForClosestItem._mouseDistY = Math.abs(this._testForClosestItem._midpoint.y - this.draggeeVirtualMidpointY);\n\n            // Don't even consider items that are further away on the Y axis\n            if (\n                this._getClosestItem._closestItem === null ||\n                this._testForClosestItem._mouseDistY < this._getClosestItem._closestItemMouseDistY ||\n                (\n                    this._testForClosestItem._mouseDistY == this._getClosestItem._closestItemMouseDistY &&\n                    this._testForClosestItem._mouseDistX <= this._getClosestItem._closestItemMouseDistX\n                )\n            ) {\n                this._getClosestItem._closestItem = item;\n                this._getClosestItem._closestItemMouseDistX = this._testForClosestItem._mouseDistX;\n                this._getClosestItem._closestItemMouseDistY = this._testForClosestItem._mouseDistY;\n            }\n        },\n\n        /**\n         * Updates the position of the insertion point.\n         */\n        _updateInsertion: function() {\n            if (this.closestItem) {\n                this._moveDraggeeToItem(this.closestItem);\n            }\n\n            // Now that things have shifted around, invalidate the midpoints\n            this._clearMidpoints();\n\n            this.onInsertionPointChange();\n        },\n\n        _moveDraggeeToItem: function(item) {\n            // Going down?\n            if (this.$draggee.index() < $(item).index()) {\n                this.$draggee.insertAfter(item);\n            }\n            else {\n                this.$draggee.insertBefore(item);\n            }\n\n            this._placeInsertionWithDraggee();\n        },\n\n        _placeInsertionWithDraggee: function() {\n            if (this.$insertion) {\n                this.$insertion.insertBefore(this.$draggee.first());\n                this.insertionVisible = true;\n            }\n        },\n\n        /**\n         * Removes the insertion, if it's visible.\n         */\n        _removeInsertion: function() {\n            if (this.insertionVisible) {\n                this.$insertion.remove();\n                this.insertionVisible = false;\n            }\n        }\n    },\n    {\n        defaults: {\n            container: null,\n            insertion: null,\n            moveTargetItemToFront: false,\n            magnetStrength: 1,\n            onInsertionPointChange: $.noop,\n            onSortChange: $.noop\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * ESC key manager class\n */\nGarnish.EscManager = Garnish.Base.extend(\n    {\n        handlers: null,\n\n        init: function() {\n            this.handlers = [];\n\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode == Garnish.ESC_KEY) {\n                    this.escapeLatest(ev);\n                }\n            });\n        },\n\n        register: function(obj, func) {\n            this.handlers.push({\n                obj: obj,\n                func: func\n            });\n        },\n\n        unregister: function(obj) {\n            for (var i = this.handlers.length - 1; i >= 0; i--) {\n                if (this.handlers[i].obj == obj) {\n                    this.handlers.splice(i, 1);\n                }\n            }\n        },\n\n        escapeLatest: function(ev) {\n            if (this.handlers.length) {\n                var handler = this.handlers.pop();\n\n                if (typeof handler.func == 'function') {\n                    var func = handler.func;\n                }\n                else {\n                    var func = handler.obj[handler.func];\n                }\n\n                func.call(handler.obj, ev);\n\n                if (typeof handler.obj.trigger == 'function') {\n                    handler.obj.trigger('escape');\n                }\n            }\n        }\n    }\n);\n\nGarnish.escManager = new Garnish.EscManager();\n\n/** global: Garnish */\n/**\n * HUD\n */\nGarnish.HUD = Garnish.Base.extend(\n    {\n        $trigger: null,\n        $fixedTriggerParent: null,\n        $hud: null,\n        $tip: null,\n        $body: null,\n        $header: null,\n        $footer: null,\n        $mainContainer: null,\n        $main: null,\n        $shade: null,\n\n        showing: false,\n        orientation: null,\n\n        /**\n         * Constructor\n         */\n        init: function(trigger, bodyContents, settings) {\n\n            this.$trigger = $(trigger);\n\n            this.setSettings(settings, Garnish.HUD.defaults);\n            this.on('show', this.settings.onShow);\n            this.on('hide', this.settings.onHide);\n            this.on('submit', this.settings.onSubmit);\n\n            if (Garnish.HUD.activeHUDs === undefined) {\n                Garnish.HUD.activeHUDs = {};\n            }\n\n            this.$shade = $('<div/>', {'class': this.settings.shadeClass});\n            this.$hud = $('<div/>', {'class': this.settings.hudClass});\n            this.$tip = $('<div/>', {'class': this.settings.tipClass}).appendTo(this.$hud);\n            this.$body = $('<form/>', {'class': this.settings.bodyClass}).appendTo(this.$hud);\n            this.$mainContainer = $('<div/>', {'class': this.settings.mainContainerClass}).appendTo(this.$body);\n            this.$main = $('<div/>', {'class': this.settings.mainClass}).appendTo(this.$mainContainer);\n\n            this.updateBody(bodyContents);\n\n            // See if the trigger is fixed\n            var $parent = this.$trigger;\n\n            do {\n                if ($parent.css('position') == 'fixed') {\n                    this.$fixedTriggerParent = $parent;\n                    break;\n                }\n\n                $parent = $parent.offsetParent();\n            }\n            while ($parent.length && $parent.prop('nodeName') != 'HTML');\n\n            if (this.$fixedTriggerParent) {\n                this.$hud.css('position', 'fixed');\n            }\n            else {\n                this.$hud.css('position', 'absolute');\n            }\n\n            this.show();\n\n            this.addListener(this.$body, 'submit', '_handleSubmit');\n            this.addListener(this.$shade, 'tap', 'hide');\n\n            if (!this.$fixedTriggerParent && Garnish.$scrollContainer[0] != Garnish.$win[0]) {\n                this.addListener(Garnish.$scrollContainer, 'scroll', 'updateSizeAndPosition');\n            }\n\n            if (this.settings.closeBtn) {\n                this.addListener(this.settings.closeBtn, 'activate', 'hide');\n            }\n\n            this.addListener(Garnish.$win, 'resize', 'updateSizeAndPosition');\n        },\n\n        /**\n         * Update the body contents\n         */\n        updateBody: function(bodyContents) {\n            this.removeListener(this.$main, 'resize');\n\n            // Cleanup\n            this.$main.html('');\n\n            if (this.$header) {\n                this.$hud.removeClass('has-header');\n                this.$header.remove();\n                this.$header = null;\n            }\n\n            if (this.$footer) {\n                this.$hud.removeClass('has-footer');\n                this.$footer.remove();\n                this.$footer = null;\n            }\n\n            // Append the new body contents\n            this.$main.append(bodyContents);\n\n            // Look for a header and footer\n            var $header = this.$main.find('.' + this.settings.headerClass + ':first'),\n                $footer = this.$main.find('.' + this.settings.footerClass + ':first');\n\n            if ($header.length) {\n                this.$header = $header.insertBefore(this.$mainContainer);\n                this.$hud.addClass('has-header');\n            }\n\n            if ($footer.length) {\n                this.$footer = $footer.insertAfter(this.$mainContainer);\n                this.$hud.addClass('has-footer');\n            }\n        },\n\n        /**\n         * Show\n         */\n        show: function(ev) {\n            if (ev && ev.stopPropagation) {\n                ev.stopPropagation();\n            }\n\n            if (this.showing) {\n                return;\n            }\n\n            if (this.settings.closeOtherHUDs) {\n                for (var hudID in Garnish.HUD.activeHUDs) {\n                    Garnish.HUD.activeHUDs[hudID].hide();\n                }\n            }\n\n            // Prevent the browser from jumping\n            this.$hud.css('top', Garnish.$scrollContainer.scrollTop());\n\n            // Move it to the end of <body> so it gets the highest sub-z-index\n            this.$shade.appendTo(Garnish.$bod);\n            this.$hud.appendTo(Garnish.$bod);\n\n            this.$hud.show();\n            this.updateSizeAndPosition();\n\n            this.$shade.show();\n\n            this.showing = true;\n            Garnish.HUD.activeHUDs[this._namespace] = this;\n\n            Garnish.escManager.register(this, 'hide');\n\n            this.onShow();\n\n            // Reposition one last time just in case\n            Garnish.requestAnimationFrame($.proxy(this, 'updateSizeAndPosition'));\n\n            this.enable();\n        },\n\n        onShow: function() {\n            this.trigger('show');\n        },\n\n        updateSizeAndPosition: function() {\n            this.removeListener(this.$main, 'resize');\n\n            var windowWidth,\n                windowHeight,\n                triggerWidth,\n                triggerHeight,\n                triggerOffset,\n                windowScrollLeft,\n                windowScrollTop,\n                scrollContainerTriggerOffset,\n                scrollContainerScrollLeft,\n                scrollContainerScrollTop,\n                hudBodyWidth,\n                hudBodyHeight;\n\n            // Get the window sizes and trigger offset\n\n            windowWidth = Garnish.$win.width();\n            windowHeight = Garnish.$win.height();\n            windowScrollLeft = Garnish.$win.scrollLeft();\n            windowScrollTop = Garnish.$win.scrollTop();\n\n            // Get the trigger's dimensions\n            triggerWidth = this.$trigger.outerWidth();\n            triggerHeight = this.$trigger.outerHeight();\n\n            // Get the offsets for each side of the trigger element\n            triggerOffset = this.$trigger.offset();\n\n            if (this.$fixedTriggerParent) {\n                triggerOffset.left -= windowScrollLeft;\n                triggerOffset.top -= windowScrollTop;\n\n                scrollContainerTriggerOffset = triggerOffset;\n\n                windowScrollLeft = 0;\n                windowScrollTop = 0;\n                scrollContainerScrollLeft = 0;\n                scrollContainerScrollTop = 0;\n            }\n            else {\n                scrollContainerTriggerOffset = Garnish.getOffset(this.$trigger);\n\n                scrollContainerScrollLeft = Garnish.$scrollContainer.scrollLeft();\n                scrollContainerScrollTop = Garnish.$scrollContainer.scrollTop();\n            }\n\n            triggerOffset.right = triggerOffset.left + triggerWidth;\n            triggerOffset.bottom = triggerOffset.top + triggerHeight;\n\n            scrollContainerTriggerOffset.right = scrollContainerTriggerOffset.left + triggerWidth;\n            scrollContainerTriggerOffset.bottom = scrollContainerTriggerOffset.top + triggerHeight;\n\n            // Get the HUD dimensions\n            this.$hud.css({\n                width: ''\n            });\n\n            this.$mainContainer.css({\n                height: '',\n                'overflow-x': '',\n                'overflow-y': ''\n            });\n\n            hudBodyWidth = this.$body.width();\n            hudBodyHeight = this.$body.height();\n\n            // Determine the best orientation for the HUD\n\n            // Find the actual available top/right/bottom/left clearances\n            var clearances = {\n                bottom: windowHeight + scrollContainerScrollTop - scrollContainerTriggerOffset.bottom,\n                top: scrollContainerTriggerOffset.top - scrollContainerScrollTop,\n                right: windowWidth + scrollContainerScrollLeft - scrollContainerTriggerOffset.right,\n                left: scrollContainerTriggerOffset.left - scrollContainerScrollLeft\n            };\n\n            // Find the first position that has enough room\n            this.orientation = null;\n\n            for (var i = 0; i < this.settings.orientations.length; i++) {\n                var orientation = this.settings.orientations[i],\n                    relevantSize = (orientation == 'top' || orientation == 'bottom' ? hudBodyHeight : hudBodyWidth);\n\n                if (clearances[orientation] - (this.settings.windowSpacing + this.settings.triggerSpacing) >= relevantSize) {\n                    // This is the first orientation that has enough room in order of preference, so we'll go with this\n                    this.orientation = orientation;\n                    break;\n                }\n\n                if (!this.orientation || clearances[orientation] > clearances[this.orientation]) {\n                    // Use this as a fallback as it's the orientation with the most clearance so far\n                    this.orientation = orientation;\n                }\n            }\n\n            // Just in case...\n            if (!this.orientation || $.inArray(this.orientation, ['bottom', 'top', 'right', 'left']) == -1) {\n                this.orientation = 'bottom'\n            }\n\n            // Update the tip class\n            if (this.tipClass) {\n                this.$tip.removeClass(this.tipClass);\n            }\n\n            this.tipClass = this.settings.tipClass + '-' + Garnish.HUD.tipClasses[this.orientation];\n            this.$tip.addClass(this.tipClass);\n\n            // Make sure the HUD body is within the allowed size\n\n            var maxHudBodyWidth,\n                maxHudBodyHeight;\n\n            if (this.orientation == 'top' || this.orientation == 'bottom') {\n                maxHudBodyWidth = windowWidth - this.settings.windowSpacing * 2;\n                maxHudBodyHeight = clearances[this.orientation] - this.settings.windowSpacing - this.settings.triggerSpacing;\n            }\n            else {\n                maxHudBodyWidth = clearances[this.orientation] - this.settings.windowSpacing - this.settings.triggerSpacing;\n                maxHudBodyHeight = windowHeight - this.settings.windowSpacing * 2;\n            }\n\n            if (maxHudBodyWidth < this.settings.minBodyWidth) {\n                maxHudBodyWidth = this.settings.minBodyWidth;\n            }\n\n            if (maxHudBodyHeight < this.settings.minBodyHeight) {\n                maxHudBodyHeight = this.settings.minBodyHeight;\n            }\n\n            if (hudBodyWidth > maxHudBodyWidth || hudBodyWidth < this.settings.minBodyWidth) {\n                if (hudBodyWidth > maxHudBodyWidth) {\n                    hudBodyWidth = maxHudBodyWidth;\n                }\n                else {\n                    hudBodyWidth = this.settings.minBodyWidth;\n                }\n\n                this.$hud.width(hudBodyWidth);\n\n                // Is there any overflow now?\n                if (this.$main.outerWidth() > maxHudBodyWidth) {\n                    this.$mainContainer.css('overflow-x', 'scroll');\n                }\n\n                // The height may have just changed\n                hudBodyHeight = this.$body.height();\n            }\n\n            if (hudBodyHeight > maxHudBodyHeight || hudBodyHeight < this.settings.minBodyHeight) {\n                if (hudBodyHeight > maxHudBodyHeight) {\n                    hudBodyHeight = maxHudBodyHeight;\n                }\n                else {\n                    hudBodyHeight = this.settings.minBodyHeight;\n                }\n\n                var mainHeight = hudBodyHeight;\n\n                if (this.$header) {\n                    mainHeight -= this.$header.outerHeight();\n                }\n\n                if (this.$footer) {\n                    mainHeight -= this.$footer.outerHeight();\n                }\n\n                this.$mainContainer.height(mainHeight);\n\n                // Is there any overflow now?\n                if (this.$main.outerHeight() > mainHeight) {\n                    this.$mainContainer.css('overflow-y', 'scroll');\n                }\n            }\n\n            // Set the HUD/tip positions\n\n            if (this.orientation == 'top' || this.orientation == 'bottom') {\n                // Center the HUD horizontally\n                var maxLeft = (windowWidth + windowScrollLeft) - (hudBodyWidth + this.settings.windowSpacing),\n                    minLeft = (windowScrollLeft + this.settings.windowSpacing),\n                    triggerCenter = triggerOffset.left + Math.round(triggerWidth / 2),\n                    left = triggerCenter - Math.round(hudBodyWidth / 2);\n\n                if (left > maxLeft) {\n                    left = maxLeft;\n                }\n                if (left < minLeft) {\n                    left = minLeft;\n                }\n\n                this.$hud.css('left', left);\n\n                var tipLeft = (triggerCenter - left) - (this.settings.tipWidth / 2);\n                this.$tip.css({left: tipLeft, top: ''});\n\n                if (this.orientation == 'top') {\n                    var top = triggerOffset.top - (hudBodyHeight + this.settings.triggerSpacing);\n                    this.$hud.css('top', top);\n                }\n                else {\n                    var top = triggerOffset.bottom + this.settings.triggerSpacing;\n                    this.$hud.css('top', top);\n                }\n            }\n            else {\n                // Center the HUD vertically\n                var maxTop = (windowHeight + windowScrollTop) - (hudBodyHeight + this.settings.windowSpacing),\n                    minTop = (windowScrollTop + this.settings.windowSpacing),\n                    triggerCenter = triggerOffset.top + Math.round(triggerHeight / 2),\n                    top = triggerCenter - Math.round(hudBodyHeight / 2);\n\n                if (top > maxTop) {\n                    top = maxTop;\n                }\n                if (top < minTop) {\n                    top = minTop;\n                }\n\n                this.$hud.css('top', top);\n\n                var tipTop = (triggerCenter - top) - (this.settings.tipWidth / 2);\n                this.$tip.css({top: tipTop, left: ''});\n\n\n                if (this.orientation == 'left') {\n                    var left = triggerOffset.left - (hudBodyWidth + this.settings.triggerSpacing);\n                    this.$hud.css('left', left);\n                }\n                else {\n                    var left = triggerOffset.right + this.settings.triggerSpacing;\n                    this.$hud.css('left', left);\n                }\n            }\n\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.addListener(this.$main, 'resize', 'updateSizeAndPosition');\n            }, this));\n        },\n\n        /**\n         * Hide\n         */\n        hide: function() {\n            this.disable();\n\n            this.$hud.hide();\n            this.$shade.hide();\n            this.showing = false;\n\n            delete Garnish.HUD.activeHUDs[this._namespace];\n\n            Garnish.escManager.unregister(this);\n\n            this.onHide();\n        },\n\n        onHide: function() {\n            this.trigger('hide');\n        },\n\n        toggle: function() {\n            if (this.showing) {\n                this.hide();\n            }\n            else {\n                this.show();\n            }\n        },\n\n        submit: function() {\n            this.onSubmit();\n        },\n\n        onSubmit: function() {\n            this.trigger('submit');\n        },\n\n        _handleSubmit: function(ev) {\n            ev.preventDefault();\n            this.submit();\n        }\n    },\n    {\n        tipClasses: {bottom: 'top', top: 'bottom', right: 'left', left: 'right'},\n\n        defaults: {\n            shadeClass: 'hud-shade',\n            hudClass: 'hud',\n            tipClass: 'tip',\n            bodyClass: 'body',\n            headerClass: 'hud-header',\n            footerClass: 'hud-footer',\n            mainContainerClass: 'main-container',\n            mainClass: 'main',\n            orientations: ['bottom', 'top', 'right', 'left'],\n            triggerSpacing: 10,\n            windowSpacing: 10,\n            tipWidth: 30,\n            minBodyWidth: 200,\n            minBodyHeight: 0,\n            onShow: $.noop,\n            onHide: $.noop,\n            onSubmit: $.noop,\n            closeBtn: null,\n            closeOtherHUDs: true\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Menu\n */\nGarnish.Menu = Garnish.Base.extend(\n    {\n        settings: null,\n\n        $container: null,\n        $options: null,\n        $anchor: null,\n\n        menuId: null,\n\n        _windowWidth: null,\n        _windowHeight: null,\n        _windowScrollLeft: null,\n        _windowScrollTop: null,\n\n        _anchorOffset: null,\n        _anchorWidth: null,\n        _anchorHeight: null,\n        _anchorOffsetRight: null,\n        _anchorOffsetBottom: null,\n\n        _menuWidth: null,\n        _menuHeight: null,\n\n        /**\n         * Constructor\n         */\n        init: function(container, settings) {\n            this.setSettings(settings, Garnish.Menu.defaults);\n\n            this.$container = $(container);\n\n            this.$options = $();\n            this.addOptions(this.$container.find('a'));\n\n            // Menu List\n            this.menuId = 'menu' + this._namespace;\n            this.$menuList = $('ul', this.$container);\n            this.$menuList.attr({\n                'role': 'listbox',\n                'id': this.menuId,\n                'aria-hidden': 'true'\n            });\n\n            // Deprecated\n            if (this.settings.attachToElement) {\n                this.settings.anchor = this.settings.attachToElement;\n                Garnish.log('The \\'attachToElement\\' setting is deprecated. Use \\'anchor\\' instead.');\n            }\n\n            if (this.settings.anchor) {\n                this.$anchor = $(this.settings.anchor);\n            }\n\n            // Prevent clicking on the container from hiding the menu\n            this.addListener(this.$container, 'mousedown', function(ev) {\n                ev.stopPropagation();\n\n                // Prevent this from causing the menu button to blur\n                ev.preventDefault();\n            });\n        },\n\n        addOptions: function($options) {\n            this.$options = this.$options.add($options);\n            $options.data('menu', this);\n\n            $options.each($.proxy(function(optionKey, option) {\n                $(option).attr({\n                    'role': 'option',\n                    'tabindex': '-1',\n                    'id': this.menuId + '-option-' + optionKey\n                });\n            }, this));\n\n            this.addListener($options, 'click', 'selectOption');\n        },\n\n        setPositionRelativeToAnchor: function() {\n            this._windowWidth = Garnish.$win.width();\n            this._windowHeight = Garnish.$win.height();\n            this._windowScrollLeft = Garnish.$win.scrollLeft();\n            this._windowScrollTop = Garnish.$win.scrollTop();\n\n            this._anchorOffset = this.$anchor.offset();\n            this._anchorWidth = this.$anchor.outerWidth();\n            this._anchorHeight = this.$anchor.outerHeight();\n            this._anchorOffsetRight = this._anchorOffset.left + this._anchorHeight;\n            this._anchorOffsetBottom = this._anchorOffset.top + this._anchorHeight;\n\n            this.$container.css('minWidth', 0);\n            this.$container.css('minWidth', this._anchorWidth - (this.$container.outerWidth() - this.$container.width()));\n\n            this._menuWidth = this.$container.outerWidth();\n            this._menuHeight = this.$container.outerHeight();\n\n            // Is there room for the menu below the anchor?\n            var topClearance = this._anchorOffset.top - this._windowScrollTop,\n                bottomClearance = this._windowHeight + this._windowScrollTop - this._anchorOffsetBottom;\n\n            if (bottomClearance >= this._menuHeight || bottomClearance >= topClearance || topClearance < this._menuHeight) {\n                this.$container.css('top', this._anchorOffsetBottom);\n            }\n            else {\n                this.$container.css('top', this._anchorOffset.top - this._menuHeight);\n            }\n\n            // Figure out how we're aliging it\n            var align = this.$container.data('align');\n\n            if (align != 'left' && align != 'center' && align != 'right') {\n                align = 'left';\n            }\n\n            if (align == 'center') {\n                this._alignCenter();\n            }\n            else {\n                // Figure out which options are actually possible\n                var rightClearance = this._windowWidth + this._windowScrollLeft - (this._anchorOffset.left + this._menuWidth),\n                    leftClearance = this._anchorOffsetRight - this._menuWidth;\n\n                if (align == 'right' && leftClearance >= 0 || rightClearance < 0) {\n                    this._alignRight();\n                }\n                else {\n                    this._alignLeft();\n                }\n            }\n\n            delete this._windowWidth;\n            delete this._windowHeight;\n            delete this._windowScrollLeft;\n            delete this._windowScrollTop;\n            delete this._anchorOffset;\n            delete this._anchorWidth;\n            delete this._anchorHeight;\n            delete this._anchorOffsetRight;\n            delete this._anchorOffsetBottom;\n            delete this._menuWidth;\n            delete this._menuHeight;\n        },\n\n        show: function() {\n            // Move the menu to the end of the DOM\n            this.$container.appendTo(Garnish.$bod)\n\n            if (this.$anchor) {\n                this.setPositionRelativeToAnchor();\n            }\n\n            this.$container.velocity('stop');\n            this.$container.css({\n                opacity: 1,\n                display: 'block'\n            });\n\n            this.$menuList.attr('aria-hidden', 'false');\n\n            Garnish.escManager.register(this, 'hide');\n        },\n\n        hide: function() {\n            this.$menuList.attr('aria-hidden', 'true');\n\n            this.$container.velocity('fadeOut', {duration: Garnish.FX_DURATION}, $.proxy(function() {\n                this.$container.detach();\n            }, this));\n\n            Garnish.escManager.unregister(this);\n\n            this.trigger('hide');\n        },\n\n        selectOption: function(ev) {\n            this.settings.onOptionSelect(ev.currentTarget);\n            this.trigger('optionselect', {selectedOption: ev.currentTarget});\n            this.hide();\n        },\n\n        _alignLeft: function() {\n            this.$container.css({\n                left: this._anchorOffset.left,\n                right: 'auto'\n            });\n        },\n\n        _alignRight: function() {\n            this.$container.css({\n                right: this._windowWidth - (this._anchorOffset.left + this._anchorWidth),\n                left: 'auto'\n            });\n        },\n\n        _alignCenter: function() {\n            var left = Math.round((this._anchorOffset.left + this._anchorWidth / 2) - (this._menuWidth / 2));\n\n            if (left < 0) {\n                left = 0;\n            }\n\n            this.$container.css('left', left);\n        }\n\n    },\n    {\n        defaults: {\n            anchor: null,\n            onOptionSelect: $.noop\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Menu Button\n */\nGarnish.MenuBtn = Garnish.Base.extend(\n    {\n        $btn: null,\n        menu: null,\n        showingMenu: false,\n        disabled: true,\n\n        /**\n         * Constructor\n         */\n        init: function(btn, settings) {\n            this.$btn = $(btn);\n\n            // Is this already a menu button?\n            if (this.$btn.data('menubtn')) {\n                // Grab the old MenuBtn's menu container\n                var $menu = this.$btn.data('menubtn').menu.$container;\n\n                Garnish.log('Double-instantiating a menu button on an element');\n                this.$btn.data('menubtn').destroy();\n            }\n            else {\n                var $menu = this.$btn.next('.menu').detach();\n            }\n\n            this.$btn.data('menubtn', this);\n\n            this.setSettings(settings, Garnish.MenuBtn.defaults);\n\n            this.menu = new Garnish.Menu($menu, {\n                anchor: (this.settings.menuAnchor || this.$btn),\n                onOptionSelect: $.proxy(this, 'onOptionSelect')\n            });\n\n            this.$btn.attr({\n                'tabindex': 0,\n                'role': 'combobox',\n                'aria-owns': this.menu.menuId,\n                'aria-haspopup': 'true',\n                'aria-expanded': 'false',\n            });\n\n            this.menu.on('hide', $.proxy(this, 'onMenuHide'));\n            this.addListener(this.$btn, 'mousedown', 'onMouseDown');\n            this.addListener(this.$btn, 'keydown', 'onKeyDown');\n            this.addListener(this.$btn, 'blur', 'onBlur');\n            this.enable();\n        },\n\n        onBlur: function(ev) {\n            if (this.showingMenu) {\n                this.hideMenu();\n            }\n        },\n\n        onKeyDown: function(ev) {\n            switch (ev.keyCode) {\n                case Garnish.RETURN_KEY: {\n                    ev.preventDefault();\n\n                    var $currentOption = this.menu.$options.filter('.hover');\n\n                    if ($currentOption.length > 0) {\n                        $currentOption.get(0).click();\n                    }\n\n                    break;\n                }\n\n                case Garnish.SPACE_KEY: {\n                    ev.preventDefault();\n\n                    if (!this.showingMenu) {\n                        this.showMenu();\n\n                        var $option = this.menu.$options.filter('.sel:first');\n\n                        if ($option.length > 0) {\n                            $option;\n                        }\n                        else {\n                            $option = this.menu.$options.first();\n                        }\n\n                        this.focusOption($option);\n                    }\n\n                    break;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n\n                    var $option;\n\n                    if (this.showingMenu) {\n                        $.each(this.menu.$options, $.proxy(function(index, value) {\n                            if (!$option) {\n                                if ($(value).hasClass('hover')) {\n                                    if ((index + 1) < this.menu.$options.length) {\n                                        $option = $(this.menu.$options[(index + 1)]);\n                                    }\n                                }\n                            }\n                        }, this));\n\n                        if (!$option) {\n                            $option = $(this.menu.$options[0]);\n                        }\n                    }\n                    else {\n                        this.showMenu();\n\n                        $option = this.menu.$options.filter('.sel:first');\n\n                        if ($option.length == 0) {\n                            $option = this.menu.$options.first();\n                        }\n                    }\n\n                    this.focusOption($option);\n\n                    break;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n\n                    var $option;\n\n                    if (this.showingMenu) {\n                        $.each(this.menu.$options, $.proxy(function(index, value) {\n                            if (!$option) {\n                                if ($(value).hasClass('hover')) {\n                                    if ((index - 1) >= 0) {\n                                        $option = $(this.menu.$options[(index - 1)]);\n                                    }\n                                }\n                            }\n                        }, this));\n\n                        if (!$option) {\n                            $option = $(this.menu.$options[(this.menu.$options.length - 1)]);\n                        }\n                    }\n                    else {\n                        this.showMenu();\n\n                        $option = this.menu.$options.filter('.sel:first');\n\n                        if ($option.length == 0) {\n                            $option = this.menu.$options.last();\n                        }\n                    }\n\n                    this.focusOption($option);\n\n                    break;\n                }\n            }\n        },\n\n        focusOption: function($option) {\n            this.menu.$options.removeClass('hover');\n\n            $option.addClass('hover');\n\n            this.menu.$menuList.attr('aria-activedescendant', $option.attr('id'));\n            this.$btn.attr('aria-activedescendant', $option.attr('id'));\n        },\n\n        onMouseDown: function(ev) {\n            if (ev.which != Garnish.PRIMARY_CLICK || Garnish.isCtrlKeyPressed(ev)) {\n                return;\n            }\n\n            ev.preventDefault();\n\n            if (this.showingMenu) {\n                this.hideMenu();\n            }\n            else {\n                this.showMenu();\n            }\n        },\n\n        showMenu: function() {\n            if (this.disabled) {\n                return;\n            }\n\n            this.menu.show();\n            this.$btn.addClass('active');\n            this.$btn.trigger('focus');\n            this.$btn.attr('aria-expanded', 'true');\n\n            this.showingMenu = true;\n\n            setTimeout($.proxy(function() {\n                this.addListener(Garnish.$doc, 'mousedown', 'onMouseDown');\n            }, this), 1);\n        },\n\n        hideMenu: function() {\n            this.menu.hide();\n            this.$btn.attr('aria-expanded', 'false');\n        },\n\n        onMenuHide: function() {\n            this.$btn.removeClass('active');\n            this.showingMenu = false;\n\n            this.removeListener(Garnish.$doc, 'mousedown');\n        },\n\n        onOptionSelect: function(option) {\n            this.settings.onOptionSelect(option);\n            this.trigger('optionSelect', {option: option});\n        },\n\n        enable: function() {\n            this.disabled = false;\n        },\n\n        disable: function() {\n            this.disabled = true;\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$btn.removeData('menubtn');\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            menuAnchor: null,\n            onOptionSelect: $.noop\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Mixed input\n *\n * @todo RTL support, in the event that the input doesn't have dir=\"ltr\".\n */\nGarnish.MixedInput = Garnish.Base.extend(\n    {\n        $container: null,\n        elements: null,\n        focussedElement: null,\n        blurTimeout: null,\n\n        init: function(container, settings) {\n            this.$container = $(container);\n            this.setSettings(settings, Garnish.MixedInput.defaults);\n\n            this.elements = [];\n\n            // Allow the container to receive focus\n            this.$container.attr('tabindex', 0);\n            this.addListener(this.$container, 'focus', 'onFocus');\n        },\n\n        getElementIndex: function($elem) {\n            return $.inArray($elem, this.elements);\n        },\n\n        isText: function($elem) {\n            return ($elem.prop('nodeName') == 'INPUT');\n        },\n\n        onFocus: function(ev) {\n            // Set focus to the first element\n            if (this.elements.length) {\n                var $elem = this.elements[0];\n                this.setFocus($elem);\n                this.setCarotPos($elem, 0);\n            }\n            else {\n                this.addTextElement();\n            }\n        },\n\n        addTextElement: function(index) {\n            var text = new TextElement(this);\n            this.addElement(text.$input, index);\n            return text;\n        },\n\n        addElement: function($elem, index) {\n            // Was a target index passed, and is it valid?\n            if (index === undefined) {\n                if (this.focussedElement) {\n                    var focussedElement = this.focussedElement,\n                        focussedElementIndex = this.getElementIndex(focussedElement);\n\n                    // Is the focus on a text element?\n                    if (this.isText(focussedElement)) {\n                        var selectionStart = focussedElement.prop('selectionStart'),\n                            selectionEnd = focussedElement.prop('selectionEnd'),\n                            val = focussedElement.val(),\n                            preVal = val.substring(0, selectionStart),\n                            postVal = val.substr(selectionEnd);\n\n                        if (preVal && postVal) {\n                            // Split the input into two\n                            focussedElement.val(preVal).trigger('change');\n                            var newText = new TextElement(this);\n                            newText.$input.val(postVal).trigger('change');\n                            this.addElement(newText.$input, focussedElementIndex + 1);\n\n                            // Insert the new element in between them\n                            index = focussedElementIndex + 1;\n                        }\n                        else if (!preVal) {\n                            // Insert the new element before this one\n                            index = focussedElementIndex;\n                        }\n                        else {\n                            // Insert it after this one\n                            index = focussedElementIndex + 1;\n                        }\n                    }\n                    else {\n                        // Just insert the new one after this one\n                        index = focussedElementIndex + 1;\n                    }\n                }\n                else {\n                    // Insert the new element at the end\n                    index = this.elements.length;\n                }\n            }\n\n            // Add the element\n            if (this.elements[index] !== undefined) {\n                $elem.insertBefore(this.elements[index]);\n                this.elements.splice(index, 0, $elem);\n            }\n            else {\n                // Just for safe measure, set the index to what it really will be\n                index = this.elements.length;\n\n                this.$container.append($elem);\n                this.elements.push($elem);\n            }\n\n            // Make sure that there are text elements surrounding all non-text elements\n            if (!this.isText($elem)) {\n                // Add a text element before?\n                if (index == 0 || !this.isText(this.elements[index - 1])) {\n                    this.addTextElement(index);\n                    index++;\n                }\n\n                // Add a text element after?\n                if (index == this.elements.length - 1 || !this.isText(this.elements[index + 1])) {\n                    this.addTextElement(index + 1);\n                }\n            }\n\n            // Add event listeners\n            this.addListener($elem, 'click', function() {\n                this.setFocus($elem);\n            });\n\n            // Set focus to the new element\n            setTimeout($.proxy(function() {\n                this.setFocus($elem);\n            }, this), 1);\n        },\n\n        removeElement: function($elem) {\n            var index = this.getElementIndex($elem);\n            if (index != -1) {\n                this.elements.splice(index, 1);\n\n                if (!this.isText($elem)) {\n                    // Combine the two now-adjacent text elements\n                    var $prevElem = this.elements[index - 1],\n                        $nextElem = this.elements[index];\n\n                    if (this.isText($prevElem) && this.isText($nextElem)) {\n                        var prevElemVal = $prevElem.val(),\n                            newVal = prevElemVal + $nextElem.val();\n                        $prevElem.val(newVal).trigger('change');\n                        this.removeElement($nextElem);\n                        this.setFocus($prevElem);\n                        this.setCarotPos($prevElem, prevElemVal.length);\n                    }\n                }\n\n                $elem.remove();\n            }\n        },\n\n        setFocus: function($elem) {\n            this.$container.addClass('focus');\n\n            if (!this.focussedElement) {\n                // Prevent the container from receiving focus\n                // as long as one of its elements has focus\n                this.$container.attr('tabindex', '-1');\n            }\n            else {\n                // Blur the previously-focussed element\n                this.blurFocussedElement();\n            }\n\n            $elem.attr('tabindex', '0');\n            $elem.focus();\n            this.focussedElement = $elem;\n\n            this.addListener($elem, 'blur', function() {\n                this.blurTimeout = setTimeout($.proxy(function() {\n                    if (this.focussedElement == $elem) {\n                        this.blurFocussedElement();\n                        this.focussedElement = null;\n                        this.$container.removeClass('focus');\n\n                        // Get ready for future focus\n                        this.$container.attr('tabindex', '0');\n                    }\n                }, this), 1);\n            });\n        },\n\n        blurFocussedElement: function() {\n            this.removeListener(this.focussedElement, 'blur');\n            this.focussedElement.attr('tabindex', '-1');\n        },\n\n        focusPreviousElement: function($from) {\n            var index = this.getElementIndex($from);\n\n            if (index > 0) {\n                var $elem = this.elements[index - 1];\n                this.setFocus($elem);\n\n                // If it's a text element, put the carot at the end\n                if (this.isText($elem)) {\n                    var length = $elem.val().length;\n                    this.setCarotPos($elem, length);\n                }\n            }\n        },\n\n        focusNextElement: function($from) {\n            var index = this.getElementIndex($from);\n\n            if (index < this.elements.length - 1) {\n                var $elem = this.elements[index + 1];\n                this.setFocus($elem);\n\n                // If it's a text element, put the carot at the beginning\n                if (this.isText($elem)) {\n                    this.setCarotPos($elem, 0)\n                }\n            }\n        },\n\n        setCarotPos: function($elem, pos) {\n            $elem.prop('selectionStart', pos);\n            $elem.prop('selectionEnd', pos);\n        }\n\n    });\n\n\nvar TextElement = Garnish.Base.extend({\n\n        parentInput: null,\n        $input: null,\n        $stage: null,\n        val: null,\n        focussed: false,\n        interval: null,\n\n        init: function(parentInput) {\n            this.parentInput = parentInput;\n\n            this.$input = $('<input type=\"text\"/>').appendTo(this.parentInput.$container);\n            this.$input.css('margin-right', (2 - TextElement.padding) + 'px');\n\n            this.setWidth();\n\n            this.addListener(this.$input, 'focus', 'onFocus');\n            this.addListener(this.$input, 'blur', 'onBlur');\n            this.addListener(this.$input, 'keydown', 'onKeyDown');\n            this.addListener(this.$input, 'change', 'checkInput');\n        },\n\n        getIndex: function() {\n            return this.parentInput.getElementIndex(this.$input);\n        },\n\n        buildStage: function() {\n            this.$stage = $('<stage/>').appendTo(Garnish.$bod);\n\n            // replicate the textarea's text styles\n            this.$stage.css({\n                position: 'absolute',\n                top: -9999,\n                left: -9999,\n                wordWrap: 'nowrap'\n            });\n\n            Garnish.copyTextStyles(this.$input, this.$stage);\n        },\n\n        getTextWidth: function(val) {\n            if (!this.$stage) {\n                this.buildStage();\n            }\n\n            if (val) {\n                // Ampersand entities\n                val = val.replace(/&/g, '&amp;');\n\n                // < and >\n                val = val.replace(/</g, '&lt;');\n                val = val.replace(/>/g, '&gt;');\n\n                // Spaces\n                val = val.replace(/ /g, '&nbsp;');\n            }\n\n            this.$stage.html(val);\n            this.stageWidth = this.$stage.width();\n            return this.stageWidth;\n        },\n\n        onFocus: function() {\n            this.focussed = true;\n            this.interval = setInterval($.proxy(this, 'checkInput'), Garnish.NiceText.interval);\n            this.checkInput();\n        },\n\n        onBlur: function() {\n            this.focussed = false;\n            clearInterval(this.interval);\n            this.checkInput();\n        },\n\n        onKeyDown: function(ev) {\n            setTimeout($.proxy(this, 'checkInput'), 1);\n\n            switch (ev.keyCode) {\n                case Garnish.LEFT_KEY: {\n                    if (this.$input.prop('selectionStart') == 0 && this.$input.prop('selectionEnd') == 0) {\n                        // Set focus to the previous element\n                        this.parentInput.focusPreviousElement(this.$input);\n                    }\n                    break;\n                }\n\n                case Garnish.RIGHT_KEY: {\n                    if (this.$input.prop('selectionStart') == this.val.length && this.$input.prop('selectionEnd') == this.val.length) {\n                        // Set focus to the next element\n                        this.parentInput.focusNextElement(this.$input);\n                    }\n                    break;\n                }\n\n                case Garnish.DELETE_KEY: {\n                    if (this.$input.prop('selectionStart') == 0 && this.$input.prop('selectionEnd') == 0) {\n                        // Set focus to the previous element\n                        this.parentInput.focusPreviousElement(this.$input);\n                        ev.preventDefault();\n                    }\n                }\n            }\n        },\n\n        getVal: function() {\n            this.val = this.$input.val();\n            return this.val;\n        },\n\n        setVal: function(val) {\n            this.$input.val(val);\n            this.checkInput();\n        },\n\n        checkInput: function() {\n            // Has the value changed?\n            var changed = (this.val !== this.getVal());\n            if (changed) {\n                this.setWidth();\n                this.onChange();\n            }\n\n            return changed;\n        },\n\n        setWidth: function() {\n            // has the width changed?\n            if (this.stageWidth !== this.getTextWidth(this.val)) {\n                // update the textarea width\n                var width = this.stageWidth + TextElement.padding;\n                this.$input.width(width);\n            }\n        },\n\n        onChange: $.noop\n    },\n    {\n        padding: 20\n    }\n);\n\n/** global: Garnish */\n/**\n * Modal\n */\nGarnish.Modal = Garnish.Base.extend(\n    {\n        $container: null,\n        $shade: null,\n\n        visible: false,\n\n        dragger: null,\n\n        desiredWidth: null,\n        desiredHeight: null,\n        resizeDragger: null,\n        resizeStartWidth: null,\n        resizeStartHeight: null,\n\n        init: function(container, settings) {\n            // Param mapping\n            if (settings === undefined && $.isPlainObject(container)) {\n                // (settings)\n                settings = container;\n                container = null;\n            }\n\n            this.setSettings(settings, Garnish.Modal.defaults);\n\n            // Create the shade\n            this.$shade = $('<div class=\"' + this.settings.shadeClass + '\"/>');\n\n            // If the container is already set, drop the shade below it.\n            if (container) {\n                this.$shade.insertBefore(container);\n            }\n            else {\n                this.$shade.appendTo(Garnish.$bod);\n            }\n\n            if (container) {\n                this.setContainer(container);\n\n                if (this.settings.autoShow) {\n                    this.show();\n                }\n            }\n\n            Garnish.Modal.instances.push(this);\n        },\n\n        setContainer: function(container) {\n            this.$container = $(container);\n\n            // Is this already a modal?\n            if (this.$container.data('modal')) {\n                Garnish.log('Double-instantiating a modal on an element');\n                this.$container.data('modal').destroy();\n            }\n\n            this.$container.data('modal', this);\n\n            if (this.settings.draggable) {\n                this.dragger = new Garnish.DragMove(this.$container, {\n                    handle: (this.settings.dragHandleSelector ? this.$container.find(this.settings.dragHandleSelector) : this.$container)\n                });\n            }\n\n            if (this.settings.resizable) {\n                var $resizeDragHandle = $('<div class=\"resizehandle\"/>').appendTo(this.$container);\n\n                this.resizeDragger = new Garnish.BaseDrag($resizeDragHandle, {\n                    onDragStart: $.proxy(this, '_handleResizeStart'),\n                    onDrag: $.proxy(this, '_handleResize')\n                });\n            }\n\n            this.addListener(this.$container, 'click', function(ev) {\n                ev.stopPropagation();\n            });\n\n            // Show it if we're late to the party\n            if (this.visible) {\n                this.show();\n            }\n        },\n\n        show: function() {\n            // Close other modals as needed\n            if (this.settings.closeOtherModals && Garnish.Modal.visibleModal && Garnish.Modal.visibleModal != this) {\n                Garnish.Modal.visibleModal.hide();\n            }\n\n            if (this.$container) {\n                // Move it to the end of <body> so it gets the highest sub-z-index\n                this.$shade.appendTo(Garnish.$bod);\n                this.$container.appendTo(Garnish.$bod);\n\n                this.$container.show();\n                this.updateSizeAndPosition();\n\n                this.$shade.velocity('fadeIn', {duration: 50});\n                this.$container.delay(50).velocity('fadeIn', {\n                    complete: $.proxy(this, 'onFadeIn')\n                });\n\n                if (this.settings.hideOnShadeClick) {\n                    this.addListener(this.$shade, 'click', 'hide');\n                }\n\n                this.addListener(Garnish.$win, 'resize', 'updateSizeAndPosition');\n            }\n\n            this.enable();\n\n            if (this.settings.hideOnEsc) {\n                Garnish.escManager.register(this, 'hide');\n            }\n\n            if (!this.visible) {\n                this.visible = true;\n                Garnish.Modal.visibleModal = this;\n\n                this.trigger('show');\n                this.settings.onShow();\n            }\n        },\n\n        quickShow: function() {\n            this.show();\n\n            if (this.$container) {\n                this.$container.velocity('stop');\n                this.$container.show().css('opacity', 1);\n\n                this.$shade.velocity('stop');\n                this.$shade.show().css('opacity', 1);\n            }\n        },\n\n        hide: function(ev) {\n            this.disable();\n\n            if (ev) {\n                ev.stopPropagation();\n            }\n\n            if (this.$container) {\n                this.$container.velocity('fadeOut', {duration: Garnish.FX_DURATION});\n                this.$shade.velocity('fadeOut', {\n                    duration: Garnish.FX_DURATION,\n                    complete: $.proxy(this, 'onFadeOut')\n                });\n\n                if (this.settings.hideOnShadeClick) {\n                    this.removeListener(this.$shade, 'click');\n                }\n\n                this.removeListener(Garnish.$win, 'resize');\n            }\n\n            this.visible = false;\n            Garnish.Modal.visibleModal = null;\n\n            if (this.settings.hideOnEsc) {\n                Garnish.escManager.unregister(this);\n            }\n\n            this.trigger('hide');\n            this.settings.onHide();\n        },\n\n        quickHide: function() {\n            this.hide();\n\n            if (this.$container) {\n                this.$container.velocity('stop');\n                this.$container.css('opacity', 0).hide();\n\n                this.$shade.velocity('stop');\n                this.$shade.css('opacity', 0).hide();\n            }\n        },\n\n        updateSizeAndPosition: function() {\n            if (!this.$container) {\n                return;\n            }\n\n            this.$container.css({\n                'width': (this.desiredWidth ? Math.max(this.desiredWidth, 200) : ''),\n                'height': (this.desiredHeight ? Math.max(this.desiredHeight, 200) : ''),\n                'min-width': '',\n                'min-height': ''\n            });\n\n            // Set the width first so that the height can adjust for the width\n            this.updateSizeAndPosition._windowWidth = Garnish.$win.width();\n            this.updateSizeAndPosition._width = Math.min(this.getWidth(), this.updateSizeAndPosition._windowWidth - this.settings.minGutter * 2);\n\n            this.$container.css({\n                'width': this.updateSizeAndPosition._width,\n                'min-width': this.updateSizeAndPosition._width,\n                'left': Math.round((this.updateSizeAndPosition._windowWidth - this.updateSizeAndPosition._width) / 2)\n            });\n\n            // Now set the height\n            this.updateSizeAndPosition._windowHeight = Garnish.$win.height();\n            this.updateSizeAndPosition._height = Math.min(this.getHeight(), this.updateSizeAndPosition._windowHeight - this.settings.minGutter * 2);\n\n            this.$container.css({\n                'height': this.updateSizeAndPosition._height,\n                'min-height': this.updateSizeAndPosition._height,\n                'top': Math.round((this.updateSizeAndPosition._windowHeight - this.updateSizeAndPosition._height) / 2)\n            });\n        },\n\n        onFadeIn: function() {\n            this.trigger('fadeIn');\n            this.settings.onFadeIn();\n        },\n\n        onFadeOut: function() {\n            this.trigger('fadeOut');\n            this.settings.onFadeOut();\n        },\n\n        getHeight: function() {\n            if (!this.$container) {\n                throw 'Attempted to get the height of a modal whose container has not been set.';\n            }\n\n            if (!this.visible) {\n                this.$container.show();\n            }\n\n            this.getHeight._height = this.$container.outerHeight();\n\n            if (!this.visible) {\n                this.$container.hide();\n            }\n\n            return this.getHeight._height;\n        },\n\n        getWidth: function() {\n            if (!this.$container) {\n                throw 'Attempted to get the width of a modal whose container has not been set.';\n            }\n\n            if (!this.visible) {\n                this.$container.show();\n            }\n\n            // Chrome might be 1px shy here for some reason\n            this.getWidth._width = this.$container.outerWidth() + 1;\n\n            if (!this.visible) {\n                this.$container.hide();\n            }\n\n            return this.getWidth._width;\n        },\n\n        _handleResizeStart: function() {\n            this.resizeStartWidth = this.getWidth();\n            this.resizeStartHeight = this.getHeight();\n        },\n\n        _handleResize: function() {\n            if (Garnish.ltr) {\n                this.desiredWidth = this.resizeStartWidth + (this.resizeDragger.mouseDistX * 2);\n            }\n            else {\n                this.desiredWidth = this.resizeStartWidth - (this.resizeDragger.mouseDistX * 2);\n            }\n\n            this.desiredHeight = this.resizeStartHeight + (this.resizeDragger.mouseDistY * 2);\n\n            this.updateSizeAndPosition();\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            if (this.$container) {\n                this.$container.removeData('modal').remove();\n            }\n\n            if (this.dragger) {\n                this.dragger.destroy();\n            }\n\n            if (this.resizeDragger) {\n                this.resizeDragger.destroy();\n            }\n\n            this.base();\n        }\n    },\n    {\n        relativeElemPadding: 8,\n        defaults: {\n            autoShow: true,\n            draggable: false,\n            dragHandleSelector: null,\n            resizable: false,\n            minGutter: 10,\n            onShow: $.noop,\n            onHide: $.noop,\n            onFadeIn: $.noop,\n            onFadeOut: $.noop,\n            closeOtherModals: false,\n            hideOnEsc: true,\n            hideOnShadeClick: true,\n            shadeClass: 'modal-shade'\n        },\n        instances: [],\n        visibleModal: null\n    }\n);\n\n/** global: Garnish */\n/**\n * Nice Text\n */\nGarnish.NiceText = Garnish.Base.extend(\n    {\n        $input: null,\n        $hint: null,\n        $stage: null,\n        $charsLeft: null,\n        autoHeight: null,\n        maxLength: null,\n        showCharsLeft: false,\n        showingHint: false,\n        val: null,\n        inputBoxSizing: 'content-box',\n        width: null,\n        height: null,\n        minHeight: null,\n        initialized: false,\n\n        init: function(input, settings) {\n            this.$input = $(input);\n            this.settings = $.extend({}, Garnish.NiceText.defaults, settings);\n\n            if (this.isVisible()) {\n                this.initialize();\n            }\n            else {\n                this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n            }\n        },\n\n        isVisible: function() {\n            return (this.$input.height() > 0);\n        },\n\n        initialize: function() {\n            if (this.initialized) {\n                return;\n            }\n\n            this.initialized = true;\n            this.removeListener(Garnish.$win, 'resize');\n\n            this.maxLength = this.$input.attr('maxlength');\n\n            if (this.maxLength) {\n                this.maxLength = parseInt(this.maxLength);\n            }\n\n            if (this.maxLength && (this.settings.showCharsLeft || Garnish.hasAttr(this.$input, 'data-show-chars-left'))) {\n                this.showCharsLeft = true;\n\n                // Remove the maxlength attribute\n                this.$input.removeAttr('maxlength');\n            }\n\n            // Is this already a transparent text input?\n            if (this.$input.data('nicetext')) {\n                Garnish.log('Double-instantiating a transparent text input on an element');\n                this.$input.data('nicetext').destroy();\n            }\n\n            this.$input.data('nicetext', this);\n\n            this.getVal();\n\n            this.autoHeight = (this.settings.autoHeight && this.$input.prop('nodeName') == 'TEXTAREA');\n\n            if (this.autoHeight) {\n                this.minHeight = this.getHeightForValue('');\n                this.updateHeight();\n\n                // Update height when the window resizes\n                this.width = this.$input.width();\n                this.addListener(Garnish.$win, 'resize', 'updateHeightIfWidthChanged');\n            }\n\n            if (this.settings.hint) {\n                this.$hintContainer = $('<div class=\"texthint-container\"/>').insertBefore(this.$input);\n                this.$hint = $('<div class=\"texthint\">' + this.settings.hint + '</div>').appendTo(this.$hintContainer);\n                this.$hint.css({\n                    top: (parseInt(this.$input.css('borderTopWidth')) + parseInt(this.$input.css('paddingTop'))),\n                    left: (parseInt(this.$input.css('borderLeftWidth')) + parseInt(this.$input.css('paddingLeft')) + 1)\n                });\n                Garnish.copyTextStyles(this.$input, this.$hint);\n\n                if (this.val) {\n                    this.$hint.hide();\n                }\n                else {\n                    this.showingHint = true;\n                }\n\n                // Focus the input when clicking on the hint\n                this.addListener(this.$hint, 'mousedown', function(ev) {\n                    ev.preventDefault();\n                    this.$input.focus();\n                });\n            }\n\n            if (this.showCharsLeft) {\n                this.$charsLeft = $('<div class=\"' + this.settings.charsLeftClass + '\"/>').insertAfter(this.$input);\n                this.updateCharsLeft();\n            }\n\n            this.addListener(this.$input, 'textchange', 'onTextChange');\n        },\n\n        initializeIfVisible: function() {\n            if (this.isVisible()) {\n                this.initialize();\n            }\n        },\n\n        getVal: function() {\n            this.val = this.$input.val();\n            return this.val;\n        },\n\n        showHint: function() {\n            this.$hint.velocity('fadeIn', {\n                complete: Garnish.NiceText.hintFadeDuration\n            });\n\n            this.showingHint = true;\n        },\n\n        hideHint: function() {\n            this.$hint.velocity('fadeOut', {\n                complete: Garnish.NiceText.hintFadeDuration\n            });\n\n            this.showingHint = false;\n        },\n\n        onTextChange: function() {\n            this.getVal();\n\n            if (this.$hint) {\n                if (this.showingHint && this.val) {\n                    this.hideHint();\n                }\n                else if (!this.showingHint && !this.val) {\n                    this.showHint();\n                }\n            }\n\n            if (this.autoHeight) {\n                this.updateHeight();\n            }\n\n            if (this.showCharsLeft) {\n                this.updateCharsLeft();\n            }\n        },\n\n        buildStage: function() {\n            this.$stage = $('<stage/>').appendTo(Garnish.$bod);\n\n            // replicate the textarea's text styles\n            this.$stage.css({\n                display: 'block',\n                position: 'absolute',\n                top: -9999,\n                left: -9999\n            });\n\n            this.inputBoxSizing = this.$input.css('box-sizing');\n\n            if (this.inputBoxSizing == 'border-box') {\n                this.$stage.css({\n                    'border-top': this.$input.css('border-top'),\n                    'border-right': this.$input.css('border-right'),\n                    'border-bottom': this.$input.css('border-bottom'),\n                    'border-left': this.$input.css('border-left'),\n                    'padding-top': this.$input.css('padding-top'),\n                    'padding-right': this.$input.css('padding-right'),\n                    'padding-bottom': this.$input.css('padding-bottom'),\n                    'padding-left': this.$input.css('padding-left'),\n                    '-webkit-box-sizing': this.inputBoxSizing,\n                    '-moz-box-sizing': this.inputBoxSizing,\n                    'box-sizing': this.inputBoxSizing\n                });\n            }\n\n            Garnish.copyTextStyles(this.$input, this.$stage);\n        },\n\n        getHeightForValue: function(val) {\n            if (!this.$stage) {\n                this.buildStage();\n            }\n\n            if (this.inputBoxSizing == 'border-box') {\n                this.$stage.css('width', this.$input.outerWidth());\n            }\n            else {\n                this.$stage.css('width', this.$input.width());\n            }\n\n            if (!val) {\n                val = '&nbsp;';\n                for (var i = 1; i < this.$input.prop('rows'); i++) {\n                    val += '<br/>&nbsp;';\n                }\n            }\n            else {\n                // Ampersand entities\n                val = val.replace(/&/g, '&amp;');\n\n                // < and >\n                val = val.replace(/</g, '&lt;');\n                val = val.replace(/>/g, '&gt;');\n\n                // Multiple spaces\n                val = val.replace(/ {2,}/g, function(spaces) {\n                    // TODO: replace with String.repeat() when more broadly available?\n                    var replace = '';\n                    for (var i = 0; i < spaces.length - 1; i++) {\n                        replace += '&nbsp;';\n                    }\n                    return replace + ' ';\n                });\n\n                // Line breaks\n                val = val.replace(/[\\n\\r]$/g, '<br/>&nbps;');\n                val = val.replace(/[\\n\\r]/g, '<br/>');\n            }\n\n            this.$stage.html(val);\n\n            if (this.inputBoxSizing == 'border-box') {\n                this.getHeightForValue._height = this.$stage.outerHeight();\n            }\n            else {\n                this.getHeightForValue._height = this.$stage.height();\n            }\n\n            if (this.minHeight && this.getHeightForValue._height < this.minHeight) {\n                this.getHeightForValue._height = this.minHeight;\n            }\n\n            return this.getHeightForValue._height;\n        },\n\n        updateHeight: function() {\n            // has the height changed?\n            if (this.height !== (this.height = this.getHeightForValue(this.val))) {\n                this.$input.css('min-height', this.height);\n\n                if (this.initialized) {\n                    this.onHeightChange();\n                }\n            }\n        },\n\n        updateHeightIfWidthChanged: function() {\n            if (this.isVisible() && this.width !== (this.width = this.$input.width()) && this.width) {\n                this.updateHeight();\n            }\n        },\n\n        onHeightChange: function() {\n            this.settings.onHeightChange();\n        },\n\n        updateCharsLeft: function() {\n            this.updateCharsLeft._charsLeft = this.maxLength - this.val.length;\n            this.$charsLeft.text(this.updateCharsLeft._charsLeft);\n\n            if (this.updateCharsLeft._charsLeft >= 0) {\n                this.$charsLeft.removeClass(this.settings.negativeCharsLeftClass);\n            }\n            else {\n                this.$charsLeft.addClass(this.settings.negativeCharsLeftClass);\n            }\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$input.removeData('nicetext');\n\n            if (this.$hint) {\n                this.$hint.remove();\n            }\n\n            if (this.$stage) {\n                this.$stage.remove();\n            }\n\n            this.base();\n        }\n    },\n    {\n        interval: 100,\n        hintFadeDuration: 50,\n        defaults: {\n            autoHeight: true,\n            showCharsLeft: false,\n            charsLeftClass: 'chars-left',\n            negativeCharsLeftClass: 'negative-chars-left',\n            onHeightChange: $.noop\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Pill\n */\nGarnish.Pill = Garnish.Base.extend(\n    {\n        $outerContainer: null,\n        $innerContainer: null,\n        $btns: null,\n        $selectedBtn: null,\n        $input: null,\n\n        init: function(outerContainer) {\n            this.$outerContainer = $(outerContainer);\n\n            // Is this already a pill?\n            if (this.$outerContainer.data('pill')) {\n                Garnish.log('Double-instantiating a pill on an element');\n                this.$outerContainer.data('pill').destroy();\n            }\n\n            this.$outerContainer.data('pill', this);\n\n            this.$innerContainer = this.$outerContainer.find('.btngroup:first');\n            this.$btns = this.$innerContainer.find('.btn');\n            this.$selectedBtn = this.$btns.filter('.active:first');\n            this.$input = this.$outerContainer.find('input:first');\n\n            Garnish.preventOutlineOnMouseFocus(this.$innerContainer);\n            this.addListener(this.$btns, 'mousedown', 'onMouseDown');\n            this.addListener(this.$innerContainer, 'keydown', 'onKeyDown');\n        },\n\n        select: function(btn) {\n            this.$selectedBtn.removeClass('active');\n            var $btn = $(btn);\n            $btn.addClass('active');\n            this.$input.val($btn.attr('data-value'));\n            this.$selectedBtn = $btn;\n        },\n\n        selectNext: function() {\n            if (!this.$selectedBtn.length) {\n                this.select(this.$btns[this.$btns.length - 1]);\n            }\n            else {\n                var nextIndex = this._getSelectedBtnIndex() + 1;\n\n                if (this.$btns[nextIndex] !== undefined) {\n                    this.select(this.$btns[nextIndex]);\n                }\n            }\n        },\n\n        selectPrev: function() {\n            if (!this.$selectedBtn.length) {\n                this.select(this.$btns[0]);\n            }\n            else {\n                var prevIndex = this._getSelectedBtnIndex() - 1;\n\n                if (this.$btns[prevIndex] !== undefined) {\n                    this.select(this.$btns[prevIndex]);\n                }\n            }\n        },\n\n        onMouseDown: function(ev) {\n            this.select(ev.currentTarget);\n        },\n\n        _getSelectedBtnIndex: function() {\n            if (this.$selectedBtn[0] !== undefined) {\n                return $.inArray(this.$selectedBtn[0], this.$btns);\n            }\n            else {\n                return -1;\n            }\n        },\n\n        onKeyDown: function(ev) {\n            switch (ev.keyCode) {\n                case Garnish.RIGHT_KEY: {\n                    if (Garnish.ltr) {\n                        this.selectNext();\n                    }\n                    else {\n                        this.selectPrev();\n                    }\n\n                    ev.preventDefault();\n                    break;\n                }\n\n                case Garnish.LEFT_KEY: {\n                    if (Garnish.ltr) {\n                        this.selectPrev();\n                    }\n                    else {\n                        this.selectNext();\n                    }\n\n                    ev.preventDefault();\n                    break;\n                }\n            }\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$outerContainer.removeData('pill');\n            this.base();\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Select\n */\nGarnish.Select = Garnish.Base.extend(\n    {\n        $container: null,\n        $items: null,\n        $selectedItems: null,\n\n        mousedownTarget: null,\n        mouseUpTimeout: null,\n        callbackFrame: null,\n\n        $focusable: null,\n        $first: null,\n        first: null,\n        $last: null,\n        last: null,\n\n        /**\n         * Constructor\n         */\n        init: function(container, items, settings) {\n            this.$container = $(container);\n\n            // Param mapping\n            if (items === undefined && $.isPlainObject(container)) {\n                // (settings)\n                settings = container;\n                container = null;\n                items = null;\n            }\n            else if (settings === undefined && $.isPlainObject(items)) {\n                // (container, settings)\n                settings = items;\n                items = null;\n            }\n\n            // Is this already a select?\n            if (this.$container.data('select')) {\n                Garnish.log('Double-instantiating a select on an element');\n                this.$container.data('select').destroy();\n            }\n\n            this.$container.data('select', this);\n\n            this.setSettings(settings, Garnish.Select.defaults);\n\n            this.$items = $();\n            this.$selectedItems = $();\n\n            this.addItems(items);\n\n            // --------------------------------------------------------------------\n\n            if (this.settings.allowEmpty && !this.settings.checkboxMode) {\n                this.addListener(this.$container, 'click', function(ev) {\n                    if (this.ignoreClick) {\n                        this.ignoreClick = false;\n                    }\n                    else {\n                        // Deselect all items on container click\n                        this.deselectAll(true);\n                    }\n                });\n            }\n        },\n\n        /**\n         * Get Item Index\n         */\n        getItemIndex: function($item) {\n            return this.$items.index($item[0]);\n        },\n\n        /**\n         * Is Selected?\n         */\n        isSelected: function(item) {\n            if (Garnish.isJquery(item)) {\n                if (!item[0]) {\n                    return false;\n                }\n\n                item = item[0];\n            }\n\n            return ($.inArray(item, this.$selectedItems) != -1);\n        },\n\n        /**\n         * Select Item\n         */\n        selectItem: function($item, focus, preventScroll) {\n            if (!this.settings.multi) {\n                this.deselectAll();\n            }\n\n            this.$first = this.$last = $item;\n            this.first = this.last = this.getItemIndex($item);\n\n            if (focus) {\n                this.setFocusableItem($item);\n                this.focusItem($item, preventScroll);\n            }\n\n            this._selectItems($item);\n        },\n\n        selectAll: function() {\n            if (!this.settings.multi || !this.$items.length) {\n                return;\n            }\n\n            this.first = 0;\n            this.last = this.$items.length - 1;\n            this.$first = this.$items.eq(this.first);\n            this.$last = this.$items.eq(this.last);\n\n            this._selectItems(this.$items);\n        },\n\n        /**\n         * Select Range\n         */\n        selectRange: function($item, preventScroll) {\n            if (!this.settings.multi) {\n                return this.selectItem($item, true);\n            }\n\n            this.deselectAll();\n\n            this.$last = $item;\n            this.last = this.getItemIndex($item);\n\n            this.setFocusableItem($item);\n            this.focusItem($item, preventScroll);\n\n            // prepare params for $.slice()\n            if (this.first < this.last) {\n                var sliceFrom = this.first,\n                    sliceTo = this.last + 1;\n            }\n            else {\n                var sliceFrom = this.last,\n                    sliceTo = this.first + 1;\n            }\n\n            this._selectItems(this.$items.slice(sliceFrom, sliceTo));\n        },\n\n        /**\n         * Deselect Item\n         */\n        deselectItem: function($item) {\n            var index = this.getItemIndex($item);\n            if (this.first === index) {\n                this.$first = this.first = null;\n            }\n            if (this.last === index) {\n                this.$last = this.last = null;\n            }\n\n            this._deselectItems($item);\n        },\n\n        /**\n         * Deselect All\n         */\n        deselectAll: function(clearFirst) {\n            if (clearFirst) {\n                this.$first = this.first = this.$last = this.last = null;\n            }\n\n            this._deselectItems(this.$items);\n        },\n\n        /**\n         * Deselect Others\n         */\n        deselectOthers: function($item) {\n            this.deselectAll();\n            this.selectItem($item, true);\n        },\n\n        /**\n         * Toggle Item\n         */\n        toggleItem: function($item, preventScroll) {\n            if (!this.isSelected($item)) {\n                this.selectItem($item, true, preventScroll);\n            }\n            else {\n                if (this._canDeselect($item)) {\n                    this.deselectItem($item, true);\n                }\n            }\n        },\n\n        clearMouseUpTimeout: function() {\n            clearTimeout(this.mouseUpTimeout);\n        },\n\n        getFirstItem: function() {\n            if (this.$items.length) {\n                return this.$items.first();\n            }\n        },\n\n        getLastItem: function() {\n            if (this.$items.length) {\n                return this.$items.last();\n            }\n        },\n\n        isPreviousItem: function(index) {\n            return (index > 0);\n        },\n\n        isNextItem: function(index) {\n            return (index < this.$items.length - 1);\n        },\n\n        getPreviousItem: function(index) {\n            if (this.isPreviousItem(index)) {\n                return this.$items.eq(index - 1);\n            }\n        },\n\n        getNextItem: function(index) {\n            if (this.isNextItem(index)) {\n                return this.$items.eq(index + 1);\n            }\n        },\n\n        getItemToTheLeft: function(index) {\n            var func = (Garnish.ltr ? 'Previous' : 'Next');\n\n            if (this['is' + func + 'Item'](index)) {\n                if (this.settings.horizontal) {\n                    return this['get' + func + 'Item'](index);\n                }\n                if (!this.settings.vertical) {\n                    return this.getClosestItem(index, Garnish.X_AXIS, '<');\n                }\n            }\n        },\n\n        getItemToTheRight: function(index) {\n            var func = (Garnish.ltr ? 'Next' : 'Previous');\n\n            if (this['is' + func + 'Item'](index)) {\n                if (this.settings.horizontal) {\n                    return this['get' + func + 'Item'](index);\n                }\n                else if (!this.settings.vertical) {\n                    return this.getClosestItem(index, Garnish.X_AXIS, '>');\n                }\n            }\n        },\n\n        getItemAbove: function(index) {\n            if (this.isPreviousItem(index)) {\n                if (this.settings.vertical) {\n                    return this.getPreviousItem(index);\n                }\n                else if (!this.settings.horizontal) {\n                    return this.getClosestItem(index, Garnish.Y_AXIS, '<');\n                }\n            }\n        },\n\n        getItemBelow: function(index) {\n            if (this.isNextItem(index)) {\n                if (this.settings.vertical) {\n                    return this.getNextItem(index);\n                }\n                else if (!this.settings.horizontal) {\n                    return this.getClosestItem(index, Garnish.Y_AXIS, '>');\n                }\n            }\n        },\n\n        getClosestItem: function(index, axis, dir) {\n            var axisProps = Garnish.Select.closestItemAxisProps[axis],\n                dirProps = Garnish.Select.closestItemDirectionProps[dir];\n\n            var $thisItem = this.$items.eq(index),\n                thisOffset = $thisItem.offset(),\n                thisMidpoint = thisOffset[axisProps.midpointOffset] + Math.round($thisItem[axisProps.midpointSizeFunc]() / 2),\n                otherRowPos = null,\n                smallestMidpointDiff = null,\n                $closestItem = null;\n\n            // Go the other way if this is the X axis and a RTL page\n            if (Garnish.rtl && axis == Garnish.X_AXIS) {\n                var step = dirProps.step * -1;\n            }\n            else {\n                var step = dirProps.step;\n            }\n\n            for (var i = index + step; (this.$items[i] !== undefined); i += step) {\n                var $otherItem = this.$items.eq(i),\n                    otherOffset = $otherItem.offset();\n\n                // Are we on the next row yet?\n                if (dirProps.isNextRow(otherOffset[axisProps.rowOffset], thisOffset[axisProps.rowOffset])) {\n                    // Is this the first time we've seen this row?\n                    if (otherRowPos === null) {\n                        otherRowPos = otherOffset[axisProps.rowOffset];\n                    }\n                    // Have we gone too far?\n                    else if (otherOffset[axisProps.rowOffset] != otherRowPos) {\n                        break;\n                    }\n\n                    var otherMidpoint = otherOffset[axisProps.midpointOffset] + Math.round($otherItem[axisProps.midpointSizeFunc]() / 2),\n                        midpointDiff = Math.abs(thisMidpoint - otherMidpoint);\n\n                    // Are we getting warmer?\n                    if (smallestMidpointDiff === null || midpointDiff < smallestMidpointDiff) {\n                        smallestMidpointDiff = midpointDiff;\n                        $closestItem = $otherItem;\n                    }\n                    // Getting colder?\n                    else {\n                        break;\n                    }\n                }\n                // Getting colder?\n                else if (dirProps.isWrongDirection(otherOffset[axisProps.rowOffset], thisOffset[axisProps.rowOffset])) {\n                    break;\n                }\n            }\n\n            return $closestItem;\n        },\n\n        getFurthestItemToTheLeft: function(index) {\n            return this.getFurthestItem(index, 'ToTheLeft');\n        },\n\n        getFurthestItemToTheRight: function(index) {\n            return this.getFurthestItem(index, 'ToTheRight');\n        },\n\n        getFurthestItemAbove: function(index) {\n            return this.getFurthestItem(index, 'Above');\n        },\n\n        getFurthestItemBelow: function(index) {\n            return this.getFurthestItem(index, 'Below');\n        },\n\n        getFurthestItem: function(index, dir) {\n            var $item, $testItem;\n\n            while ($testItem = this['getItem' + dir](index)) {\n                $item = $testItem;\n                index = this.getItemIndex($item);\n            }\n\n            return $item;\n        },\n\n        /**\n         * totalSelected getter\n         */\n        get totalSelected() {\n            return this.getTotalSelected();\n        },\n\n        /**\n         * Get Total Selected\n         */\n        getTotalSelected: function() {\n            return this.$selectedItems.length;\n        },\n\n        /**\n         * Add Items\n         */\n        addItems: function(items) {\n            var $items = $(items);\n\n            for (var i = 0; i < $items.length; i++) {\n                var item = $items[i];\n\n                // Make sure this element doesn't belong to another selector\n                if ($.data(item, 'select')) {\n                    Garnish.log('Element was added to more than one selector');\n                    $.data(item, 'select').removeItems(item);\n                }\n\n                // Add the item\n                $.data(item, 'select', this);\n\n                // Get the handle\n                if (this.settings.handle) {\n                    if (typeof this.settings.handle == 'object') {\n                        var $handle = $(this.settings.handle);\n                    }\n                    else if (typeof this.settings.handle == 'string') {\n                        var $handle = $(item).find(this.settings.handle);\n                    }\n                    else if (typeof this.settings.handle == 'function') {\n                        var $handle = $(this.settings.handle(item));\n                    }\n                }\n                else {\n                    var $handle = $(item);\n                }\n\n                $.data(item, 'select-handle', $handle);\n                $handle.data('select-item', item);\n\n                this.addListener($handle, 'mousedown', 'onMouseDown');\n                this.addListener($handle, 'mouseup', 'onMouseUp');\n                this.addListener($handle, 'click', function(ev) {\n                    this.ignoreClick = true;\n                });\n\n                this.addListener(item, 'keydown', 'onKeyDown');\n            }\n\n            this.$items = this.$items.add($items);\n            this.updateIndexes();\n        },\n\n        /**\n         * Remove Items\n         */\n        removeItems: function(items) {\n            items = $.makeArray(items);\n\n            var itemsChanged = false,\n                selectionChanged = false;\n\n            for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n\n                // Make sure we actually know about this item\n                var index = $.inArray(item, this.$items);\n                if (index != -1) {\n                    this._deinitItem(item);\n                    this.$items.splice(index, 1);\n                    itemsChanged = true;\n\n                    var selectedIndex = $.inArray(item, this.$selectedItems);\n                    if (selectedIndex != -1) {\n                        this.$selectedItems.splice(selectedIndex, 1);\n                        selectionChanged = true;\n                    }\n                }\n            }\n\n            if (itemsChanged) {\n                this.updateIndexes();\n\n                if (selectionChanged) {\n                    $(items).removeClass(this.settings.selectedClass);\n                    this.onSelectionChange();\n                }\n            }\n        },\n\n        /**\n         * Remove All Items\n         */\n        removeAllItems: function() {\n            for (var i = 0; i < this.$items.length; i++) {\n                this._deinitItem(this.$items[i]);\n            }\n\n            this.$items = $();\n            this.$selectedItems = $();\n            this.updateIndexes();\n        },\n\n        /**\n         * Update First/Last indexes\n         */\n        updateIndexes: function() {\n            if (this.first !== null) {\n                this.first = this.getItemIndex(this.$first);\n                this.setFocusableItem(this.$first);\n            }\n            else if (this.$items.length) {\n                this.setFocusableItem($(this.$items[0]));\n            }\n\n            if (this.last !== null) {\n                this.last = this.getItemIndex(this.$last);\n            }\n        },\n\n        /**\n         * Reset Item Order\n         */\n        resetItemOrder: function() {\n            this.$items = $().add(this.$items);\n            this.$selectedItems = $().add(this.$selectedItems);\n            this.updateIndexes();\n        },\n\n        /**\n         * Sets the focusable item.\n         *\n         * We only want to have one focusable item per selection list, so that the user\n         * doesn't have to tab through a million items.\n         *\n         * @param object $item\n         */\n        setFocusableItem: function($item) {\n            if (this.$focusable) {\n                this.$focusable.removeAttr('tabindex');\n            }\n\n            this.$focusable = $item.attr('tabindex', '0');\n        },\n\n        /**\n         * Sets the focus on an item.\n         */\n        focusItem: function($item, preventScroll) {\n            if (preventScroll) {\n                var scrollLeft = Garnish.$doc.scrollLeft(),\n                    scrollTop = Garnish.$doc.scrollTop();\n                $item.focus();\n                window.scrollTo(scrollLeft, scrollTop);\n            }\n            else {\n                $item.focus();\n            }\n        },\n\n        /**\n         * Get Selected Items\n         */\n        getSelectedItems: function() {\n            return this.$selectedItems;\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$container.removeData('select');\n            this.removeAllItems();\n            this.base();\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        /**\n         * On Mouse Down\n         */\n        onMouseDown: function(ev) {\n            // ignore right clicks\n            if (ev.which != Garnish.PRIMARY_CLICK) {\n                return;\n            }\n\n            // Enforce the filter\n            if (this.settings.filter && !$(ev.target).is(this.settings.filter)) {\n                return;\n            }\n\n            this.mousedownTarget = ev.currentTarget;\n\n            var $item = $($.data(ev.currentTarget, 'select-item'));\n\n            if (this.first !== null && ev.shiftKey) {\n                // Shift key is consistent for both selection modes\n                this.selectRange($item, true);\n            }\n            else if (this._actAsCheckbox(ev)) {\n                this.toggleItem($item, true);\n            }\n        },\n\n        /**\n         * On Mouse Up\n         */\n        onMouseUp: function(ev) {\n            // ignore right clicks\n            if (ev.which != Garnish.PRIMARY_CLICK) {\n                return;\n            }\n\n            // Enfore the filter\n            if (this.settings.filter && !$(ev.target).is(this.settings.filter)) {\n                return;\n            }\n\n            var $item = $($.data(ev.currentTarget, 'select-item'));\n\n            // was this a click?\n            if (\n                !this._actAsCheckbox(ev) && !ev.shiftKey &&\n                ev.currentTarget == this.mousedownTarget\n            ) {\n                // If this is already selected, wait a moment to see if this is a double click before making any rash decisions\n                if (this.isSelected($item)) {\n                    this.clearMouseUpTimeout();\n\n                    this.mouseUpTimeout = setTimeout($.proxy(function() {\n                        this.deselectOthers($item);\n                    }, this), 300);\n                }\n                else {\n                    this.deselectAll();\n                    this.selectItem($item, true, true);\n                }\n            }\n        },\n\n        /**\n         * On Key Down\n         */\n        onKeyDown: function(ev) {\n            // Ignore if the focus isn't on one of our items\n            if (ev.target != ev.currentTarget) {\n                return;\n            }\n\n            var ctrlKey = Garnish.isCtrlKeyPressed(ev);\n\n            if (!this.settings.checkboxMode || !this.$focusable.length) {\n                var anchor = ev.shiftKey ? this.last : this.first;\n            }\n            else {\n                var anchor = $.inArray(this.$focusable[0], this.$items);\n\n                if (anchor == -1) {\n                    anchor = 0;\n                }\n            }\n\n            // Ok, what are we doing here?\n            switch (ev.keyCode) {\n                case Garnish.LEFT_KEY: {\n                    ev.preventDefault();\n\n                    // Select the last item if none are selected\n                    if (this.first === null) {\n                        if (Garnish.ltr) {\n                            var $item = this.getLastItem();\n                        }\n                        else {\n                            var $item = this.getFirstItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            var $item = this.getFurthestItemToTheLeft(anchor);\n                        }\n                        else {\n                            var $item = this.getItemToTheLeft(anchor);\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.RIGHT_KEY: {\n                    ev.preventDefault();\n\n                    // Select the first item if none are selected\n                    if (this.first === null) {\n                        if (Garnish.ltr) {\n                            var $item = this.getFirstItem();\n                        }\n                        else {\n                            var $item = this.getLastItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            var $item = this.getFurthestItemToTheRight(anchor);\n                        }\n                        else {\n                            var $item = this.getItemToTheRight(anchor);\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n\n                    // Select the last item if none are selected\n                    if (this.first === null) {\n                        if (this.$focusable) {\n                            var $item = this.$focusable.prev();\n                        }\n\n                        if (!this.$focusable || !$item.length) {\n                            var $item = this.getLastItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            var $item = this.getFurthestItemAbove(anchor);\n                        }\n                        else {\n                            var $item = this.getItemAbove(anchor);\n                        }\n\n                        if (!$item) {\n                            $item = this.getFirstItem();\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n\n                    // Select the first item if none are selected\n                    if (this.first === null) {\n                        if (this.$focusable) {\n                            var $item = this.$focusable.next();\n                        }\n\n                        if (!this.$focusable || !$item.length) {\n                            var $item = this.getFirstItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            var $item = this.getFurthestItemBelow(anchor);\n                        }\n                        else {\n                            var $item = this.getItemBelow(anchor);\n                        }\n\n                        if (!$item) {\n                            $item = this.getLastItem();\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.SPACE_KEY: {\n                    if (!ctrlKey) {\n                        ev.preventDefault();\n\n                        if (this.isSelected(this.$focusable)) {\n                            if (this._canDeselect(this.$focusable)) {\n                                this.deselectItem(this.$focusable);\n                            }\n                        }\n                        else {\n                            this.selectItem(this.$focusable, true);\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.A_KEY: {\n                    if (ctrlKey) {\n                        ev.preventDefault();\n                        this.selectAll();\n                    }\n\n                    break;\n                }\n            }\n\n            // Is there an item queued up for focus/selection?\n            if ($item && $item.length) {\n                if (!this.settings.checkboxMode) {\n                    // select it\n                    if (this.first !== null && ev.shiftKey) {\n                        this.selectRange($item);\n                    }\n                    else {\n                        this.deselectAll();\n                        this.selectItem($item, true);\n                    }\n                }\n                else {\n                    // just set the new item to be focussable\n                    this.setFocusableItem($item);\n                    $item.focus();\n                }\n            }\n        },\n\n        /**\n         * Set Callback Timeout\n         */\n        onSelectionChange: function() {\n            if (this.callbackFrame) {\n                Garnish.cancelAnimationFrame(this.callbackFrame);\n                this.callbackFrame = null;\n            }\n\n            this.callbackFrame = Garnish.requestAnimationFrame($.proxy(function() {\n                this.callbackFrame = null;\n                this.trigger('selectionChange');\n                this.settings.onSelectionChange();\n            }, this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        _actAsCheckbox: function(ev) {\n            if (Garnish.isCtrlKeyPressed(ev)) {\n                return !this.settings.checkboxMode;\n            }\n            else {\n                return this.settings.checkboxMode;\n            }\n        },\n\n        _canDeselect: function($items) {\n            return (this.settings.allowEmpty || this.totalSelected > $items.length);\n        },\n\n        _selectItems: function($items) {\n            $items.addClass(this.settings.selectedClass);\n            this.$selectedItems = this.$selectedItems.add($items);\n            this.onSelectionChange();\n        },\n\n        _deselectItems: function($items) {\n            $items.removeClass(this.settings.selectedClass);\n            this.$selectedItems = this.$selectedItems.not($items);\n            this.onSelectionChange();\n        },\n\n        /**\n         * Deinitialize an item.\n         */\n        _deinitItem: function(item) {\n            var $handle = $.data(item, 'select-handle');\n\n            if ($handle) {\n                $handle.removeData('select-item');\n                this.removeAllListeners($handle);\n            }\n\n            $.removeData(item, 'select');\n            $.removeData(item, 'select-handle');\n        }\n    },\n    {\n        defaults: {\n            selectedClass: 'sel',\n            multi: false,\n            allowEmpty: true,\n            vertical: false,\n            horizontal: false,\n            handle: null,\n            filter: null,\n            checkboxMode: false,\n            onSelectionChange: $.noop\n        },\n\n        closestItemAxisProps: {\n            x: {\n                midpointOffset: 'top',\n                midpointSizeFunc: 'outerHeight',\n                rowOffset: 'left'\n            },\n            y: {\n                midpointOffset: 'left',\n                midpointSizeFunc: 'outerWidth',\n                rowOffset: 'top'\n            }\n        },\n\n        closestItemDirectionProps: {\n            '<': {\n                step: -1,\n                isNextRow: function(a, b) {\n                    return (a < b);\n                },\n                isWrongDirection: function(a, b) {\n                    return (a > b);\n                }\n            },\n            '>': {\n                step: 1,\n                isNextRow: function(a, b) {\n                    return (a > b);\n                },\n                isWrongDirection: function(a, b) {\n                    return (a < b);\n                }\n            }\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Select Menu\n */\nGarnish.SelectMenu = Garnish.Menu.extend(\n    {\n        /**\n         * Constructor\n         */\n        init: function(btn, options, settings, callback) {\n            // argument mapping\n            if (typeof settings == 'function') {\n                // (btn, options, callback)\n                callback = settings;\n                settings = {};\n            }\n\n            settings = $.extend({}, Garnish.SelectMenu.defaults, settings);\n\n            this.base(btn, options, settings, callback);\n\n            this.selected = -1;\n        },\n\n        /**\n         * Build\n         */\n        build: function() {\n            this.base();\n\n            if (this.selected != -1) {\n                this._addSelectedOptionClass(this.selected);\n            }\n        },\n\n        /**\n         * Select\n         */\n        select: function(option) {\n            // ignore if it's already selected\n            if (option == this.selected) {\n                return;\n            }\n\n            if (this.dom.ul) {\n                if (this.selected != -1) {\n                    this.dom.options[this.selected].className = '';\n                }\n\n                this._addSelectedOptionClass(option);\n            }\n\n            this.selected = option;\n\n            // set the button text to the selected option\n            this.setBtnText($(this.options[option].label).text());\n\n            this.base(option);\n        },\n\n        /**\n         * Add Selected Option Class\n         */\n        _addSelectedOptionClass: function(option) {\n            this.dom.options[option].className = 'sel';\n        },\n\n        /**\n         * Set Button Text\n         */\n        setBtnText: function(text) {\n            this.dom.$btnLabel.text(text);\n        }\n\n    },\n    {\n        defaults: {\n            ulClass: 'menu select'\n        }\n    }\n);\n\n})(jQuery);\n"]}